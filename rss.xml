<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>LoopBack Blog</title>
        <link>https://loopbackio.github.io/</link>
        <description>LoopBack Blog</description>
        <lastBuildDate>Tue, 08 Dec 2020 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[LoopBack 4 November 2020 Milestone Update]]></title>
            <link>https://loopbackio.github.io/november-2020-milestone</link>
            <guid>november-2020-milestone</guid>
            <pubDate>Tue, 08 Dec 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>Hope you had a wonderful Thanksgiving for those who celebrate it! In November, LoopBack team focused on improving the context module and documentation, as well as bug fixes. The Toronto squad participated in the <a href="https://www-01.ibm.com/ibm/cas/cascon/" target="_blank" rel="noopener noreferrer">CASCONxEVOKE</a> conference. Instead of a physical booth, we held a virtual one online. We welcomed <a href="https://github.com/nflaig" target="_blank" rel="noopener noreferrer">@nflaig</a> as the new maintainer of <a href="https://github.com/strongloop/loopback-next" target="_blank" rel="noopener noreferrer"><code>loopback-next</code></a>.</p><p>Read more to know about the highlighted improvements:</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><ul><li><p>A new phase <code>init()</code> was added to the application life cycle events. It is used when a component need to contribute bindings asynchronously. For example:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">MyComponent</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">implements</span><span class="token plain"> </span><span class="token class-name maybe-class-name">Component</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">LifeCycleObserver</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Contribute bindings via `init`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// This cannot be done via constructor since it's synchronous.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> val </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">readFromConfig</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">app</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">bind</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'abc'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">to</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">status</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'initialized'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">initialized</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>You can check the <a href="https://loopback.io/doc/en/lb4/Component.html#component-life-cycle" target="_blank" rel="noopener noreferrer">Component</a> page to learn about its usage.</p></li><li><p><code>toInjectable()</code> was introduced as a shortcut to decorate a common/provider/dynamic-value-factory class and automatically creating binding for them. For example:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">injectable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">scope</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">BindingScope</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">SINGLETON</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">MyController</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">constructor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">inject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'my-options'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> options</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">MyOptions</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">binding</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toInjectable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">MyController</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>The decorator's usage is well documented on page <a href="https://loopback.io/doc/en/lb4/Binding.html#an-injectable-class" target="_blank" rel="noopener noreferrer">Binding</a>.</p></li><li><p>PR <a href="https://github.com/strongloop/loopback-next/pull/6701" target="_blank" rel="noopener noreferrer">#6701</a> updated test cases to reflect how the design types of array/undefined/complex properties are retrieved.</p></li><li><p>Method injection is allowed for the lifecycle methods in PR <a href="https://github.com/strongloop/loopback-next/pull/6740" target="_blank" rel="noopener noreferrer">#6740</a>. For example:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">MyObserverWithMethodInjection</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">implements</span><span class="token plain"> </span><span class="token class-name maybe-class-name">LifeCycleObserver</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  status </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'not-initialized'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">inject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'prefix'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> prefix</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">status</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">prefix</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c">:initialized</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">start</span><span class="token punctuation" style="color:#393A34">(</span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">inject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'prefix'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> prefix</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">status</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">prefix</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c">:started</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">stop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">inject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'prefix'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> prefix</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">status</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">prefix</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c">:stopped</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div></li><li><p>In some cases, your Express middleware wants to access LoopBack's RequestContext to resolve certain bindings. This can be done via <code>MIDDLEWARE_CONTEXT</code> property of the Express request object, which is set up by LoopBack when the <code>RequestContext</code> is instantiated. For example:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token constant" style="color:#36acaa">MIDDLEWARE_CONTEXT</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">RequestContext</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/rest'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">expressHandler</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">req</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> reqCtx </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">req </span><span class="token keyword module" style="color:#00009f">as</span><span class="token plain"> </span><span class="token builtin">any</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">[</span><span class="token constant" style="color:#36acaa">MIDDLEWARE_CONTEXT</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Now you have access to the LoopBack RequestContext</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="documentation">Documentation<a class="hash-link" href="#documentation" title="Direct link to heading">​</a></h2><ul><li><p>The guide for calling REST APIs and SOAP services were separated to make the steps involved clearer. You can check the overview page <a href="https://loopback.io/doc/en/lb4/Accessing-services.html" target="_blank" rel="noopener noreferrer">Accessing services</a> and its sub-topics <a href="https://loopback.io/doc/en/lb4/Calling-soap-web-services.html" target="_blank" rel="noopener noreferrer">Calling SOAP web services</a> and <a href="https://loopback.io/doc/en/lb4/Calling-rest-apis.html" target="_blank" rel="noopener noreferrer">Calling REST APIs</a> for details.</p></li><li><p>For troubleshooting, we added steps for creating breakpoints in vscode in the <a href="https://loopback.io/doc/en/lb4/Troubleshooting.html#creating-breakpoints" target="_blank" rel="noopener noreferrer">documentation</a>. You can find more details in PR <a href="https://github.com/strongloop/loopback-next/pull/6743" target="_blank" rel="noopener noreferrer">#6743</a>. </p></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="rest">REST<a class="hash-link" href="#rest" title="Direct link to heading">​</a></h2><ul><li>Matching a URL or hostname against a regular expression that contains an unescaped dot as part of the hostname might match more hostnames than expected. PR <a href="https://github.com/strongloop/loopback-next/pull/6813" target="_blank" rel="noopener noreferrer">#6813</a> updated the regular expression of hostnames accordingly.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="repository">Repository<a class="hash-link" href="#repository" title="Direct link to heading">​</a></h2><ul><li><a href="https://github.com/strongloop/loopback-next/pull/6755" target="_blank" rel="noopener noreferrer">#6755</a> threw 400 <code>BadRequestError</code> for invalid inclusion relation name by rejecting the request with statusCode as 400.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="examples">Examples<a class="hash-link" href="#examples" title="Direct link to heading">​</a></h2><ul><li>PR <a href="https://github.com/strongloop/loopback-next/pull/6598" target="_blank" rel="noopener noreferrer">#6598</a> updated artifacts of the <a href="https://github.com/strongloop/loopback-next/tree/master/examples/todo-list" target="_blank" rel="noopener noreferrer">todo-list</a> example to the latest style generated by the LoopBack CLI.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="enriching-loopback-and-its-community---you-are-invited">Enriching LoopBack and its Community - You are Invited!<a class="hash-link" href="#enriching-loopback-and-its-community---you-are-invited" title="Direct link to heading">​</a></h2><p>As mentioned in our <a href="https://strongloop.com/strongblog/2020-community-contribution/" target="_blank" rel="noopener noreferrer">recent blog post</a>, your contribution is important to make LoopBack a sustainable open source project. </p><p>Here is what you can do:</p><ul><li><a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">Join LoopBack Slack community</a></li><li><a href="https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22" target="_blank" rel="noopener noreferrer">Look for first-contribution-friendly issues</a></li><li>Give us feedback and join our discussion in <a href="https://github.com/strongloop/loopback-next" target="_blank" rel="noopener noreferrer">our GitHub repo</a></li></ul><p>Let's make LoopBack a better framework together!</p>]]></content:encoded>
            <category>Milestone update</category>
        </item>
        <item>
            <title><![CDATA[LoopBack 4 October 2020 Milestone Update]]></title>
            <link>https://loopbackio.github.io/october-2020-milestone</link>
            <guid>october-2020-milestone</guid>
            <pubDate>Thu, 05 Nov 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>In October, we were excited to see an increasing number of community contributions as people joined the <a href="https://strongloop.com/strongblog/2020-hacktoberfest/" target="_blank" rel="noopener noreferrer">Hacktoberfest</a> event. This month we had pretty balanced improvements in each area of the framework, including context, health check, OpenAPI specification and documentations. Keep reading to learn about the recently added features!</p><p>We welcomed <a href="https://github.com/mrmodise" target="_blank" rel="noopener noreferrer">@mrmodise</a> as the maintainer of <a href="https://github.com/strongloop/loopback4-example-shopping" target="_blank" rel="noopener noreferrer"><code>loopback4-shopping-example</code></a>. And we'd like to thank everyone <a href="https://github.com/nflaig" target="_blank" rel="noopener noreferrer">@nflaig</a>, <a href="https://github.com/MattiaPrimavera" target="_blank" rel="noopener noreferrer">@MattiaPrimavera</a>, <a href="https://github.com/mdbetancourt" target="_blank" rel="noopener noreferrer">@mdbetancourt</a>, <a href="https://github.com/mrmodise" target="_blank" rel="noopener noreferrer">@mrmodise</a>, <a href="https://github.com/frbuceta" target="_blank" rel="noopener noreferrer">@frbuceta</a>, <a href="https://github.com/HrithikMittal" target="_blank" rel="noopener noreferrer">@HrithikMittal</a>, <a href="https://github.com/simlt" target="_blank" rel="noopener noreferrer">@simlt</a>, <a href="https://github.com/hectorleiva" target="_blank" rel="noopener noreferrer">@hectorleiva</a>, <a href="https://github.com/pktippa" target="_blank" rel="noopener noreferrer">@pktippa</a>, <a href="https://github.com/VergilSkye" target="_blank" rel="noopener noreferrer">@VergilSkye</a>, <a href="https://github.com/kerolloz" target="_blank" rel="noopener noreferrer">@kerolloz</a>, <a href="https://github.com/arondn2" target="_blank" rel="noopener noreferrer">@arondn2</a>, <a href="https://github.com/mayank-SFIN571" target="_blank" rel="noopener noreferrer">@mayank-SFIN571</a> for your contributions in October!</p><p>Here are the highlighted improvements:</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="context">Context<a class="hash-link" href="#context" title="Direct link to heading">​</a></h2><ul><li>A set of fine-grained scopes <code>APPLICATION</code>, <code>SERVER</code> and <code>REQUEST</code> has been introduced to allow better
scoping of binding resolutions. The limitation of the previous scopes is explained in section <a href="https://loopback.io/doc/en/lb4/Binding.html#choose-the-right-scope" target="_blank" rel="noopener noreferrer">choose the right scope</a>, and section <a href="https://loopback.io/doc/en/lb4/Binding.html#resolve-a-binding-value-by-key-and-scope-within-a-context-hierarchy" target="_blank" rel="noopener noreferrer">resolve a binding value by key and scope within a context hierarchy</a> explains how different scopes determine the binding resolutions.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="rest">REST<a class="hash-link" href="#rest" title="Direct link to heading">​</a></h2><ul><li><p>Allowed array query parameter for a single value, like <code>{tags: 'hello'}</code> where parameter <code>tags</code> is a string array. See PR <a href="https://github.com/strongloop/loopback-next/pull/6542" target="_blank" rel="noopener noreferrer">#6542</a>.</p></li><li><p>Supported property level configuration for hidden fields, like <code>@property({type: 'string', hidden: true}) password: string</code>. This is the shortcut for specifying the hidden properties in model settings. See PR <a href="https://github.com/strongloop/loopback-next/pull/6484" target="_blank" rel="noopener noreferrer">#6484</a>.</p></li><li><p><code>save()</code> method throwing error due to missing <code>idName</code> is fixed in PR <a href="https://github.com/strongloop/loopback-next/pull/6640" target="_blank" rel="noopener noreferrer">#6640</a>.</p></li><li><p><code>modifySpec()</code> turns to an async function to allow async spec updates. See PR <a href="https://github.com/strongloop/loopback-next/pull/6655" target="_blank" rel="noopener noreferrer">#6655</a>.</p></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="build">Build<a class="hash-link" href="#build" title="Direct link to heading">​</a></h2><ul><li><p>A force clean rebuild was added to the pre-start script for the LoopBack 4 examples. You can run <code>npm start</code> after removing artifacts without manually cleaning the <code>/dist</code> files. See PR <a href="https://github.com/strongloop/loopback-next/pull/6588" target="_blank" rel="noopener noreferrer">#6588</a>.</p></li><li><p>Turned on <code>exit</code> for mocha tests for the created LoopBack applications. See PR <a href="https://github.com/strongloop/loopback-next/pull/6475" target="_blank" rel="noopener noreferrer">#6475</a>.</p></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="extensions">Extensions<a class="hash-link" href="#extensions" title="Direct link to heading">​</a></h2><ul><li><p>Module <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/socketio" target="_blank" rel="noopener noreferrer">@loopback/socketio</a> was added to use socket.io to expose controllers as WebSocket friendly endpoints.</p></li><li><p>Enable/disable the metrics endpoints in explorer when mounting the metric and health extensions. See PR <a href="https://github.com/strongloop/loopback-next/pull/6646" target="_blank" rel="noopener noreferrer">#6646</a> and PR <a href="https://github.com/strongloop/loopback-next/pull/6645" target="_blank" rel="noopener noreferrer">#6645</a>.</p></li><li><p>Only add <code>MetricsObserver</code>, <code>MetricsPushObserver</code> and expose <code>/metrics</code> endpoints when they are enabled. See PR <a href="https://github.com/strongloop/loopback-next/pull/6644" target="_blank" rel="noopener noreferrer">#6644</a>.</p></li><li><p>The health check for applications running in container now returns a more accurate HTTP status code based on the state. For example, checking <code>/health</code> for application in states 'STARTING', 'STOPPING' or 'STOPPED' returns 503. You can find more details in PR <a href="https://github.com/strongloop/loopback-next/pull/6648" target="_blank" rel="noopener noreferrer">#6648</a>.</p></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="documentation-restructure">Documentation Restructure<a class="hash-link" href="#documentation-restructure" title="Direct link to heading">​</a></h2><ul><li><p>LoopBack 4 targets both API developers and extension developers, while the current website doesn't distinguish them clearly. This month we restructured the sidebar to classify the documentation into two parts: "Building LoopBack Applications" and "Extending LoopBack Framework". You can check <a href="https://loopback.io/doc/en/lb4/Customizing-server-configuration.html" target="_blank" rel="noopener noreferrer">https://loopback.io/doc/en/lb4/Customizing-server-configuration.html</a> to view the new layout.</p></li><li><p>The instructions for implementing HTTP redirects and mounting an Express router are extracted into a standalone page under "How-to guides". You can check <a href="https://loopback.io/doc/en/lb4/Customizing-routes.html" target="_blank" rel="noopener noreferrer">https://loopback.io/doc/en/lb4/Customizing-routes.html</a> to view the content.</p></li><li><p>Moved server recipes to how-to guides <a href="https://loopback.io/doc/en/lb4/Customizing-server-configuration.html" target="_blank" rel="noopener noreferrer">Customizing-server-configuration</a>. See PR <a href="https://github.com/strongloop/loopback-next/pull/6663" target="_blank" rel="noopener noreferrer">#6663</a>.</p></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="examples">Examples<a class="hash-link" href="#examples" title="Direct link to heading">​</a></h2><p>Two examples were added last month:</p><ul><li><p>Example <a href="https://github.com/strongloop/loopback-next/tree/master/examples/webpack" target="_blank" rel="noopener noreferrer">webpack</a> was added to demo LoopBack running inside the browser as client-side JavaScript application.</p></li><li><p>Example <a href="https://github.com/strongloop/loopback-next/tree/master/examples/socketio" target="_blank" rel="noopener noreferrer">socketio</a> gives a basic implementation of socketio with LoopBack 4.</p></li></ul><p>You can also download the examples by using the <code>lb4 example</code> command.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="enriching-loopback-and-its-community---you-are-invited">Enriching LoopBack and its Community - You are Invited!<a class="hash-link" href="#enriching-loopback-and-its-community---you-are-invited" title="Direct link to heading">​</a></h2><p>As mentioned in our <a href="https://strongloop.com/strongblog/2020-community-contribution/" target="_blank" rel="noopener noreferrer">recent blog post</a>, your contribution is important to make LoopBack a sustainable open source project. </p><p>Here is what you can do:</p><ul><li><a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">Join LoopBack Slack community</a></li><li><a href="https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22" target="_blank" rel="noopener noreferrer">Look for first-contribution-friendly issues</a></li><li>Give us feedback and join our discussion in <a href="https://github.com/strongloop/loopback-next" target="_blank" rel="noopener noreferrer">our GitHub repo</a></li></ul><p>Let's make LoopBack a better framework together!</p>]]></content:encoded>
            <category>Milestone update</category>
        </item>
        <item>
            <title><![CDATA[Community Q&A Monthly Digest - Oct 2020]]></title>
            <link>https://loopbackio.github.io/2020-oct-slack-qa</link>
            <guid>2020-oct-slack-qa</guid>
            <pubDate>Wed, 28 Oct 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>It's been 6 months since we created the <a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">Slack channel</a> for LoopBack community. Thanks to your support, over 500 members had joined and new members are joining almost everyday! Let's take a look at the October edition of the “Community Q&amp;A Monthly Digest”, capturing some of the Q&amp;A in this forum. </p><hr><p><strong>Question:</strong> How to get the raw request in LoopBack 4 in a function without changing the parsing for the entire app?</p><p><strong>Answer:</strong>
It's possible to get the raw request body with <code>x-parser</code>: <a href="https://loopback.io/doc/en/lb4/Parsing-requests.html#extend-request-body-parsing" target="_blank" rel="noopener noreferrer">https://loopback.io/doc/en/lb4/Parsing-requests.html#extend-request-body-parsing</a>.
-- <em>Answered by @Rifa Achrinza</em></p><hr><p><strong>Question:</strong> Is there any solution for tracking database migration, for example, migrations has been already run and possible rollback of migration? </p><p><strong>Answer:</strong>
I created a module which tracks migrations and executes scripts based on the db version compared to the app version, see <a href="https://www.npmjs.com/package/loopback4-migration" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/package/loopback4-migration</a>.
--<em>Answered by @nflaig</em></p><p>Ideally, LoopBack generates the DDL for users to review, and then it’s up to the users to run it or not. It's a feature to be implemented, see <a href="https://github.com/strongloop/loopback-next/issues/4757" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback-next/issues/4757</a>.
--<em>Answered by @Diana Lau</em></p><hr><p><strong>Question:</strong> I want to check whether a specified <code>categoryId</code> exists in a Mongo datasource, how can I do that? For example,</p><div class="codeBlockContainer_I0IT language-json theme-code-block"><div class="codeBlockContent_wNvx json"><pre tabindex="0" class="prism-code language-json codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token property" style="color:#36acaa">"categories"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"categoryId"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"e759c15e-3552-4557-aa6b-c1396674c7e6"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"name"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"test"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"categoryId"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"e759c15e-3552-4557-aa6b-c1396674c7e5"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token property" style="color:#36acaa">"name"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"test1"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>I tried <code>await this.usersRepository.find({'categories.categoryId': 'e759c15e-3552-4557-aa6b-c1396674c7e5'});</code> but getting an error message below:</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">&gt; { 'categories.categoryId': string; }' is not assignable to parameter of type 'Filter&lt;Users&gt;'. Object literal may only specify known properties, and ''categories.categoryId'' does not exist in type 'Filter&lt;Users&gt;'</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><strong>Answer:</strong>
The object you pass into <code>.find()</code> needs to be a <code>Filter</code> object. Make sure you <code>import { Filter } from '@loopback/repository';</code>, then you can: </p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> existingCategoryFilter</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Filter</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">//...filter properties in here...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> existingCategories </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">categoryRepository</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">find</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">existingCategoryFilter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>-- Answered by @Jackson Hyde</p><p>To add on what @Jackson Hyde has mentioned, due to limitations on TypeScript types, nested objects are not included in the typings. Hence, you'll also need to override TypeScript's check by adding <code>// @ts-ignore</code> just before the repository function.
-- Answered by @Rifa Achrinza</p><hr><p><strong>Question:</strong> I want to implement JWT refresh token in LoopBack 4. Can you suggest any good tutorial?</p><p><strong>Answer:</strong> You can follow this <a href="https://loopback.io/doc/en/lb4/JWT-authentication-extension.html" target="_blank" rel="noopener noreferrer">https://loopback.io/doc/en/lb4/JWT-authentication-extension.html</a>.
--<em>Answered by @Pratik Jaiswal</em></p><hr><p><strong>Question:</strong> I used LoopBack CLI to create a "SHIPPING" model but it tries to do lowercase "Shipping" in the SQL with the quotes. An error occurred in the SQL statement because it is case sensitive with the quotes around it. How can I fix this? I'm on LoopBack 4 and using the <code>loopback-connector-ibmi</code>.</p><p><strong>Answer:</strong>
Did u try to give the name in your model?</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">model</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'member_membership'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">MemberMembership</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name maybe-class-name">Entity</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>So <code>member_membership</code> is the table in the database.
-- Answered by @Mohammed</p><p>The <code>name</code> property customizes the model name, which is default to the class name if not provided. The model name is then used as the default for table name unless you further customize it for specific databases.
-- Answered by @Raymond Feng</p><hr><p><strong>Question:</strong> I have a CORS issue with <code>passport-login</code> example when trying to establish connection with Google using Angular Frontend. I keep getting CORS error:</p><blockquote><p>Access to XMLHttpRequest at '<a href="https://accounts.google.com/o/oauth2/v2/auth?...'" target="_blank" rel="noopener noreferrer">https://accounts.google.com/o/oauth2/v2/auth?...'</a> (redirected from 'http://localhost:3000/api/auth/thirdparty/google') from origin 'http://localhost:4200' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource."</p></blockquote><p>But the application is working fine with jade.</p><p><strong>Answer:</strong>
In your login component you could do something like:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token constant" style="color:#36acaa">OAUTH2_LINK_GOOGLE</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">api_url</span><span class="token operator" style="color:#393A34">+</span><span class="token string" style="color:#e3116c">'/api/auth/thirdparty/google?redirect_uri='</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">redir_url</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">onGoogleSignIn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">location</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">href</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">OAUTH2_LINK_GOOGLE</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Bind the Google link to the above in the HTML code.</p><p>-- Answered by @marg330</p><hr><h2 class="anchor anchorWithStickyNavbar_mojV" id="enriching-loopback-and-its-community---you-are-invited">Enriching LoopBack and its Community - You are Invited!<a class="hash-link" href="#enriching-loopback-and-its-community---you-are-invited" title="Direct link to heading">​</a></h2><p>As mentioned in our <a href="https://strongloop.com/strongblog/2020-community-contribution/" target="_blank" rel="noopener noreferrer">recent blog post</a>, your contribution is important to make LoopBack a sustainable open source project. </p><p>Here is what you can do:</p><ul><li><a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">Join LoopBack Slack community</a></li><li><a href="https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22" target="_blank" rel="noopener noreferrer">Look for first-contribution-friendly issues</a></li><li>Give us feedback and join our discussion in <a href="https://github.com/strongloop/loopback-next" target="_blank" rel="noopener noreferrer">our GitHub repo</a></li></ul><p>Let's make LoopBack a better framework together!</p>]]></content:encoded>
            <category>Community</category>
            <category>Slack</category>
            <category>Q&amp;A</category>
        </item>
        <item>
            <title><![CDATA[LoopBack 4 2020 Q3 Overview]]></title>
            <link>https://loopbackio.github.io/loopback-4-2020-q3-overview</link>
            <guid>loopback-4-2020-q3-overview</guid>
            <pubDate>Wed, 21 Oct 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>Fall is the season of the harvest. We're glad to see the good progress that we've made in the past 3 months, together with the contributions from the community. In September, there is record high percentage (25.6%) of the merged PRs which are coming from the community. Thank you all!</p><p>If you haven't heard of <a href="https://hacktoberfest.digitalocean.com/" target="_blank" rel="noopener noreferrer">Hacktoberfest</a> happening this month, check out the details in our <a href="https://strongloop.com/strongblog/2020-hacktoberfest/" target="_blank" rel="noopener noreferrer">previous blog on Hacktoberfest</a>. There's still time to join. For those who participated, we appreciated your contributions. </p><p>Let's take a look some of the highlights in the last quarter by you and the LoopBack team.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="integrate-with-typeorm-typegraphql-and-messagepack">Integrate with TypeORM, TypeGraphQL and MessagePack<a class="hash-link" href="#integrate-with-typeorm-typegraphql-and-messagepack" title="Direct link to heading">​</a></h2><p>One of our strategies to add value to LoopBack is to leverage third-party libraries and integrate with them. We created the following extensions:</p><ul><li><a href="https://www.npmjs.com/package/@loopback/typeorm" target="_blank" rel="noopener noreferrer"><code>@loopback/typeorm</code></a>: enables <a href="https://typeorm.io/" target="_blank" rel="noopener noreferrer">TypeORM</a> support in LoopBack</li><li><a href="https://www.npmjs.com/package/@loopback/graphql" target="_blank" rel="noopener noreferrer"><code>@loopback/graphql</code></a>: integrates with <a href="https://typegraphql.com/" target="_blank" rel="noopener noreferrer">TypeGraphQL</a> for creating GraphQL API <a href="https://loopback.io/doc/en/lb4/GraphQL.html" target="_blank" rel="noopener noreferrer">https://loopback.io/doc/en/lb4/GraphQL.html</a></li><li><a href="https://www.npmjs.com/package/@loopback/rest-msgpack" target="_blank" rel="noopener noreferrer"><code>@loopback/rest-msgpack</code></a>: adds support to allow receive <a href="https://msgpack.org/index.html" target="_blank" rel="noopener noreferrer">MessagePack</a> requests and transparently convert it to a regular JavaScript object. It provides a BodyParser implementation and a component to register it. </li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="reorganize-and-enhance-documentation">Reorganize and Enhance Documentation<a class="hash-link" href="#reorganize-and-enhance-documentation" title="Direct link to heading">​</a></h2><p>To better organize our content and easier for navigation/discovery, we reorganized our content based on <a href="https://documentation.divio.com" target="_blank" rel="noopener noreferrer">four quadrants</a>: tutorials, how-to guides, concepts and reference guides. To find out more how our documentation is organized, see <a href="https://loopback.io/doc/en/lb4/#how-is-our-documentation-organized" target="_blank" rel="noopener noreferrer">this documentation page</a>.</p><p>Besides the ongoing <a href="https://github.com/strongloop/loopback-next/issues/5783" target="_blank" rel="noopener noreferrer">refactoring work</a>, we enriched the content and clarified on some of the topics that are frequently asked by you. For example, we:</p><ul><li><a href="https://loopback.io/doc/en/lb4/Extending-LoopBack-4.html" target="_blank" rel="noopener noreferrer">cleaned up the documentation about LoopBack extension</a> so that your extension creation experience would be easier and smoother. We'll continue to make some more improvement in this area as well. </li><li>enhanced the content for <a href="https://loopback.io/doc/en/lb4/Authentication-overview.html" target="_blank" rel="noopener noreferrer">authentication</a> and <a href="https://loopback.io/doc/en/lb4/Authorization-overview.html" target="_blank" rel="noopener noreferrer">authorization</a> to include basic concepts, usage and examples. </li><li>added a section on <a href="https://loopback.io/doc/en/lb4/Using-database-transactions.html#accessing-multiple-models-inside-one-transaction" target="_blank" rel="noopener noreferrer">accessing multiple models inside a transaction</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="other-key-feature-highlights">Other Key Feature Highlights<a class="hash-link" href="#other-key-feature-highlights" title="Direct link to heading">​</a></h2><p>There were many features, fixes and enhancements in the past few months, and here are some highlights:</p><ul><li>completed the <a href="https://loopback.io/doc/en/lb4/HasManyThrough-relation.html" target="_blank" rel="noopener noreferrer">HasManyThrough relation</a></li><li><a href="https://strongloop.com/strongblog/august-2020-milestone/#improving-rest-experience" target="_blank" rel="noopener noreferrer">improved REST experience</a> by adding a <a href="https://loopback.io/doc/en/lb4/REST-middleware-sequence.html" target="_blank" rel="noopener noreferrer">middleware based sequence</a></li><li>added <a href="https://loopback.io/doc/en/lb4/Authentication-component-decorator.html" target="_blank" rel="noopener noreferrer">support for applying multiple authentication strategies to one endpoint</a></li><li>implemented the <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt#endpoints-with-refresh-token" target="_blank" rel="noopener noreferrer">refresh token service</a> in the <code>@loopback/authentication-jwt</code> extension</li><li>added the <a href="https://github.com/strongloop/loopback-next/pull/6285" target="_blank" rel="noopener noreferrer">support of OpenAPI parameter AJV validation</a> on simple types and <a href="https://github.com/strongloop/loopback-next/pull/6262" target="_blank" rel="noopener noreferrer">AJV formats for OpenAPI spec data type formats</a>.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="encourage-community-contributions">Encourage Community Contributions<a class="hash-link" href="#encourage-community-contributions" title="Direct link to heading">​</a></h2><p>In a <a href="https://strongloop.com/strongblog/2020-community-contribution/" target="_blank" rel="noopener noreferrer">recent blog post</a>, we shared our views on encouraging more community contributions to match with our growing user community. The <a href="https://loopback.io/doc/en/contrib/code-contrib.html#developer-certificate-of-origin-dco" target="_blank" rel="noopener noreferrer">switch to Developer Certificate of Origin (DCO)</a> as the contribution method is a change we made to make your contribution process easier. We also created a <a href="https://loopback.io/doc/en/lb4/Community-extensions.html" target="_blank" rel="noopener noreferrer">community extension documentation page</a> to showcase LoopBack extensions built by the community. </p><p>In addition, we are pleased to have <a href="https://github.com/nabdelgadir" target="_blank" rel="noopener noreferrer">@nabdelgadir</a> and <a href="https://github.com/madaky" target="_blank" rel="noopener noreferrer">@madaky</a> to be one of our community maintainers. We appreciate the great work you’ve done and welcome to the team.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="previous-milestone-blogs">Previous Milestone Blogs<a class="hash-link" href="#previous-milestone-blogs" title="Direct link to heading">​</a></h2><p>There are many more accomplishments that cannot be captured in this blog, make sure you check out our previously published monthly milestone blog posts in Q3 for more details:</p><ul><li><a href="https://strongloop.com/strongblog/july-2020-milestone" target="_blank" rel="noopener noreferrer">July summary</a></li><li><a href="https://strongloop.com/strongblog/august-2020-milestone" target="_blank" rel="noopener noreferrer">August summary</a></li><li><a href="https://strongloop.com/strongblog/september-2020-milestone/" target="_blank" rel="noopener noreferrer">Sept summary</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="enriching-loopback-and-its-community---you-are-invited">Enriching LoopBack and its Community - You are Invited!<a class="hash-link" href="#enriching-loopback-and-its-community---you-are-invited" title="Direct link to heading">​</a></h2><p>Your contribution is important to make LoopBack a sustainable open source project. </p><p>Here is what you can do:</p><ul><li><a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">Join LoopBack Slack community</a></li><li><a href="https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22" target="_blank" rel="noopener noreferrer">Look for first-contribution-friendly issues</a></li><li>Give us feedback and join our discussion in <a href="https://github.com/strongloop/loopback-next" target="_blank" rel="noopener noreferrer">our GitHub repo</a></li><li>Limited time only: <a href="https://strongloop.com/strongblog/2020-hacktoberfest/" target="_blank" rel="noopener noreferrer">Join the Hacktoberfest</a> in the month of October</li></ul><p>Let's make LoopBack a better framework together!</p>]]></content:encoded>
            <category>Quarterly update</category>
        </item>
        <item>
            <title><![CDATA[LoopBack 3 End-of-Life]]></title>
            <link>https://loopbackio.github.io/2020-lb3-eol</link>
            <guid>2020-lb3-eol</guid>
            <pubDate>Wed, 14 Oct 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>LoopBack 3 is <a href="https://loopback.io/doc/en/contrib/Long-term-support.html" target="_blank" rel="noopener noreferrer">approaching its end-of-life</a> at the end of the year for community support. For LoopBack 3 users, we hope the <a href="https://loopback.io/doc/en/lb4/migration-overview.html" target="_blank" rel="noopener noreferrer">migration guide</a> helps you migrate your applications to version 4. </p><p>At the same time, we understand you might still be using LoopBack 3 and/or in the process of migrating to LoopBack 4. For the next few months after the EOL date, we'll try to support the community in the following ways:</p><ul><li><strong>Helping the community to migrate</strong>: we will continue to help with questions on <a href="https://github.com/strongloop/loopback" target="_blank" rel="noopener noreferrer">GitHub</a> and <a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">Slack</a>, but it will be on a best-effort basis.</li><li><strong>Security vulnerabilities</strong>: Critical security fixes will be applied as needed by <a href="https://www.ibm.com/cloud/api-connect" target="_blank" rel="noopener noreferrer">IBM API Connect</a>.</li><li><strong>New features</strong>: No features will be accepted.</li><li><strong>Bugs</strong>: We are not going to actively fix any bugs reported by the community users. For critical bugs, maintainers will review and assess the risks of community-submitted PRs. If you’re planning to submit a fix, it’s the best to open a GitHub issue to discuss with the maintainers before proceeding.</li></ul><p>Please note that the December 2020 end-of-life date is applicable to community support. If you are using LoopBack as part of the <a href="https://www.ibm.com/cloud/api-connect" target="_blank" rel="noopener noreferrer">IBM API Connect</a> v5 or v2018 product, check with the product announcement for its end-of-support schedule.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="what-should-i-do-if-im-still-using-loopback-3">What Should I Do If I'm Still Using LoopBack 3?<a class="hash-link" href="#what-should-i-do-if-im-still-using-loopback-3" title="Direct link to heading">​</a></h2><p>If you already have LoopBack 3 applications running in production, it is highly recommended for you to review the <a href="https://loopback.io/doc/en/lb4/Understanding-the-differences.html" target="_blank" rel="noopener noreferrer">Understanding the differences between LoopBack 3 and LoopBack 4 page</a> as mentioned in <a href="https://strongloop.com/strongblog/lb3-extended-lts/" target="_blank" rel="noopener noreferrer">one of our older blog posts</a>. There is also the <a href="https://loopback.io/doc/en/lb4/migration-overview.html" target="_blank" rel="noopener noreferrer">migration guide</a> helping you to migrate your LoopBack 3 applications incrementally.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="what-if-i-cannot-migrate-to-loopback-4-any-time-soon">What If I Cannot Migrate to LoopBack 4 Any Time Soon?<a class="hash-link" href="#what-if-i-cannot-migrate-to-loopback-4-any-time-soon" title="Direct link to heading">​</a></h2><p>Your LoopBack 3 applications will continue to work even after LoopBack 3 reaches end of life. There will be <em>very</em> minimal, if any, changes going into the codebase. In the case of addressing security vulnerabilities, you might need to fork the corresponding GitHub repos and apply security fixes. See <a href="https://strongloop.com/strongblog/lb3-entered-maintenance-mode/" target="_blank" rel="noopener noreferrer">this blog</a> for the list of Node.js packages reaching end-of-life along with <code>loopback</code> repo. </p><h2 class="anchor anchorWithStickyNavbar_mojV" id="enriching-loopback-and-its-community---you-are-invited">Enriching LoopBack and its Community - You are Invited!<a class="hash-link" href="#enriching-loopback-and-its-community---you-are-invited" title="Direct link to heading">​</a></h2><p>Your contribution is important to make LoopBack a sustainable open source project. Here is what you can do:</p><ul><li><a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">Join LoopBack Slack community</a></li><li><a href="https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22" target="_blank" rel="noopener noreferrer">Look for first-contribution-friendly issues</a></li><li>Give us feedback and join our discussion in <a href="https://github.com/strongloop/loopback-next" target="_blank" rel="noopener noreferrer">our GitHub repo</a></li></ul><p>Let's make LoopBack a better framework together!</p>]]></content:encoded>
            <category>LoopBack 3</category>
        </item>
        <item>
            <title><![CDATA[LoopBack 4 September 2020 Milestone Update]]></title>
            <link>https://loopbackio.github.io/september-2020-milestone</link>
            <guid>september-2020-milestone</guid>
            <pubDate>Wed, 07 Oct 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>We bring another month of new features, fixes, and improvements in documentation and developer experience in LoopBack. Make sure to update your compatible projects with <code>lb4 update</code> if you want to update the underlying libraries to their latest versions.</p><p>Also, as part of our long-term effort to encourage more community contributions, we are participating in this year’s <a href="https://hacktoberfest.digitalocean.com/" target="_blank" rel="noopener noreferrer">Hacktoberfest</a>. You can read more about the event and participation details at our <a href="https://strongloop.com/strongblog/2020-hacktoberfest/" target="_blank" rel="noopener noreferrer">Hacktoberfest blogpost</a>. </p><h2 class="anchor anchorWithStickyNavbar_mojV" id="documentation-enhancements">Documentation Enhancements<a class="hash-link" href="#documentation-enhancements" title="Direct link to heading">​</a></h2><p>There has been a continuous effort to improve our documentation. Below are some highlights for this month:</p><ul><li>A new documentation page, <a href="https://loopback.io/doc/en/lb4/Accessing-http-request-response.html" target="_blank" rel="noopener noreferrer">Accessing HTTP request and response objects</a>, was added explaining the various ways and places to access the request and response objects.</li><li>We are working on a series of troubleshooting guides for LoopBack. This month we completed the <a href="https://loopback.io/doc/en/lb4/Troubleshooting.html" target="_blank" rel="noopener noreferrer">basic guide</a> and <a href="https://loopback.io/doc/en/lb4/Debugging-tests-with-mocha.html" target="_blank" rel="noopener noreferrer">Debugging tests with Mocha</a>. <a href="https://github.com/strongloop/loopback-next/issues/5701#issuecomment-700955686" target="_blank" rel="noopener noreferrer">A few more areas</a> that can be added to the guide.</li><li>We added an <a href="https://github.com/strongloop/loopback-next/tree/master/examples/binding-resolution" target="_blank" rel="noopener noreferrer">example app</a> demonstrating LoopBack 4's context binding resolution and dependency injection within a context hierarchy.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="new-experimental-features">New Experimental Features<a class="hash-link" href="#new-experimental-features" title="Direct link to heading">​</a></h2><ul><li>We have created a <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/graphql" target="_blank" rel="noopener noreferrer">GraphQL extension</a> that provides integration with GraphQL using <a href="https://typegraphql.com/" target="_blank" rel="noopener noreferrer">type-graphql</a>. Check out the <a href="https://github.com/strongloop/loopback-next/tree/master/examples/graphql" target="_blank" rel="noopener noreferrer">GraphQL example app</a> for a sample app.</li><li>We added support for parsing <a href="https://msgpack.org/index.html" target="_blank" rel="noopener noreferrer">MessagePack</a> bodies. For usage, refer to the <a href="https://github.com/strongloop/loopback-next/tree/master/bodyparsers/rest-msgpack" target="_blank" rel="noopener noreferrer">documentation</a>.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="investigation-on-better-handling-of-objectid-in-mongodb">Investigation on Better Handling of ObjectID in MongoDB<a class="hash-link" href="#investigation-on-better-handling-of-objectid-in-mongodb" title="Direct link to heading">​</a></h2><p>We spent a good amount of time to improve the experience of using <code>ObjectID</code> with LoopBack. We have identified the direction we want to take and the tasks to work on. You can learn more about the spike in issue <a href="https://github.com/strongloop/loopback-next/issues/3456" target="_blank" rel="noopener noreferrer">3456</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="fixes-and-improvements">Fixes and Improvements<a class="hash-link" href="#fixes-and-improvements" title="Direct link to heading">​</a></h2><ul><li><a href="https://github.com/strongloop/loopback-next/pull/6230" target="_blank" rel="noopener noreferrer">added <code>.onStart()</code> and <code>.onStop()</code> methods of the <code>Application</code></a>, so that they can be used to register observers as plain functions for the start and stop life-cycle events.</li><li><a href="https://github.com/strongloop/loopback-next/pull/6398" target="_blank" rel="noopener noreferrer">enhanced the <code>lb4 update</code> command</a> to be runnable against any projects that use <code>@loopback/*</code> dependencies in <code>dependencies</code> or <code>devDependencies</code>, or <code>peerDependencies</code>; not just LoopBack 4 projects.</li><li><a href="https://github.com/strongloop/loopback-next/pull/6390" target="_blank" rel="noopener noreferrer">included the application build when running <code>migrate</code> and <code>openapi-spec</code> scripts</a>.</li><li>added <code>@injectable</code>, so that <code>@injectable</code> can be used instead of <code>@bind</code>, which is in tune with other frameworks using Dependency Injection. <code>@bind</code> is not removed from the framework, so apps using <code>@bind</code> will not be affected.</li><li>made the <code>keepAliveTimeout</code>, <code>headersTimeout</code>, <code>maxConnections</code>, <code>maxHeadersCount</code>, and <code>timeout</code> properties of the underlying <a href="https://nodejs.org/dist/latest-v14.x/docs/api/http.html#http_class_http_server" target="_blank" rel="noopener noreferrer">HTTP server</a> instance <a href="https://github.com/strongloop/loopback-next/pull/6267" target="_blank" rel="noopener noreferrer">configurable by specifying them in the application config object</a>.</li><li><a href="https://github.com/strongloop/loopback-next/pull/6429" target="_blank" rel="noopener noreferrer">updated the generated application directory name during application scaffolding</a> when application names involve numbers</li><li>added <a href="https://github.com/strongloop/loopback-next/pull/6315" target="_blank" rel="noopener noreferrer">the ability to boot dynamic value provider classes and classes with <code>@inject</code></a>.</li><li>removed the <code>extension-</code> prefix from the affected extensions for their names to be consistent with other extension modules.</li><li><a href="https://github.com/strongloop/loopback-next/pull/6313" target="_blank" rel="noopener noreferrer">improved the overall experience of graphql configuration and subscriptions</a> in LoopBack. </li><li>added the <a href="https://github.com/strongloop/loopback-next/pull/6285" target="_blank" rel="noopener noreferrer">support of OpenAPI parameter AJV validation</a> on simple types and <a href="https://github.com/strongloop/loopback-next/pull/6262" target="_blank" rel="noopener noreferrer">AJV formats for OpenAPI spec data type formats</a>.</li><li><a href="https://github.com/strongloop/loopback-next/pull/6284" target="_blank" rel="noopener noreferrer">updated the REST middleware</a> so that it can now cached by the use of singleton binding scope.</li><li>added Twitter example in the <a href="https://github.com/strongloop/loopback-next/tree/master/examples/passport-login" target="_blank" rel="noopener noreferrer">Passport login example app</a>.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="community-contributions">Community Contributions<a class="hash-link" href="#community-contributions" title="Direct link to heading">​</a></h2><p>Shout out to <a href="https://github.com/achrinza" target="_blank" rel="noopener noreferrer">Rifa Achrinza</a> for explaining the differences between weak and strong relations in PR <a href="https://github.com/strongloop/loopback-next/pull/6404" target="_blank" rel="noopener noreferrer">6404</a>, <a href="https://github.com/strongloop/loopback-next/pull/6155" target="_blank" rel="noopener noreferrer">MessagePack PR</a>, and his numerous other PRs.</p><p>Opening issues are community contributions too, so thanks to all those who help LoopBack become better by reporting bugs and usability issue. We try to address popular issues with higher priority, so continue to let us know the problems you face on <a href="https://github.com/strongloop/loopback-next/issues" target="_blank" rel="noopener noreferrer">GitHub</a> or <a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">Slack</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="enriching-loopback-and-its-community---you-are-invited">Enriching LoopBack and its Community - You are Invited!<a class="hash-link" href="#enriching-loopback-and-its-community---you-are-invited" title="Direct link to heading">​</a></h2><p>As mentioned in our <a href="https://strongloop.com/strongblog/2020-community-contribution/" target="_blank" rel="noopener noreferrer">recent blog post</a>, your contribution is important to make LoopBack a sustainable open source project. </p><p>Here is what you can do:</p><ul><li><a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">Join LoopBack Slack community</a></li><li><a href="https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22" target="_blank" rel="noopener noreferrer">Look for first-contribution-friendly issues</a></li><li>Give us feedback and join our discussion in <a href="https://github.com/strongloop/loopback-next" target="_blank" rel="noopener noreferrer">our GitHub repo</a></li></ul><p>Let's make LoopBack a better framework together!</p>]]></content:encoded>
            <category>Milestone update</category>
        </item>
        <item>
            <title><![CDATA[LoopBack is participating in Hacktoberfest 2020]]></title>
            <link>https://loopbackio.github.io/2020-hacktoberfest</link>
            <guid>2020-hacktoberfest</guid>
            <pubDate>Tue, 29 Sep 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>As part of our long-term effort to <a href="/2020-community-contribution">encourange more community
contributions</a>,
LoopBack is going to participate in this year's
<a href="https://hacktoberfest.digitalocean.com" target="_blank" rel="noopener noreferrer">Hacktoberfest</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="what-is-hacktoberfest">What is Hacktoberfest?<a class="hash-link" href="#what-is-hacktoberfest" title="Direct link to heading">​</a></h2><p>Hacktoberfest is an annual event encouraging participation in the open source community, open to everyone. Whether you’re new to development, a student, or a long-time contributor, you can help drive the growth of open source and make positive impact on an ever-growing community. All backgrounds and skills levels are encouraged to complete the challenge.</p><p>You can learn more about Hacktoberfest values at <a href="https://hacktoberfest.digitalocean.com/details#values" target="_blank" rel="noopener noreferrer">https://hacktoberfest.digitalocean.com/details#values</a>.</p><p>Participants completing the challenge (contributing at least 4 valid pull requests) will earn a limited edition T-shirt.</p><p><em>Please note that any prizes are subject to conditions set by Hacktoberfest. IBM and the LoopBack team are not involved and not responsible in any way.</em></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="how-to-participate">How to participate<a class="hash-link" href="#how-to-participate" title="Direct link to heading">​</a></h2><p>Joining the effort is simple. Just pick any problem that is itching you and send a pull request to fix it. You can also choose one of LoopBack's issues labelled as <a href="https://github.com/issues?q=is%3Aopen+is%3Aissue+user%3Astrongloop+label%3AHacktoberfest" target="_blank" rel="noopener noreferrer">Hacktoberfest</a> or <a href="https://github.com/issues?q=is%3Aopen+is%3Aissue+user%3Astrongloop+label%3A%22good+first+issue%22" target="_blank" rel="noopener noreferrer">good first issue</a> if you need inspiration.</p><p>Make sure to familiarize yourself with Hacktoberfest's <a href="https://hacktoberfest.digitalocean.com/details#rules" target="_blank" rel="noopener noreferrer">Participation rules</a> and <a href="https://hacktoberfest.digitalocean.com/details#quality" target="_blank" rel="noopener noreferrer">Quality standards</a>; and also LoopBack's <a href="https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contributing guide</a>.</p><p>Are you new to open source? No problem, we have you covered! Check out Hacktoberfest's <a href="https://hacktoberfest.digitalocean.com/details#beginners" target="_blank" rel="noopener noreferrer">Beginners</a> guides and LoopBack's guide on <a href="https://loopback.io/doc/en/lb4/submitting_a_pr.html" target="_blank" rel="noopener noreferrer">submitting a pull request to LoopBack 4</a>.</p><p>For the entire month of October, LoopBack's maintainers team will be giving extra priority to pull request reviews and helping new contributors along their journey to the first accepted contribution.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="focus-areas">Focus areas<a class="hash-link" href="#focus-areas" title="Direct link to heading">​</a></h2><p>We are primarily looking for quick wins with long term impact: small enhancements improving your day-to-day experience while using LoopBack.</p><p>As you may know, we have introduced a new documentation system in June to better organize the content and make it easier to find the information you need (see <a href="/june-2020-milestone#new-documentation-structure">New Documentation Structure</a> and <a href="/june-2020-milestone#alignment-along-abstraction-levels">Alignment Along Abstraction Levels</a>). The reorganization is still in progress and we would love to get some help. In particular, extracting recipes from "Concepts" explanations into proper "How-to guides" is an easy way how to quickly score valuable pull requests. See the GitHub issue <a href="https://github.com/strongloop/loopback-next/issues/5783" target="_blank" rel="noopener noreferrer">loopback-next#5783</a> for the list of docs pages to rework.</p><p>Having said that, all improvements are welcome!</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="closing-thoughts">Closing thoughts<a class="hash-link" href="#closing-thoughts" title="Direct link to heading">​</a></h2><p>We are looking forward to receive and eventually land your pull requests. Let's make LoopBack a better framework together!</p>]]></content:encoded>
            <category>hacktoberfest</category>
        </item>
        <item>
            <title><![CDATA[Community Q&A Monthly Digest - Sept 2020]]></title>
            <link>https://loopbackio.github.io/2020-sept-slack-qa</link>
            <guid>2020-sept-slack-qa</guid>
            <pubDate>Wed, 16 Sep 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>Welcome back to the September edition of the "Community Q&amp;A Monthly Digest", in which we are curating some of the Q&amp;A that we think it might be helpful to you. Thank you for posting your questions and helping your fellow LoopBack users. </p><p>The <a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">LoopBack Slack community</a> is a platform where LoopBack users are helping each other out. If you haven't joined already, sign up today!</p><p>Let's take a look at some of the questions and answers from the community.</p><p><strong>Question:</strong> Is it possible to use auto-generate timestamp property in a model?</p><p><strong>Answer:</strong> To set the property to the current datetime upon Model Create, you can:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">property</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'date'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">defaultFn</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'now'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">timestamp</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><hr><p><strong>Question:</strong> Does LoopBack has any built-in cache? Or should we implement that to make response even faster?</p><p><strong>Answer:</strong>
We currently don’t but there are some example implementations for your reference:</p><ul><li><a href="https://github.com/strongloop/loopback-next/tree/master/packages/rest/src/__tests__/acceptance/caching-interceptor" target="_blank" rel="noopener noreferrer">caching interceptor</a></li><li><a href="https://github.com/strongloop/loopback-next/blob/master/examples/greeting-app/src/caching-service.ts" target="_blank" rel="noopener noreferrer">caching service</a></li></ul><hr><p><strong>Question:</strong> I want to perform schema migration but the order of tables is important beacause there are some relation and foreign key between them. How can I set the order of tables to be migrated?</p><p><strong>Answer:</strong> Within <code>migrate.ts</code>, <code>app.migrateSchema</code> accepts a <code>model</code> array. So it can be updated as such:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> app</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">migrateSchema</span><span class="token punctuation" style="color:#393A34">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">assign</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">SchemaMigrationOptions</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">models</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token comment" style="color:#999988;font-style:italic">/* Add model names here */</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> existingSchema</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Like with any auto-migration, please do take a backup of the database before running the migration.</p><hr><p><strong>Question:</strong> I wanted to implement an API like the <code>file-transfer</code> example on the docs but with more endpoints with different storage directories. How is that possible?</p><p><strong>Answer:</strong> You can have different endpoints backed by different methods using <code>post /&lt;url&gt;</code> decoration as you see at <a href="https://github.com/strongloop/loopback-next/blob/master/examples/file-transfer/src/controllers/file-upload.controller.ts#L28" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback-next/blob/master/examples/file-transfer/src/controllers/file-upload.controller.ts#L28</a>. If you want to calculate the file path per request, you can instantiate a new upload service instance instead of using the injected one.</p><hr><p><strong>Questions:</strong> I work with LoopBack in a k8 cluster, when i try to implement JWT authentication, all users get the same token, and the data in that token is not equal to that user. Is there any way to fix it besides saving the token in a database? </p><p><strong>Answer:</strong> Typically JWT tokens are generated using a combination of a secret and some sort of UUID of the user. When they successfully authenticate, a token is generated and returned. When you need to verify the token, you decode it using the secret, giving you the UUID of the user. This means that you don’t actually have to save a token at all. Here’s how we are generating tokens for our users.</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> userInfoForToken </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> userProfile</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> userProfile</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">roles</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> userProfile</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">roles</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Generate a JSON Web Token</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> token</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword control-flow" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">token </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">signAsync</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">userInfoForToken</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">jwtSecret</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">expiresIn</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">Number</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">jwtExpiresIn</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword control-flow" style="color:#00009f">throw</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name maybe-class-name">HttpErrors</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access maybe-class-name" style="color:#d73a49">Unauthorized</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">Error encoding token : </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">error</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>In this context, <code>signAsync</code> is a <code>promisify</code>’d version of <code>jsonwebtoken.sign()</code>.</p><hr><p><strong>Question:</strong> I want to use the LoopBack app cli-command programmatically. Is this possible?</p><p><strong>Answer:</strong>
You can try to <code>require('@loopback/cli/lib/cli')</code>. See <a href="https://github.com/strongloop/loopback-next/blob/master/packages/cli/lib/cli.js" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback-next/blob/master/packages/cli/lib/cli.js</a>. <code>cli.js</code> has logic to create yeoman env and register generators.</p><hr><h2 class="anchor anchorWithStickyNavbar_mojV" id="enriching-loopback-and-its-community---you-are-invited">Enriching LoopBack and its Community - You are Invited!<a class="hash-link" href="#enriching-loopback-and-its-community---you-are-invited" title="Direct link to heading">​</a></h2><p>As mentioned in our <a href="https://strongloop.com/strongblog/2020-community-contribution/" target="_blank" rel="noopener noreferrer">recent blog post</a>, your contribution is important to make LoopBack a sustainable open source project. </p><p>Here is what you can do:</p><ul><li><a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">Join LoopBack Slack community</a></li><li><a href="https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22" target="_blank" rel="noopener noreferrer">Look for first-contribution-friendly issues</a></li><li>Give us feedback and join our discussion in <a href="https://github.com/strongloop/loopback-next" target="_blank" rel="noopener noreferrer">our GitHub repo</a></li></ul><p>Let's make LoopBack a better framework together!</p>]]></content:encoded>
            <category>Community</category>
            <category>Slack</category>
            <category>Q&amp;A</category>
        </item>
        <item>
            <title><![CDATA[LoopBack 4 August 2020 Milestone Update]]></title>
            <link>https://loopbackio.github.io/august-2020-milestone</link>
            <guid>august-2020-milestone</guid>
            <pubDate>Wed, 02 Sep 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>Our focus in August is the documentation restructure. The layout of several main sections are reorganized for easier navigation. Another significant improvement is about the request handling. More flexible approaches of adding LoopBack style middleware and express middleware are introduced in <code>@loopback/rest</code>.</p><p>We would like to appreciate <a href="https://github.com/agnes512" target="_blank" rel="noopener noreferrer">Agnes Lin</a>'s great contributions during her internship. There has been so much fun and pleasure working with her! She will be continue helping us part time. Good luck with your school.</p><p>Keep reading to learn about the improved documentation and recently added features!</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="documentation-enhancements">Documentation Enhancements<a class="hash-link" href="#documentation-enhancements" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="reorganizing-the-concepts-list">Reorganizing the Concepts List<a class="hash-link" href="#reorganizing-the-concepts-list" title="Direct link to heading">​</a></h3><p>The fundamental concepts were listed in section "Behind the Scene" sorted by the publish date. To have a concise name and a more organized layout for users to search, we renamed the section to be "Concepts" and restructured the documentations into the following sub-sections:</p><ul><li>Crafting LoopBack 4</li><li>Core</li><li>REST APIs</li><li>Data Access</li></ul><p>You can visit the more organized contents in <a href="https://loopback.io/doc/en/lb4/Concepts.html" target="_blank" rel="noopener noreferrer">https://loopback.io/doc/en/lb4/Concepts.html</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="reorganizing-how-to-guide-list">Reorganizing How-to Guide List<a class="hash-link" href="#reorganizing-how-to-guide-list" title="Direct link to heading">​</a></h3><p>The "How-to Guide" is also reorganized by topics. The existing tutorials are classified into the following sections for users to search quickly:</p><ul><li>Building REST APIs</li><li>Creating Other Forms of APIS</li><li>Accessing Databases</li><li>Accessing Services</li><li>Validating Data</li><li>Securing Applications</li><li>Deploying Applications</li><li>Troubleshooting</li></ul><p>You can visit the more organized contents in <a href="https://loopback.io/doc/en/lb4/" target="_blank" rel="noopener noreferrer">https://loopback.io/doc/en/lb4/</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="adding-property-types">Adding Property Types<a class="hash-link" href="#adding-property-types" title="Direct link to heading">​</a></h3><p>We added documentation for LoopBack 4 types including the syntax of model property definition in page <a href="https://loopback.io/doc/en/lb4/LoopBack-types.html" target="_blank" rel="noopener noreferrer">https://loopback.io/doc/en/lb4/LoopBack-types.html</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="adding-application-layout">Adding Application Layout<a class="hash-link" href="#adding-application-layout" title="Direct link to heading">​</a></h3><p>We added project layout for LoopBack 4 applications in page <a href="https://loopback.io/doc/en/lb4/Loopback-application-layout.html" target="_blank" rel="noopener noreferrer">https://loopback.io/doc/en/lb4/Loopback-application-layout.html</a>, users can find each file's meaning and responsibility in the application scaffolded by <code>lb4 app</code>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="cleaning-up-extensions">Cleaning up Extensions<a class="hash-link" href="#cleaning-up-extensions" title="Direct link to heading">​</a></h3><p>We are seeing more users creating extensions and it's a good time to make the extension creation experience easier and smoother. Therefore the extension generator and related documentations are updated to align with the latest code base. You can check the latest material in:</p><ul><li><a href="https://loopback.io/doc/en/lb4/Component.html" target="_blank" rel="noopener noreferrer">Concept Component</a></li><li><a href="https://loopback.io/doc/en/lb4/Creating-components.html" target="_blank" rel="noopener noreferrer">Creating Components</a></li></ul><p>And run <code>lb4 extension</code> to create extensions with the new component template.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="renaming-legacy-juggler">Renaming Legacy Juggler<a class="hash-link" href="#renaming-legacy-juggler" title="Direct link to heading">​</a></h3><p>The term "legacy juggler bridge" might give the wrong impression to users that the <code>loopback-datasource-juggler</code> won't be supported or not working well because of the "legacy" word. So we removed the misleading word "legacy" across the documentations and CLI prompts.</p><p><code>loopback-datasource-juggler</code> is still well maintained and we have a plan to modernize it. Feel free to join the discussion in <a href="https://github.com/strongloop/loopback-next/issues/5956" target="_blank" rel="noopener noreferrer">issue #5956</a> if you are interested.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="investigation">Investigation<a class="hash-link" href="#investigation" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="restructuring-connector-reference">Restructuring Connector Reference<a class="hash-link" href="#restructuring-connector-reference" title="Direct link to heading">​</a></h3><p>The current connector contents are mixed with how-to guides, references and tutorials. The spike story <a href="https://github.com/strongloop/loopback-next/issues/5961" target="_blank" rel="noopener noreferrer">5961</a> came up with a better plan to reorganize them into the four quadrants layout:</p><ul><li>Connector concepts, its role in the framework and its relations to other artifacts will go to section "Concepts/Datasources".</li><li>Datasource level configurations and features like migration/discovery will go to section "How-to Guides/Configuring DataSource".</li><li>All the other connector specific tutorials will go to section "Tutorials/Connect to back-end tutorial".</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="improving-rest-experience">Improving REST Experience<a class="hash-link" href="#improving-rest-experience" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="rest-middleware">REST Middleware<a class="hash-link" href="#rest-middleware" title="Direct link to heading">​</a></h3><p>A big feature took place in <code>@loopback/rest</code> to support more flexible ways to add express middleware for handling requests. PR <a href="https://github.com/strongloop/loopback-next/pull/5366" target="_blank" rel="noopener noreferrer">#5366</a> added a middleware based sequence and wrapped existing actions as middleware. The new usage is documented in the following pages:</p><ul><li>Concept <a href="https://loopback.io/doc/en/lb4/Middleware.html" target="_blank" rel="noopener noreferrer">Middleware</a> in LoopBack 4.</li><li><a href="https://loopback.io/doc/en/lb4/REST-middleware-sequence.html" target="_blank" rel="noopener noreferrer">Middleware-based Sequence for REST Server</a></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="optimizing-middleware-based-sequence">Optimizing Middleware Based Sequence<a class="hash-link" href="#optimizing-middleware-based-sequence" title="Direct link to heading">​</a></h3><p>PR <a href="https://github.com/strongloop/loopback-next/pull/6062" target="_blank" rel="noopener noreferrer">#6062</a> optimized middleware based sequence and its middleware providers to be singletons:</p><ul><li>MiddlewareSequence is now a singleton and it caches a list of middleware.</li><li>Built-in middleware providers are now singletons.</li><li>Validating sorted middleware groups is supported. Error will be reported if a middleware is unreachable.</li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="improving-serviceability-of-loopbackrest">Improving Serviceability of @loopback/rest<a class="hash-link" href="#improving-serviceability-of-loopbackrest" title="Direct link to heading">​</a></h3><p>There are several improvements made for easier debugging and error tracing in <code>@loopback/rest</code> module:</p><ul><li><p>PR <a href="https://github.com/strongloop/loopback-next/pull/6159" target="_blank" rel="noopener noreferrer">#6159</a> added more debug information for request parsing, routing, and method invocation. The debugging keywords are <code>loopback:rest:find-route</code>, <code>loopback:rest:invoke-method</code>, and <code>loopback:rest:parse-param</code>.</p></li><li><p>The route description is improved in PR <a href="https://github.com/strongloop/loopback-next/pull/6168" target="_blank" rel="noopener noreferrer">#6188</a> to include the verb and the path.</p></li><li><p>PR <a href="https://github.com/strongloop/loopback-next/pull/6171" target="_blank" rel="noopener noreferrer">#6171</a> added HTTP server options and status information in the debug string. The debugging keyword is <code>loopback:http-server</code>.</p></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="switching-to-dco">Switching to DCO<a class="hash-link" href="#switching-to-dco" title="Direct link to heading">​</a></h2><p>To <a href="https://strongloop.com/strongblog/switching-to-dco/" target="_blank" rel="noopener noreferrer">make your contribution process simpler</a>, we have changed the contribution method from CLA to DCO for <code>loopback-next</code> and most of the connector repositories. Be sure to sign off your commits using the <code>-s</code> flag or adding <code>Signed-off-By: Name&lt;Email&gt;</code> in the commit message. For more details, see <a href="https://loopback.io/doc/en/contrib/code-contrib.html#developer-certificate-of-origin-dco" target="_blank" rel="noopener noreferrer">https://loopback.io/doc/en/contrib/code-contrib.html</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="miscellaneous">Miscellaneous<a class="hash-link" href="#miscellaneous" title="Direct link to heading">​</a></h2><ul><li><p>PR <a href="https://github.com/strongloop/loopback-next/pull/6172" target="_blank" rel="noopener noreferrer">#6172</a> makes sure the REST options are passed to http-server.</p></li><li><p>PR <a href="https://github.com/strongloop/loopback-next/pull/6105" target="_blank" rel="noopener noreferrer">#6105</a> Reworked the validation code to use exiting <code>RestHttpErrors.invalidData</code> error. This way the error object includes the parameter name in the error message &amp; properties and has a machine-readable code property.</p></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="community-contributions">Community Contributions<a class="hash-link" href="#community-contributions" title="Direct link to heading">​</a></h2><p>Thank you for the contribution coming from the community. Here are some of the contributions that we'd like highlight:</p><ul><li><p>Thanks to <a href="https://github.com/nflaig" target="_blank" rel="noopener noreferrer">Nico Flaig</a>'s <a href="https://github.com/strongloop/loopback-next/pull/5735" target="_blank" rel="noopener noreferrer">contribution</a>! Now <code>@loopback/authenticate</code> supports applying multiple authentication strategies to one endpoint. The new syntax of decorator is:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">authenticate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  strategyOne </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> strategyOneWithOptions</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  strategyTwo </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> strategyTwoWithOptions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">myFunction</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>The new syntax is well documented in page <a href="https://loopback.io/doc/en/lb4/Authentication-component-decorator.html" target="_blank" rel="noopener noreferrer">Authentication Decorator</a>.</p></li><li><p>We appreciate <a href="https://github.com/madaky" target="_blank" rel="noopener noreferrer">Madaky</a>'s feature PR <a href="https://github.com/strongloop/loopback-next/pull/5589" target="_blank" rel="noopener noreferrer">#5589</a> which adds the token refresh service in extension <code>@loopback/authentication-jwt</code>. You can check the <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt#endpoints-with-refresh-token" target="_blank" rel="noopener noreferrer">new guide</a> to try it.</p></li><li><p>Many thanks to <a href="https://github.com/achrinza" target="_blank" rel="noopener noreferrer">Rifa Achrinza</a>'s contribution in PR <a href="https://github.com/strongloop/loopback-next/pull/6153" target="_blank" rel="noopener noreferrer">6153</a>. The order filter now supports string value as the shortcut in addition to the existing array value. You can specify an order filter as <code>{order: 'name DESC'}</code>.</p></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="enriching-loopback-and-its-community---you-are-invited">Enriching LoopBack and its Community - You are Invited!<a class="hash-link" href="#enriching-loopback-and-its-community---you-are-invited" title="Direct link to heading">​</a></h2><p>As mentioned in our <a href="https://strongloop.com/strongblog/2020-community-contribution/" target="_blank" rel="noopener noreferrer">recent blog post</a>, your contribution is important to make LoopBack a sustainable open source project. </p><p>Here is what you can do:</p><ul><li><a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">Join LoopBack Slack community</a></li><li><a href="https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22" target="_blank" rel="noopener noreferrer">Look for first-contribution-friendly issues</a></li><li>Give us feedback and join our discussion in <a href="https://github.com/strongloop/loopback-next" target="_blank" rel="noopener noreferrer">our GitHub repo</a></li></ul><p>Let's make LoopBack a better framework together!</p>]]></content:encoded>
            <category>Milestone update</category>
        </item>
        <item>
            <title><![CDATA[Enriching LoopBack and its Community - You are Invited!]]></title>
            <link>https://loopbackio.github.io/2020-community-contribution</link>
            <guid>2020-community-contribution</guid>
            <pubDate>Thu, 27 Aug 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>Almost two years ago, <a href="https://strongloop.com/strongblog/loopback-4-ga" target="_blank" rel="noopener noreferrer">LoopBack 4 was released and announced</a> at Node+JS Interactive event. Thanks to your support, we now have over 110k downloads per month on npmjs.com and over 3000 GitHub stars on the <a href="https://github.com/strongloop/loopback-next" target="_blank" rel="noopener noreferrer">loopback-next repo</a>. Recently, we created the <a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">LoopBack Slack community</a> to provide a platform for the community and us helping each other. We are glad to see an increasing engagement in that front as well!</p><p>With the core of the framework maturing and contributions shifting to the LoopBack extensions, we think LoopBack has entered a new stage and it's time to revisit our approach to planning work, delivering features, fixing bugs, and improving documentation.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="a-short-history-of-loopback-4">A Short History of LoopBack 4<a class="hash-link" href="#a-short-history-of-loopback-4" title="Direct link to heading">​</a></h2><p>As we started the rewrite of LoopBack from ground up back in early 2017 (see the <a href="https://strongloop.com/strongblog/announcing-loopback-next/" target="_blank" rel="noopener noreferrer">kick-off post</a>), it quickly became clear the scope is huge and we must be very disciplined in planning and scoping features if we want to reach a meaningful release in a reasonable time. We were working in short iterations, burning through a backlog of tasks we identified as required for the initial release. Eventually we published the first <a href="https://strongloop.com/strongblog/loopback-4-developer-preview-release" target="_blank" rel="noopener noreferrer">Developer Preview</a> in November 2017, followed by more preview releases, until we finally released <a href="https://strongloop.com/strongblog/loopback-4-ga" target="_blank" rel="noopener noreferrer">LoopBack 4 GA</a> in October 2018. Keeping a tight control over backlog prioritization and milestone planning allowed us to achieve this great milestone.</p><p>Such a tight planning worked great while it was mostly the IBM core team working on the project. On the flip side, this process made it sometimes difficult to juggle our time between working on our roadmap vs helping community contributors; and often created the impression that the core team will eventually implement all missing features, given enough time, and community contributions are not really necessary. This was acceptable while the framework offered only a limited subset of features needed to build real applications, because there were only few early adopters to support and it was indeed the core team that was contributing most of the improvements.</p><p>As more and more users discover and try LoopBack, they may find feature gaps, identify bugs, or even come up great ideas. If the perception is that somebody else (the core team) will eventually implement those features, then there are little incentives for users to step up and join the project as contributors. As a result, the number of maintainers is not keeping up with the growing number of users, leading to ever-increasing load on existing maintainers and eventually maintainers burning out or leaving the project. (You can read more on this topic in <a href="https://medium.com/the-node-js-collection/healthy-open-source-967fa8be7951" target="_blank" rel="noopener noreferrer">Healthy Open Source</a> and <a href="https://medium.com/loopback/sustaining-loopback-project-b67fd59673e4" target="_blank" rel="noopener noreferrer">Sustaining and growing LoopBack as a successful open source project</a>).</p><p>Many of us has experienced this ourselves in the past, when LoopBack 3 got to the stage where the maintainers were overwhelmed with the amount of incoming issues and pull requests. We feel it's time to turn the ship around and make sure we don't repeat the same mistakes in LoopBack 4. As LoopBack 4 user base grows, it is essential to grow our contributor community joining forces to enhance the framework together.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="encourage-more-community-contributions">Encourage More Community Contributions<a class="hash-link" href="#encourage-more-community-contributions" title="Direct link to heading">​</a></h2><p>We have been always actively looking for new ways to attract more contributions from our community and grow contributors into maintainers.</p><p>To make it easy for our users to find easy-to-implement improvements to contribute, we are adding <code>good first issue</code> and <code>help wanted</code> labels on GitHub issues, and listing items we'd like to see progress in our roadmaps and milestones.</p><p>In addition, we recently made <a href="https://strongloop.com/strongblog/switching-to-dco/" target="_blank" rel="noopener noreferrer">an announcement</a> about switching the contribution method to Developer Certificate of Origin (DCO) from Contributor License Agreement (CLA). We hope this will make the contribution process easier for you.</p><p>Going forward, we would like to focus more on enabling more of you to contribute by mentoring and coaching them to complete their PRs and providing technical guidance on their work if needed. We would also like to create more examples and starter code for experimental features, and invite the community to enhance those features collectively.</p><p>To further encourage community contributions, we are going to open our planning process too and start building the roadmap together with our community, based on what tasks individual contributors would like to work on.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="inspire-more-community-extensions">Inspire More Community Extensions<a class="hash-link" href="#inspire-more-community-extensions" title="Direct link to heading">​</a></h2><p>One of the strengths of LoopBack 4 is its extensibility. You can create extensions to extend the programming model and integration capability of the LoopBack 4 framework.</p><p>We created a number of extensions, for example, the recently published <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/typeorm" target="_blank" rel="noopener noreferrer">TypeORM</a> and <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/pooling" target="_blank" rel="noopener noreferrer">pooling service</a> extensions. These can be served as references to inspire you to build extensions to fit your needs. </p><p>Moreover, we'll be working on <a href="https://github.com/strongloop/loopback-next/issues/5336" target="_blank" rel="noopener noreferrer">cleaning up the extension template and documentation</a>, so that the developer experience of building an extension is smoother.</p><p>At the same time, we're happy to see more extensions built by the community, see the <a href="https://loopback.io/doc/en/lb4/Community-extensions.html" target="_blank" rel="noopener noreferrer">community extensions page</a>. Let's build this list together by submitting a PR to include your extensions!</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="potential-work-under-our-radar">Potential Work under Our Radar<a class="hash-link" href="#potential-work-under-our-radar" title="Direct link to heading">​</a></h2><p>We have been investigating a few areas that can further improve LoopBack 4 based on our visions, even more importantly community feedbacks. There are some ideas for inspiration.</p><p>Modernizing the juggler has been under our radar. We would like to position LoopBack as the composition layer that brings API/microservice stories together. It will include built-in capabilities such as REST API and Data/Service access as well as integration with other frameworks. We're planning to publish a blog to cover that. Stay tuned.</p><p>Below are areas that we've done some initial investigation/implementation and would like to invite you to join us to build a more complete story. It includes continuing to improve our documentation and building more education materials. Likewise, we'll be publishing blog posts to share our plans and visions in the following areas:</p><ul><li><a href="https://github.com/strongloop/loopback-next/tree/master/examples/multi-tenancy" target="_blank" rel="noopener noreferrer">Multi-tenancy</a></li><li><a href="https://github.com/raymondfeng/loopback4-example-websocket" target="_blank" rel="noopener noreferrer">Web socket</a></li><li><a href="https://github.com/strongloop/loopback4-example-kafka" target="_blank" rel="noopener noreferrer">Kafka integration</a></li><li><a href="https://github.com/strongloop/loopback-next/pull/5545" target="_blank" rel="noopener noreferrer">GraphQL</a></li><li><a href="https://github.com/strongloop/loopback-next/pull/6134" target="_blank" rel="noopener noreferrer">gRPC</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>Your contribution is important to make LoopBack a sustainable open source project. We hope our plans to adopt DCO, improve the extension development experience and focus on enabling contributors would make your contribution experience smoother and better. We are also planning on sharing our views on a few technologies. </p><p>Here is what you can do:</p><ul><li><a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">Join LoopBack Slack community</a></li><li><a href="https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22" target="_blank" rel="noopener noreferrer">Look for first-contribution-friendly issues</a></li><li>Give us feedback and join our discussion in <a href="https://github.com/strongloop/loopback-next" target="_blank" rel="noopener noreferrer">our GitHub repo</a></li></ul><p>Let's make LoopBack a better framework together!</p>]]></content:encoded>
            <category>Community</category>
        </item>
        <item>
            <title><![CDATA[Community Q&A Monthly Digest - July 2020]]></title>
            <link>https://loopbackio.github.io/2020-jul-slack-qa</link>
            <guid>2020-jul-slack-qa</guid>
            <pubDate>Wed, 19 Aug 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>Welcome to the July edition of the "Community Q&amp;A Monthly Digest", curating some of the Q&amp;A that we think it might be helpful to you. Let's take a look.</p><hr><p><strong>Question</strong>: Is there a built-in support in LB4 for database retries if the db responds with 429 for example? Or is it possible to overwrite a single method to implement this for all db operations similiar to how entityToData can be overwriten if data should be added to all create/update operations.</p><p><strong>Answer</strong>: It's better to intercept execution errors inside the datasource, not at repository level. I created a small example to demonstrate the approach. In a real app, I would extract the code into a mixin that can be applied on any DataSource class.
<a href="https://gist.github.com/bajtos/2379d7c6df31e477aaa3a3f6ea87886c" target="_blank" rel="noopener noreferrer">https://gist.github.com/bajtos/2379d7c6df31e477aaa3a3f6ea87886c</a></p><hr><p><strong>Question</strong>: Is it possible to connect my API to a webhook, so that when an event is triggered, it notifies my API? What documentation could I read about doing this?</p><p><strong>Answer</strong>: A webhook is just another HTTP request. Depending on the architecture of the lb4 app, this request can be done in a Service, an Interceptor, or a Controller, using either the built-in Node.js API or third-party HTTP request modules such as Axios.
Besides that, no special configuration is needed for web hooks.&nbsp;</p><hr><p><strong>Question</strong>: How to implement&nbsp;<code>findOrCreate</code>&nbsp;instead&nbsp;<code>await exists</code>&nbsp;+&nbsp;<code>await create</code>?</p><p><strong>Answer</strong>: You can extend&nbsp;<code>DefaultCrudRepository</code>&nbsp;with&nbsp;<code>findOrCreate</code>&nbsp;’s implementation.
Then your repositories extend the custom one. Similar to&nbsp;how <code>AccountRepository</code> extends <code>MyDefaultCrudRepository</code> in the tutorial <a href="https://loopback.io/doc/en/lb4/Repositories.html#define-repositories" target="_blank" rel="noopener noreferrer">https://loopback.io/doc/en/lb4/Repositories.html#define-repositories</a>.</p><hr><p><strong>Question</strong>: I started using Loopback 4. How to redirect home screen of LB4 to angular 8 running on some other port?</p><p><strong>Answer</strong>: It should be possible to replace the <code>.static</code> function in the app class with <code>.redirect</code>: <a href="https://loopback.io/doc/en/lb4/apidocs.rest.restapplication.redirect.html" target="_blank" rel="noopener noreferrer">https://loopback.io/doc/en/lb4/apidocs.rest.restapplication.redirect.html</a>.</p><hr><p><strong>Question</strong>: The compiler throws the error <code>error TS2322: Type 'string' is not assignable to type PredicateComparison&lt;..&gt;</code> when I tried some repository CRUD methods. Is it a bug or anything wrong with my setup?</p><p><strong>Answer</strong>: It is a type issue. For <a href="https://loopback.io/doc/en/lb4/apidocs.repository.defaultcrudrepository.html#methods" target="_blank" rel="noopener noreferrer">repository CRUD methods</a>, they may take in <code>Filter</code> or <code>Where</code> type parameters. For those cases, you will need to specify the type of it, for example:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> userCount </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">userRepository</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">tags</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'admin'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">as</span><span class="token plain"> </span><span class="token maybe-class-name">Where</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">User</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> vipUser </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">userRepository</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">find</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">where</span><span class="token operator" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">tags</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'vip'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">as</span><span class="token plain"> </span><span class="token maybe-class-name">Filter</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">User</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><hr><p><strong>Question</strong>: We have a project which includes multi-tenancy based multi-database pattern (We have Common DB which stores Client Informations (Users, DB configs etc), and each clients has own database). How can I perform switching datasource dynamically with the multi-tenancy based project?</p><p><strong>Answer</strong>: You can check out <a href="https://github.com/strongloop/loopback-next/tree/master/examples/multi-tenancy" target="_blank" rel="noopener noreferrer">the multi-tenancy example</a> and <a href="https://github.com/strongloop/loopback-next/issues/5056" target="_blank" rel="noopener noreferrer">the GH issue</a> that discusses about multi-tenancy and dynamic schema selection. You can create datasources at runtime. Meanwhile, if the number of dbs is limited, you can define them upfront and reuse them, see <a href="https://loopback.io/doc/en/lb4/DataSources.html#creating-a-datasource-at-runtime" target="_blank" rel="noopener noreferrer">Creating a datasource at runtime</a>. Then the tenant strategy can inject a repository talking to your common DB to load configs per logged in user.</p><hr><h2 class="anchor anchorWithStickyNavbar_mojV" id="interested-to-join-our-slack-workspace">Interested to Join our Slack Workspace?<a class="hash-link" href="#interested-to-join-our-slack-workspace" title="Direct link to heading">​</a></h2><p>Simply click <a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">this invitation link</a> to join. You can also find more channel details here: <a href="https://github.com/strongloop/loopback-next/issues/5048" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback-next/issues/5048</a>.</p>]]></content:encoded>
            <category>Community</category>
            <category>Slack</category>
            <category>Q&amp;A</category>
        </item>
        <item>
            <title><![CDATA[LoopBack 4 July 2020 Milestone Update]]></title>
            <link>https://loopbackio.github.io/july-2020-milestone</link>
            <guid>july-2020-milestone</guid>
            <pubDate>Wed, 05 Aug 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>We can't believe that it is already August! Let's check out the work we did in July:</p><ul><li><a href="#hasmanythrough-relation">HasManyThrough Relation</a></li><li><a href="#documentation-enhancements">Documentation Enhancements</a></li><li><a href="#reorganize-code-and-docs-along-abstraction-levels">Reorganize Code and Docs Along Abstraction Levels</a></li><li><a href="#bug-fixes">Bug Fixes</a></li><li><a href="#community-contribution">Community Contribution</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="hasmanythrough-relation">HasManyThrough Relation<a class="hash-link" href="#hasmanythrough-relation" title="Direct link to heading">​</a></h2><p>A <code>HasManyThrough</code> relation sets up a many-to-many connection through another model. A real-world example is a doctor has many patients through appointments. The relation can be defined with <code>@hasMany</code> decorator as:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">//...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">hasMany</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token maybe-class-name">Patient</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">through</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token function-variable function" style="color:#d73a49">model</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token maybe-class-name">Appointment</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  patients</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Patient</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>We finished most of implementation in June, and we added <code>HasManyThrough</code> to the relation CLI and also related documentation so that users could learn it better. Please make sure you have <code>@loopback/repository</code> with version 2.10.0 or higher installed.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="documentation">Documentation<a class="hash-link" href="#documentation" title="Direct link to heading">​</a></h3><p>The <a href="https://loopback.io/doc/en/lb4/HasManyThrough-relation.html" target="_blank" rel="noopener noreferrer"><code>hasManyThrough</code> Relation</a> page is being added under <a href="https://loopback.io/doc/en/lb4/Relations.html" target="_blank" rel="noopener noreferrer">Relations</a> page. We introduced the use cases, definitions, and examples of how you can customize the relation to meet your requirements. Nevertheless, as mentioned in the docs, because it is an experimental feature, there are some missing functionalities such as <a href="https://github.com/strongloop/loopback-next/issues/5946" target="_blank" rel="noopener noreferrer"><code>inclusionResolver</code></a>. Feel free to join discussions on GitHub or even contribute :D</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="cli-command">CLI Command<a class="hash-link" href="#cli-command" title="Direct link to heading">​</a></h3><p>Command line interfaces (CLI) is a convenient tool to help you create artifacts quickly. We added <code>hasManyThrough</code> relation to <code>lb4 relation</code> command. With a few prompts, you can define a <code>hasManyThrough</code> relation easily:</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ lb4 relation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">? Please select the relation type hasManyThrough</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">? Please select source model Doctor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">? Please select target model Patient</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">? Please select through model Appointment</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">? Foreign key name that references the source model to define on the through model</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> doctorId</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">? Foreign key name that references the target model to define on the through model</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> patientId</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">? Source property name for the relation getter (will be the relation name)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> patients</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Don't forget to install the latest <code>@loopback/cli</code> to try it out!</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="documentation-enhancements">Documentation Enhancements<a class="hash-link" href="#documentation-enhancements" title="Direct link to heading">​</a></h2><p>One of our recent targets is to upgrade the documentation system. As you can see on the site, we reorganized most of the items in sidebar. In the overview page, the section <a href="https://loopback.io/doc/en/lb4/index.html#how-is-our-documentation-organized" target="_blank" rel="noopener noreferrer">How is our documentation organized</a> introduces how you can find documentation in the four quadrants.</p><p>Besides improving the structure, here are some documentation enhancements we'd like to share:</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="apply-jwt-authentication-component-to-shopping-example">Apply JWT Authentication Component to Shopping Example<a class="hash-link" href="#apply-jwt-authentication-component-to-shopping-example" title="Direct link to heading">​</a></h3><p>The <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt" target="_blank" rel="noopener noreferrer"><code>@loopback/authentication-jwt</code></a> component was created to make adding JWT authentication to your application earlier. We've applied it to the <a href="https://github.com/strongloop/loopback4-example-shopping" target="_blank" rel="noopener noreferrer">shopping example</a>. To find out more, see the <a href="https://loopback.io/doc/en/lb4/JWT-authentication-extension.html" target="_blank" rel="noopener noreferrer">JWT authentication extension documentation page</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="how-to-access-multiple-models-in-a-single-transaction">How to Access Multiple Models in a Single Transaction<a class="hash-link" href="#how-to-access-multiple-models-in-a-single-transaction" title="Direct link to heading">​</a></h3><p>A <em>transaction</em> is a sequence of data operations performed as a single logical
unit of work. LoopBack 4 has many relational database connectors support such logic requirements. We added a section <a href="https://loopback.io/doc/en/lb4/Using-database-transactions.html#accessing-multiple-models-inside-one-transaction" target="_blank" rel="noopener noreferrer">Accessing multiple models inside one transaction</a> to show how it can be achieved.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="custom-ajv-validation">Custom AJV Validation<a class="hash-link" href="#custom-ajv-validation" title="Direct link to heading">​</a></h3><p>We realized that the current AJV Validation documentation is missing a crucial information piece on how to enable custom validation and error messages. Please check out the section <a href="https://loopback.io/doc/en/lb4/Model.html#custom-validation-rules-and-error-messages" target="_blank" rel="noopener noreferrer">Custom validation rules and error messages</a> and <a href="https://github.com/strongloop/loopback-next/tree/master/examples/validation-app" target="_blank" rel="noopener noreferrer">Validation example</a> for details.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="reorganize-code-and-docs-along-abstraction-levels">Reorganize Code and Docs Along Abstraction Levels<a class="hash-link" href="#reorganize-code-and-docs-along-abstraction-levels" title="Direct link to heading">​</a></h2><p>As LoopBack 4 is growing larger, we decide to hide some low-level tools from users so that the framework looks neat and friendly. In July, we hid module <a href="https://github.com/strongloop/loopback-next/tree/master/packages/openapi-v3" target="_blank" rel="noopener noreferrer"><code>@loopback/openapi-v3</code></a> as it can be loaded from <a href="https://github.com/strongloop/loopback-next/tree/master/packages/rest" target="_blank" rel="noopener noreferrer"><code>@loopback/rest</code></a>.</p><p>We removed <code>@loopback/openapi-v3</code> from dependencies and also our CLI template dependencies. If you check the page <a href="https://loopback.io/doc/en/lb4/Extending-OpenAPI-specification.html" target="_blank" rel="noopener noreferrer">Extending OpenAPI Specification</a> or other related pages, you will notice it is now hidden and replaced by <code>@loopback/rest</code>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="execute-raw-nosql-queries">Execute Raw NoSQL Queries<a class="hash-link" href="#execute-raw-nosql-queries" title="Direct link to heading">​</a></h2><p>If you have a SQL database as back-end service, you can execute raw queries using the <code>execute</code> method that we have in <code>Repository</code>, and it works great. Unfortunately, <code>execute</code> does not work for NoSQL connectors such as MongoDB as they require more than just a <code>command</code> string and <code>args</code> array.</p><p>In July, we started working on how we can improve LB4 API and MongoDB connector API to make it easy to execute raw MongoDB commands. We added a <code>DataSource.execute</code> method to the Juggler, and leveraged it to support different <code>execute</code> styles. We also added support for non-SQL variants of <code>Repository.execute()</code> in the <code>loopback/repository</code> module. More works will be done in August. You can check the progress in story <a href="https://github.com/strongloop/loopback-next/issues/3342" target="_blank" rel="noopener noreferrer">Execute raw NoSQL queries</a> on GitHub if you're interested.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="bug-fixes">Bug Fixes<a class="hash-link" href="#bug-fixes" title="Direct link to heading">​</a></h2><p>There was a story that a boy woke up in one morning and found himself transformed into a gigantic bug. We don't want that to happen, so we fixed a few bugs in July:</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="unable-to-perform-nested-filters">Unable to Perform Nested Filters<a class="hash-link" href="#unable-to-perform-nested-filters" title="Direct link to heading">​</a></h3><p>As we added the support for coercing query object with schema last month, it exposed a bug that the nested scope filters don't have the correct constraints. It is being fixed and released in <code>@loopback/rest@5.2.1</code>. Now you can include nested navigational properties using filter like:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  include</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      relation</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"orders"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      scope</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// nested relation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        include</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            relation</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"someOtherRelation"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="query-with-dollar-signs-in-mongodb-connector">Query with Dollar Signs in MongoDB Connector<a class="hash-link" href="#query-with-dollar-signs-in-mongodb-connector" title="Direct link to heading">​</a></h3><p>If you're using MongoDB, you would be used to have dollar signs ($) in your queries. However, the dollar signs are not needed in LB4 general queries, and that's why <a href="https://github.com/strongloop/loopback-connector-mongodb" target="_blank" rel="noopener noreferrer">loopback-mongodb-connector</a> users get confused usually. To improve the user experience, we made some changes in the connector <a href="https://github.com/strongloop/loopback-connector-mongodb" target="_blank" rel="noopener noreferrer">loopback-mongodb-connector</a>, so that the connector users won't get errors even if the queries contain extra dollar signs. The change is released in <code>@loopback-connector-mongodb@5.3.0</code></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="community-contribution">Community Contribution<a class="hash-link" href="#community-contribution" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="new-community-maintainers">New Community Maintainers<a class="hash-link" href="#new-community-maintainers" title="Direct link to heading">​</a></h3><p>We are glad to have <a href="https://github.com/nabdelgadir" target="_blank" rel="noopener noreferrer">@nabdelgadir</a> and <a href="https://github.com/madaky" target="_blank" rel="noopener noreferrer">@madaky</a> to be one of our community maintainers. We appreciate your great work you've done and welcome to the team.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="highlights">Highlights<a class="hash-link" href="#highlights" title="Direct link to heading">​</a></h3><ul><li>As LoopBack 4 is designed to be more scalable and extensible, there are numbers of extensions created by the open source community. You may find some interesting and helpful extensions under the <a href="https://loopback.io/doc/en/lb4/Community-extensions.html" target="_blank" rel="noopener noreferrer">Community extensions</a> page. We are also considering adding example usages of LB4 from the community. Please let us know if you got any great extensions or examples you would like to share with us!</li><li>The community user <a href="https://github.com/zyqVizzzzz" target="_blank" rel="noopener noreferrer">@zyqVizzzzz</a> translated several tutorials for LB4 in Chinese. They can be found in the page <a href="https://loopback.io/doc/zh/lb4/Tutorials" target="_blank" rel="noopener noreferrer">教程（Tutorials）</a>. We really appreciate it! If you're interested in translating LB4 documentation, the instructions can be found in the page <a href="https://loopback.io/doc/en/contrib/translation.html" target="_blank" rel="noopener noreferrer">Translation</a>.</li></ul><p>In order to make your contribution process simpler, we will be gradually changing the contribution method from Contribution License Agreement (CLA) to Developer Certificate of Origin (DCO). Take a look at <a href="https://strongloop.com/strongblog/switching-to-dco/" target="_blank" rel="noopener noreferrer">this blog</a> to find out what the changes are and what it means to you.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="whats-next">What's Next?<a class="hash-link" href="#whats-next" title="Direct link to heading">​</a></h2><p>If you're interested in what we're working on next, you can check out the <a href="https://github.com/strongloop/loopback-next/pull/6028" target="_blank" rel="noopener noreferrer">August Milestone</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="call-to-action">Call to Action<a class="hash-link" href="#call-to-action" title="Direct link to heading">​</a></h2><p>In 2020, we look forward to helping you and seeing you around! LoopBack's success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here's how you can join us and help the project:</p><ul><li><a href="https://github.com/strongloop/loopback-next/issues" target="_blank" rel="noopener noreferrer">Report issues</a>.</li><li><a href="https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contribute</a> code and documentation.</li><li><a href="https://github.com/strongloop/loopback-next/labels/good%20first%20issue" target="_blank" rel="noopener noreferrer">Open a pull request on one of our "good first issues"</a>.</li><li><a href="https://github.com/strongloop/loopback-next/issues/110" target="_blank" rel="noopener noreferrer">Join</a> our user group.</li></ul>]]></content:encoded>
            <category>Milestone update</category>
        </item>
        <item>
            <title><![CDATA[Making Your Contribution Process Simpler - Switching from CLA to DCO]]></title>
            <link>https://loopbackio.github.io/switching-to-dco</link>
            <guid>switching-to-dco</guid>
            <pubDate>Wed, 29 Jul 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>Since the beginning of the LoopBack project, we have been using the Contributor License Agreement (CLA) as the contribution method. Contributors need to sign each CLA for each LoopBack repository they're contributing. To simplify the contribution process and encourage community contributions, we are planning to gradually switch to use <a href="https://developercertificate.org/" target="_blank" rel="noopener noreferrer">Developer Certificate of Origin (DCO)</a> as the contribution method. </p><h2 class="anchor anchorWithStickyNavbar_mojV" id="what-is-developer-certificate-of-origin-dco">What Is Developer Certificate of Origin (DCO)?<a class="hash-link" href="#what-is-developer-certificate-of-origin-dco" title="Direct link to heading">​</a></h2><p>As an alternative to CLA, a Developer Ceritifcate of Origin (DCO) is a more lightweight contribution method. According to <a href="https://en.wikipedia.org/wiki/Developer_Certificate_of_Origin" target="_blank" rel="noopener noreferrer">Wikipedia</a>:</p><blockquote><p>Instead a signed legal contract, a DCO is an affirmation that the source code being submitted originated from the developer, or that the developer has permission to submit the code.</p></blockquote><p>The full text of DCO can be found: <a href="https://developercertificate.org/" target="_blank" rel="noopener noreferrer">https://developercertificate.org/</a>. </p><h2 class="anchor anchorWithStickyNavbar_mojV" id="why-are-we-switching">Why Are We Switching?<a class="hash-link" href="#why-are-we-switching" title="Direct link to heading">​</a></h2><p>Community contributions are vital to the success of LoopBack. Since DCO simply needs your affirmation that you are the one who is submitting the code, we hope this switch would make the contribution process simpler and thus encourages more contributions from you!</p><p>In addition, this change can help us to reduce the infrastructure cost, including the team's time and effort, to maintain the CLA server. </p><h2 class="anchor anchorWithStickyNavbar_mojV" id="what-does-it-mean-to-you">What Does It Mean To You?<a class="hash-link" href="#what-does-it-mean-to-you" title="Direct link to heading">​</a></h2><p>Currently, the <a href="https://github.com/strongloop/loopback4-example-shopping" target="_blank" rel="noopener noreferrer">loopback4-example-shopping</a> is already using DCO. </p><p>To sign off the commit, you can:</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">git commit -s -m "feat: my commit message"</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Over the next little while, we'll start the switch for the repositories with the most community contributions, namely <a href="https://github.com/strongloop/loopback-next" target="_blank" rel="noopener noreferrer">loopback-next</a>, <a href="https://github.com/strongloop/loopback.io" target="_blank" rel="noopener noreferrer">loopback.io</a> and <a href="https://github.com/strongloop/loopback-datasource-juggler" target="_blank" rel="noopener noreferrer">loopback-datasource-juggler</a>, then we'll roll it out for the connector repos. </p><h2 class="anchor anchorWithStickyNavbar_mojV" id="start-contributing">Start Contributing!<a class="hash-link" href="#start-contributing" title="Direct link to heading">​</a></h2><p>You are more than welcome to contribute on something that you find it relevant and interesting to you. If you're simply looking for items that we want help, you can look for GitHub issues with <a href="https://github.com/issues?q=is%3Aopen+is%3Aissue+archived%3Afalse+user%3Astrongloop+label%3A%22help+wanted%22" target="_blank" rel="noopener noreferrer"><code>help wanted</code></a> or <a href="https://github.com/issues?q=is%3Aopen+is%3Aissue+archived%3Afalse+user%3Astrongloop+label%3A%22good+first+issue%22" target="_blank" rel="noopener noreferrer"><code>good first issue</code></a> labels. </p><p>More questions? Feel free to ask in the #loopback-contributors channel of the <a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">LoopBack Slack community</a>.</p>]]></content:encoded>
            <category>Community</category>
            <category>Contribution</category>
        </item>
        <item>
            <title><![CDATA[Community Q&A Monthly Digest - Jun 2020]]></title>
            <link>https://loopbackio.github.io/2020-Jun-slack-qa</link>
            <guid>2020-Jun-slack-qa</guid>
            <pubDate>Thu, 16 Jul 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>Welcome back to the "Community Q&amp;A Monthly Digest", in which we highlight some of the questions and answers in <a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">our LoopBack Slack community</a> here.</p><p><strong>Question:</strong> Has anyone implemented Casbin on a brand new project? or is there a good tutorial for lb4? I need to have some rbac / roles system in an app.. or what would you suggest to achieve that?</p><p><strong>Answer:</strong> We have an access control example uses casbin, see the <a href="https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration" target="_blank" rel="noopener noreferrer">access-control-migration example</a> and <a href="https://loopback.io/doc/en/lb4/migration-auth-access-control-example.html" target="_blank" rel="noopener noreferrer">its tutorial</a>. The logic on casbin side is only a prototype, the example mainly shows the integration between casbin and LoopBack authorization system.</p><hr><p><strong>Question:</strong> I am new to LoopBack and so far I really like what it has to offer. I was wondering if anyone knows of a good online course to learn LoopBack. I have worked through the basic tutorials found in the documentation, but I find it easier to listen and follow along to videos. </p><p><strong>Answer:</strong> Recently one of our community member posts a <a href="https://www.youtube.com/watch?v=cgBCRY169qg" target="_blank" rel="noopener noreferrer">YouTube tutorial for LoopBack 4 beginners</a>. There is another series of educational videos on <a href="https://www.youtube.com/watch?v=pDGWb-q65qM" target="_blank" rel="noopener noreferrer">a LoopBack introduction</a> and <a href="https://www.youtube.com/watch?v=1U9ZCDlBtjc" target="_blank" rel="noopener noreferrer">installation</a>. </p><p>From our side, there are a few recent videos on our <a href="https://www.youtube.com/channel/UCR8LLOxVNwSEWLMqoZzQNXw/videos" target="_blank" rel="noopener noreferrer">StrongLoop YouTube channel</a> and we're trying to add more. Hope it helps.</p><hr><p><strong>Question:</strong> I am trying to disable the openapi.json from showing in my loopback 4 application and its not working. I was able to disable the explorer. Any ideas?</p><p><strong>Answer:</strong> You can use <code>openApiSpec: {disabled: true}</code> in <code>index.ts</code>. i.e. </p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> config </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rest</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">//..</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      openApiSpec</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        disabled</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">//..</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><hr><p><strong>Question:</strong> Does Loopback 4 support extracting cookies from the header? Currently I had to integrate Express server to achieve this. </p><p><strong>Answer:</strong> You can use express middleware like <a href="http://expressjs.com/en/resources/middleware/cookie-parser.html" target="_blank" rel="noopener noreferrer">http://expressjs.com/en/resources/middleware/cookie-parser.html</a> see how to use middleware in <a href="https://loopback.io/doc/en/lb4/Express-middleware.html" target="_blank" rel="noopener noreferrer">https://loopback.io/doc/en/lb4/Express-middleware.html</a>.</p><hr><p><strong>Question:</strong> Is there a quick way to generate timestamp? Like at the model level <code>generated:true</code>?</p><p><strong>Answer:</strong> I recommend to use defaultFn set to one of the following string values:</p><ul><li>"guid": generate a new globally unique identifier (GUID) using the computer MAC address and current time (UUID version 1).</li><li>"uuid": generate a new universally unique identifier (UUID) using the computer MAC address and current time (UUID version 1).</li><li>"uuidv4": generate a new universally unique identifier using the UUID version 4 algorithm.</li><li>"now": use the current date and time as returned by new Date()</li></ul><p>See also <a href="https://github.com/strongloop/loopback/issues/292" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback/issues/292</a> and <a href="https://loopback.io/doc/en/lb4/Model.html#property-decorator" target="_blank" rel="noopener noreferrer">https://loopback.io/doc/en/lb4/Model.html#property-decorator</a>.</p><p>It would be great to capture these options in our TypeScript definitions, see <a href="https://github.com/strongloop/loopback-next/blob/ae6427322451c914ae54f44dbb656981e7fbbb81/packages/repository/src/model.ts#L34-L42" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback-next/blob/ae6427322451c914ae54f44dbb656981e7fbbb81/packages/repository/src/model.ts#L34-L42</a>.</p><hr><p><strong>Question:</strong> Can I use MongoDB update operators in LoopBack apps? How can I enable it?</p><p><strong>Answer:</strong> Yes, except comparison and logical operators, the mongo connector also supports MongoDB update operators such as <code>max</code>, <code>rename</code>, etc. You will need to set the flag <code>allowExtendedOperators</code> to <code>true</code> in the datasource configuration. You can find details and examples at <a href="https://loopback.io/doc/en/lb4/MongoDB-connector.html#update-operators" target="_blank" rel="noopener noreferrer">MongoDB connector - update operators</a>.</p><hr><h2 class="anchor anchorWithStickyNavbar_mojV" id="interested-to-join-our-slack-workspace">Interested to Join our Slack Workspace?<a class="hash-link" href="#interested-to-join-our-slack-workspace" title="Direct link to heading">​</a></h2><p>Simply click <a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">this invitation link</a> to join. You can also find more channel details here: <a href="https://github.com/strongloop/loopback-next/issues/5048" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback-next/issues/5048</a>.</p>]]></content:encoded>
            <category>Community</category>
            <category>Slack</category>
            <category>Q&amp;A</category>
        </item>
        <item>
            <title><![CDATA[LoopBack 4 2020 Q2 Overview]]></title>
            <link>https://loopbackio.github.io/loopback-4-2020-q2-overview</link>
            <guid>loopback-4-2020-q2-overview</guid>
            <pubDate>Tue, 14 Jul 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>Over the recent months, this global pandemic has affected our lives in different ways; we hope you all stay safe during these difficult times. The LoopBack team has adapted to new ways of working, including virtually and in new settings. Even though it could be challenging sometimes, we are glad that we were able to complete most of our Q2 plan. Thanks to all the support from the team and the community!</p><p>Here's a brief look at the Q2 summary:</p><ul><li><a href="#migration-guide">Migration Guide</a></li><li><a href="#enhancing-documentation">Enhancing Documentation</a></li><li><a href="#leveraging-authentication-system">Leveraging Authentication System</a></li><li><a href="#apic/lb4-integration">APIC/LB4 Integration</a></li><li><a href="#other-highlights">Other Highlights</a></li><li><a href="#building-loopBack-community">Building LoopBack Community</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="migration-guide">Migration Guide<a class="hash-link" href="#migration-guide" title="Direct link to heading">​</a></h2><p>One of our main targets in Q2 was to finish the migration guide, and we did it! We accomplished all the items on the <a href="https://github.com/strongloop/loopback-next/issues/453" target="_blank" rel="noopener noreferrer">migration plan</a>. The <a href="https://loopback.io/doc/en/lb4/migration-overview.html" target="_blank" rel="noopener noreferrer">Migration guide</a> can be found easily on the LB4 home page. We have instructions that helps you migrate various artifacts and also have docs to explain similarities and differences between LB3 and LB4. From request/response infrastructure to datasource setup, from model definitions to the authentication and authorization, we hope the guide is useful for you when migrating your LoopBack 3 applications to LoopBack 4.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="enhancing-documentation">Enhancing Documentation<a class="hash-link" href="#enhancing-documentation" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="new-documentation-structure">New Documentation Structure<a class="hash-link" href="#new-documentation-structure" title="Direct link to heading">​</a></h3><p>This quarter, one of our targets was to upgrade the documentation system. As we are adding more features and documentation to LoopBack 4, the abundant amount of sidebar entries was overwhelming and difficult to navigate with the old documentation system. We reorganized most of them into the following four parts:</p><ul><li>"Tutorials"</li><li>"How-to guides"</li><li>"Behind the scenes"</li><li>"References guides"</li></ul><p>For example, if you'd like to learn how you can secure your LoopBack 4 application, now you can find it easily under the "Tutorials" sections instead of searching through the whole path "Concept -&gt; Authentication -&gt; Authentication tutorial".</p><p>Moreover, we also started working on reorganizing most of our documentation to focus on framework-level APIs and de-emphasizing the lower-level building blocks to reduce the complexity. For example, we removed <code>@loopback/express</code> from framework-level documentation and replaced references to use <code>@loopback/rest instead</code>.</p><p>This is just the first step of our long journey of improving the documentation system. Please let us know if you have any feedback.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="rewriting-your-favorite-lb3-content-to-loopback-4">Rewriting your favorite LB3 content to LoopBack 4<a class="hash-link" href="#rewriting-your-favorite-lb3-content-to-loopback-4" title="Direct link to heading">​</a></h3><p>We've been using shared content for some topics in both LB3 and LB4, but this might be confusing if the user is not familiar with LB3. To reduce the gap between these two versions, we also rewrote some documentation from LB3 in LB4 style. For example, now you can check usage examples written in LB4 style for the Filters under the page <a href="https://loopback.io/doc/en/lb4/Working-with-data.html" target="_blank" rel="noopener noreferrer">Working with data</a>. What's more is that we also created tutorials for connecting to <a href="https://loopback.io/doc/en/lb4/Connecting-to-MySQL.html" target="_blank" rel="noopener noreferrer">MySQL</a>, <a href="https://loopback.io/doc/en/lb4/Connecting-to-Oracle.html" target="_blank" rel="noopener noreferrer">Oracle</a>, <a href="https://loopback.io/doc/en/lb4/Connecting-to-PostgreSQL.html" target="_blank" rel="noopener noreferrer">PostgreSQL</a>, and <a href="https://loopback.io/doc/en/lb4/Connecting-to-MongoDB.html" target="_blank" rel="noopener noreferrer">MongoDB</a> databases. By following the steps in these tutorials, you'll find it easy to connect to databases with LB4 applications.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="leveraging-authentication-system">Leveraging Authentication System<a class="hash-link" href="#leveraging-authentication-system" title="Direct link to heading">​</a></h2><p>The authentication system has changed a lot since it was being used as an experimental feature. It is now more reliable and flexible. We improved it in the following aspects:</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="examples">Examples<a class="hash-link" href="#examples" title="Direct link to heading">​</a></h3><p>We added two examples for different authentication strategies:</p><ul><li><p><a href="https://github.com/strongloop/loopback-next/tree/master/examples/todo-jwt" target="_blank" rel="noopener noreferrer">TODO example with JWT</a> demos enabling JWT authentication in the Todo application. This is a good example for beginners to follow the authentication system.</p></li><li><p><a href="https://github.com/strongloop/loopback-next/tree/master/examples/passport-login" target="_blank" rel="noopener noreferrer">Passport Login example</a> shows how to use <a href="http://www.passportjs.org/docs/" target="_blank" rel="noopener noreferrer">Passport Strategies</a> in LoopBack 4. If you are using the loopback-component-passport in LoopBack 3, this example can help you migrate your application to LoopBack 4.</p></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="documentation">Documentation<a class="hash-link" href="#documentation" title="Direct link to heading">​</a></h3><p>We reorganized the authentication documentation to make it more easy to adopt. Instead of throwing all the details to users, now the <a href="https://loopback.io/doc/en/lb4/Authentication-overview.html" target="_blank" rel="noopener noreferrer">authentication docs</a> starts with a simple high-level explanation, then it walks through users with several examples with different difficulties to show what the system is capable of and how they can be achieved.</p><p>Besides, as we mentioned above, we also added page <a href="https://loopback.io/doc/en/lb4/migration-auth-overview.html" target="_blank" rel="noopener noreferrer">Migrating authentication and authorization</a> as part of the migration plan as well.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="apiclb4-integration">APIC/LB4 Integration<a class="hash-link" href="#apiclb4-integration" title="Direct link to heading">​</a></h2><p><a href="https://developer.ibm.com/apiconnect/" target="_blank" rel="noopener noreferrer">API Connect</a> is a complete, intuitive and scalable API platform provided by IBM.</p><p>In Q2, we completed the integration of LoopBack 4 with API Connect v10 which was released in June. When a LoopBack application is scaffolded through the APIC toolkit, the LoopBack-generated OpenAPIv3 spec comes with API Connect specific metadata added, thanks to the <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect" target="_blank" rel="noopener noreferrer">LoopBack APIConnect extension</a>. If you're interested, we've been preparing an article on how you can take the APIs created from LoopBack and import them into API Connect for API management. Stay tuned!</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="other-highlights">Other Highlights<a class="hash-link" href="#other-highlights" title="Direct link to heading">​</a></h2><p>Here are some highlights of our work we would like to share!</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="supporting-typeorm">Supporting TypeORM<a class="hash-link" href="#supporting-typeorm" title="Direct link to heading">​</a></h3><p>You might decide to use an alternative ORM/ODM in your LoopBack 4 application, and LoopBack 4 also has such flexibility as it no longer expects you to provide your data in its own custom Model format for routing purposes, which means you are free to alter your classes to suit these ORMs/ODMs.</p><p><a href="https://typeorm.io/#/" target="_blank" rel="noopener noreferrer">TypeORM</a> is an ORM that can run in NodeJS and others platforms and can be used with TypeScript and JavaScript, which fits LoopBack 4 well. We implemented initial support for TypeORM in LoopBack 4 in the <code>@loopback/typeorm</code> package. Please check the <a href="https://github.com/strongloop/loopback-next/blob/master/packages/typeorm/README.md" target="_blank" rel="noopener noreferrer">README</a> file for the usage and limitations.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="express-middleware">Express Middleware<a class="hash-link" href="#express-middleware" title="Direct link to heading">​</a></h3><p>LoopBack 4 leverages Express behind the scenes for its REST server implementation. The new <a href="https://github.com/strongloop/loopback-next/tree/master/packages/express" target="_blank" rel="noopener noreferrer">Express Package</a>, has enabled injecting single and multiple express middleware functions as <code>Interceptor</code>s into <code>Controller</code> invocations and also as a middleware step in the application <code>Sequence</code>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="component-application-booter">Component Application Booter<a class="hash-link" href="#component-application-booter" title="Direct link to heading">​</a></h3><p>Sometimes it might be the case that we want to break our complex application into multiple smaller LoopBack applications. The component application booter composes these sub applications into the main application. This is helpful for building a scalable micro-services application. See the page <a href="https://loopback.io/doc/en/lb4/Booting-an-Application.html" target="_blank" rel="noopener noreferrer">Booting an Application</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="hasmanythrough-relation">HasManyThrough Relation<a class="hash-link" href="#hasmanythrough-relation" title="Direct link to heading">​</a></h3><p>With help from the community users, the experimental feature <a href="https://github.com/strongloop/loopback-next/blob/master/packages/repository/src/relations/has-many/has-many-through.repository.ts" target="_blank" rel="noopener noreferrer"><code>HasManyThrough</code> relation</a> is added to LB4. Currently it only has some basic functionalities. The documentation and related CLI will be updated in the near future.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="run-tests-in-parallel">Run Tests in Parallel<a class="hash-link" href="#run-tests-in-parallel" title="Direct link to heading">​</a></h3><p>We upgraded <code>mocha</code> to the new version 8, and it enable parallel execution of Mocha tests. With the option, we can control the number of worker processes and make the testing process more efficient. Details can be found in <a href="https://loopback.io/doc/en/lb4/code-contrib-lb4.html#running-tests" target="_blank" rel="noopener noreferrer">Running tests</a> section.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="extensions">Extensions<a class="hash-link" href="#extensions" title="Direct link to heading">​</a></h3><p>Extensions/Extension points is one of the main features of LB4 to make the application extensible. We added the following two extensions in Q2:</p><ul><li><p>JWT authentication: as the authentication system gets popular and more solid, we extracted the JWT authentication system into a separate extension package as an experimental feature, so that users can quickly mount a component to try out the feature. Check <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt" target="_blank" rel="noopener noreferrer"><code>authentication-jwt</code></a> for details.</p></li><li><p>LoopBack APIConnect extension: the <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect" target="_blank" rel="noopener noreferrer">LoopBack APIConnect extension</a> is ready for use. It provides <code>ApiConnectComponent</code> that adds an <code>OASEnhencer</code> extension to contribute <code>x-ibm-configuration</code> to the OpenAPI spec generated by LoopBack applications.</p></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="building-loopback-community">Building LoopBack Community<a class="hash-link" href="#building-loopback-community" title="Direct link to heading">​</a></h2><p>We're happy to see more users/developers join our community. We appreciate all the help! We've opened a public <a href="https://slack.com/" target="_blank" rel="noopener noreferrer">Slack</a> channel so that developers can ask questions, discuss issues, and share their knowledge to help each other easily.</p><p>We also had a several video-calls with LoopBack maintainers. It's nice to get to know each other, share the plans &amp; visions and discuss topics by talking together. Let's continue building LoopBack a better framework together.</p><p>Wanna join us? Yes! You're invited 👉 <a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">Join LoopBack Channel on Slack</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="previous-milestone-blogs">Previous Milestone Blogs<a class="hash-link" href="#previous-milestone-blogs" title="Direct link to heading">​</a></h2><p>There are many more accomplishments that cannot be captured in this blog, make sure you check out our previously published monthly milestone blog posts in Q2 for more details:</p><ul><li><a href="https://strongloop.com/strongblog/april-2020-milestone/" target="_blank" rel="noopener noreferrer">April 2020</a></li><li><a href="https://strongloop.com/strongblog/may-2020-milestone/" target="_blank" rel="noopener noreferrer">May 2020</a></li><li><a href="https://strongloop.com/strongblog/june-2020-milestone/" target="_blank" rel="noopener noreferrer">June 2020</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="whats-next">What's Next?<a class="hash-link" href="#whats-next" title="Direct link to heading">​</a></h2><p>We have published a blog <a href="https://strongloop.com/strongblog/2020-goals/" target="_blank" rel="noopener noreferrer">LoopBack - 2020 Goals and Focus</a> about our plans this year. Here is a summary of the <a href="https://github.com/strongloop/loopback-next/blob/master/docs/ROADMAP.md#q3-2020-roadmap" target="_blank" rel="noopener noreferrer">Q3 2020 roadmap</a>:</p><ul><li>finish migration guide for both general runtime and authentication &amp; authorization</li><li>continue with API Connect and LoopBack integration</li><li>look into feature parity gaps that are highly requested by users</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="call-to-action">Call to Action<a class="hash-link" href="#call-to-action" title="Direct link to heading">​</a></h2><p>In 2020, we look forward to helping you and seeing you around! LoopBack's success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here's how you can join us and help the project:</p><ul><li><a href="https://github.com/strongloop/loopback-next/issues" target="_blank" rel="noopener noreferrer">Report issues</a>.</li><li><a href="https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contribute</a> code and documentation.</li><li><a href="https://github.com/strongloop/loopback-next/labels/good%20first%20issue" target="_blank" rel="noopener noreferrer">Open a pull request on one of our "good first issues"</a>.</li><li><a href="https://github.com/strongloop/loopback-next/issues/110" target="_blank" rel="noopener noreferrer">Join</a> our user group.</li></ul>]]></content:encoded>
            <category>Quarterly update</category>
        </item>
        <item>
            <title><![CDATA[LoopBack 4 June 2020 Milestone Update]]></title>
            <link>https://loopbackio.github.io/june-2020-milestone</link>
            <guid>june-2020-milestone</guid>
            <pubDate>Wed, 08 Jul 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>Documentation restructuring, TypeORM support, and HasManyThrough were the three main accomplishments in the month of June. Based on the community feedback, documentation improvement remains our number one priority in the coming month. Besides, while welcoming Nathan Chen join as a maintainer of the <code>strong-globalize</code> repo, we said farewell to Deepak. </p><p>Here is what we did in the month June:</p><ul><li><a href="#documentation-improvements">Documentation Improvements</a></li><li><a href="#hasmanythrough">HasManyThrough</a></li><li><a href="#typeormsupport">TypeORM Support</a></li><li><a href="#miscellaneous">Miscellaneous</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="documentation-improvements">Documentation Improvements<a class="hash-link" href="#documentation-improvements" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="new-documentation-structure">New Documentation Structure<a class="hash-link" href="#new-documentation-structure" title="Direct link to heading">​</a></h3><p>When writing documentation for new features, we were often struggling to find the right place to put the content and the right form to frame the information. Recently, we discovered a documentation system based on four different functions. It explains why we were struggling and provides a structure to guide us when writing new content.</p><blockquote><p>Documentation needs to include and be structured around its four different functions: tutorials, how-to guides, technical reference and explanation. Each of them requires a distinct mode of writing. People working with software need these four different kinds of documentation at different times, in different circumstances - so software usually needs them all, and they should all be integrated into your documentation.</p></blockquote><p>In June, we explored how to apply this documentation system to our content and implemented first high-level changes in the way how our content is organized. Check out <a href="https://github.com/strongloop/loopback-next/issues/5549" target="_blank" rel="noopener noreferrer">loopback-next#5549</a> to find more resources about our new documentation system.</p><p>In a series of incremental pull requests, we reworked our documentation structure as follows:</p><ul><li>Renamed "Usage scenarios" to "How-to guides" to make it clear what kind of content is there.</li><li>Placed all explanation-related pages in "Behind the scenes" section and removed the section "Key concepts".</li><li>Relocated all reference guides to be nested under "Reference guides". We moved pages like "Error handling" and "Reserved binding keys" to references guides to make them easier to find.</li><li>Moved pages from "Using components" to "How-to guides".</li><li>Added support for sidebar sections that are just grouping related pages together but don't have a page of their own. This allowed us to remove few section pages that were rather anemic: "Access databases", "Reference guides", "How-to guides".</li><li>Reworked the "Server" page in "Behind the scenes" because there was a mix of different kinds of content in the page. We extracted some of the guides into new pages nested under "How-to guides".</li></ul><p>The re-organized documentation is already live at <a href="https://loopback.io/doc/en/lb4" target="_blank" rel="noopener noreferrer">loopback.io</a>, take a look and let us know what do you think!</p><p>Now that the new structure is in place, we are going to gradually review and update existing documentation content to align it with the new system. You can find the list of relevant tasks in <a href="https://github.com/strongloop/loopback-next/issues/5113" target="_blank" rel="noopener noreferrer">loopback-next#5113</a>. As always, your help is welcome!</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="alignment-along-abstraction-levels">Alignment Along Abstraction Levels<a class="hash-link" href="#alignment-along-abstraction-levels" title="Direct link to heading">​</a></h3><p>As we were incrementally adding new features to the framework and extracting building blocks into standalone packages, our documentation ended up describing concepts from different abstraction layers in the same place, mixing information for framework users with references to low-level building blocks. This resulted in a steep learning curve for new users, because there were so many concept and packages to learn about!</p><p>In June, we reorganized most of our documentation to focus on framework-level APIs and deemphasize lower-level building blocks. As a result, we updated our developer documentation to describe which packages are considered as building blocks, see <a href="https://loopback.io/doc/en/lb4/code-contrib-lb4.html#organization-of-content" target="_blank" rel="noopener noreferrer">Organization of content</a>. We also:</p><ul><li><a href="https://github.com/strongloop/loopback-next/pull/5625" target="_blank" rel="noopener noreferrer">updated our packages and documentation pages to use <code>@loopback/core</code> instead of <code>@loopback/context</code></a></li><li><a href="https://github.com/strongloop/loopback-next/pull/5696" target="_blank" rel="noopener noreferrer">removed <code>@loopback/metadata</code> from framework-level documentation and replaced references to use <code>@loopback/core</code> instead</a></li><li><a href="https://github.com/strongloop/loopback-next/pull/5693" target="_blank" rel="noopener noreferrer">removed <code>@loopback/express</code> from framework-level documentation and replaced references to use <code>@loopback/rest</code> instead</a></li></ul><p>Now we need to update places referring to <code>@loopback/openapi-v3</code>, as discussed in <a href="https://github.com/strongloop/loopback-next/issues/5692" target="_blank" rel="noopener noreferrer">loopback-next5692</a>. Want to contribute those changes yourself? Submit a PR today!</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="refactoring-of-authentication-related-documentation">Refactoring of Authentication-related Documentation<a class="hash-link" href="#refactoring-of-authentication-related-documentation" title="Direct link to heading">​</a></h3><p>We refactored the authentication documentation so that it is easier for beginners to follow. As the new entry page, the <a href="https://loopback.io/doc/en/lb4/Authentication-overview.html" target="_blank" rel="noopener noreferrer">authentication overview page</a> describes a typical scenario for securing APIs and it also helps you understand what "authentication" means in LoopBack 4. Next you can follow a simple hands-on tutorial <a href="https://loopback.io/doc/en/lb4/Authentication-tutorial.html" target="_blank" rel="noopener noreferrer">secure your LoopBack 4 application with JWT authentication</a> to start exploring this feature. Then you can gradually learn the authentication system's mechanism and how to implement your own authentication strategies.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="adding-loopback-4-content-to-connector-pages">Adding LoopBack 4 Content to Connector Pages<a class="hash-link" href="#adding-loopback-4-content-to-connector-pages" title="Direct link to heading">​</a></h3><p>As the continuation of improving connector documentation, after updating the PostgreSQL connector, we updated the connector page and added three more tutorials for <a href="https://loopback.io/doc/en/lb4/Connecting-to-MySQL.html" target="_blank" rel="noopener noreferrer">MySQL</a>, <a href="https://loopback.io/doc/en/lb4/Connecting-to-Oracle.html" target="_blank" rel="noopener noreferrer">Oracle</a>, and <a href="https://loopback.io/doc/en/lb4/Connecting-to-MongoDB.html" target="_blank" rel="noopener noreferrer">MongoDB</a> connectors in June. By walking you through the steps of creating a LB4 application and connecting to a certain database, we hope new users find the tutorial helpful to adopt LoopBack 4 better. Besides the basic setup steps, we also added some sections to explain those questions that are being asked a lot from the community. Check out these documentations under <a href="https://loopback.io/doc/en/lb4/Database-connectors.html" target="_blank" rel="noopener noreferrer">Database connectors</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="hasmanythrough">HasManyThrough<a class="hash-link" href="#hasmanythrough" title="Direct link to heading">​</a></h2><p>A <code>HasManyThrough</code> relation sets up a many-to-many connection through another model. At the moment, LB4 only supports three basic relations: <code>HasMany</code>, <code>BelongsTo</code>, and <code>HasOne</code>.</p><p>Thanks to the initial work by <a href="https://github.com/codejamninja" target="_blank" rel="noopener noreferrer"><code>codejamninja</code></a> and <a href="https://github.com/derdeka" target="_blank" rel="noopener noreferrer"><code>derdeka</code></a>, we have a working prototype of the feature.</p><p>While functional, the <a href="https://github.com/strongloop/loopback-next/pull/2359" target="_blank" rel="noopener noreferrer">PR</a> is pretty huge and some of the parts are up for discussion. As a result, we started to extract the core parts of the implementation into smaller PRs so that it's easier for review. In June, we had the basic operations working and tests are added. As the next step, we'll be adding documentation.</p><p>Stay tuned with the progress by going to <a href="https://github.com/strongloop/loopback-next/issues/5835" target="_blank" rel="noopener noreferrer">loopback-next #5835</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="typeorm-support">TypeORM Support<a class="hash-link" href="#typeorm-support" title="Direct link to heading">​</a></h2><p>We have implemented initial support for TypeORM in LoopBack. All it takes to enable TypeORM is to compose your app with the <code>TypeOrmMixin</code> mixin.</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">BootMixin</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/boot'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">RestApplication</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/rest'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">TypeOrmMixin</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/typeorm'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">MyApplication</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name maybe-class-name">BootMixin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function maybe-class-name" style="color:#d73a49">TypeOrmMixin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">RestApplication</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>For details about using TypeORM with LoopBack, refer to the <code>@loopback/typeorm</code> <a href="https://github.com/strongloop/loopback-next/blob/master/packages/typeorm/README.md" target="_blank" rel="noopener noreferrer">doc</a>.</p><p>Complete support for TypeORM is a significant amount of work. While the initial work is done, we're looking for ways to improve the implementation in the following areas.</p><ol><li>Complete TypeORM to OpenAPI data type conversion (currently only <code>number</code>,
<code>string</code>, and <code>boolean</code> are supported)</li><li>Full JSON/OpenAPI schema for models, including variants like with/without id,
with/without relations, partial, etc.</li><li>Json/OpenAPI schema to describe the supported filter format</li><li>Support for LoopBack-style filters</li><li>Custom repository classes (e.g. to implement bookRepo.findByTitle(title)).</li><li>Database migration</li></ol><h2 class="anchor anchorWithStickyNavbar_mojV" id="miscellaneous">Miscellaneous<a class="hash-link" href="#miscellaneous" title="Direct link to heading">​</a></h2><p>We upgraded <code>mocha</code> to the new version 8. This version brings support for running tests in parallel (yay!), but also drops support for <code>--opts</code> argument and <code>test/mocha.opts</code> file. See <a href="https://github.com/mochajs/mocha/releases/tag/v8.0.0" target="_blank" rel="noopener noreferrer">Mocha 8.0.0 release notes</a> for the full list of breaking changes and instructions on migrating existing projects. Our changes were introduced by <a href="https://github.com/strongloop/loopback-next/pull/5750" target="_blank" rel="noopener noreferrer">loopback-next#5750</a> and <a href="https://github.com/strongloop/loopback-next/pull/5710" target="_blank" rel="noopener noreferrer">loopback-next#5710</a>; and published in <code>@loopback/build</code> version <code>6.0.0</code>.</p><p><a href="https://strongloop.com/authors/Miroslav_Bajto%C5%A1" target="_blank" rel="noopener noreferrer">Miroslav</a> benchmarked the performance of LoopBack and found an opportunity for a quick but significant improvement. By changing the algorithm used in <code>@loopback/context</code> to generate unique context instance names, we managed to improve the performance of our REST API layer by 45%! Learn more in the blog post <a href="https://strongloop.com/strongblog/2020-improve-looopback-performance-uuid/" target="_blank" rel="noopener noreferrer">How We Improved LoopBack REST Performance by 45%</a>.</p><p>A new method <code>exportOpenApiSpec()</code> was added to the <code>RestServer</code> for generating OpenAPI specs in JSON or YAML format. This method can be called from the project directory by running the <code>openapi-spec</code> script.</p><p>When a binding key is not bound,<code>ResolutionError</code> now captures more contextual information. Earlier it used to print a long stack trace and was not easy to find out where the failure happened.</p><p>The implementation of binding cache was <a href="https://github.com/strongloop/loopback-next/pull/5731" target="_blank" rel="noopener noreferrer">improved</a> to prevent race conditions and better handle bindings in async conditions.</p><p><code>CoreBindings.APPLICATION_INSTANCE</code> now has corresponding <code>@config()</code> decorator.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="july-milestones">July Milestones<a class="hash-link" href="#july-milestones" title="Direct link to heading">​</a></h2><p>In the month of July we will continue focusing on improving the documentation. You can see the whole list on the <a href="https://github.com/strongloop/loopback-next/issues/5837" target="_blank" rel="noopener noreferrer">July milestone issue</a>.</p><p>There is also ongoing work to have <a href="https://github.com/strongloop/loopback-next/pull/5545" target="_blank" rel="noopener noreferrer">native GraphQL support</a> and a <a href="https://github.com/strongloop/loopback-next/pull/5681" target="_blank" rel="noopener noreferrer">new extension for pooling service</a>. Your feedback is welcome.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="welcome-and-goodbyes">Welcome and Goodbyes<a class="hash-link" href="#welcome-and-goodbyes" title="Direct link to heading">​</a></h2><p>We're pleased to welcome <a href="https://github.com/codechennerator" target="_blank" rel="noopener noreferrer">Nathan Chen</a> as the maintainer of the <a href="https://github.com/strongloop/strong-globalize" target="_blank" rel="noopener noreferrer">strong-globalize</a> repo. Thank you Nathan for all the good work you've done. On the other hand, it's sad to see <a href="https://strongloop.com/authors/Deepak_Rajamohan/" target="_blank" rel="noopener noreferrer">Deepak</a> leaving the LoopBack team. We wish him best of luck in his new adventure.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="call-to-action">Call to Action<a class="hash-link" href="#call-to-action" title="Direct link to heading">​</a></h2><p>In 2020, we look forward to helping you and seeing you around! LoopBack's success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here's how you can join us and help the project:</p><ul><li><a href="https://github.com/strongloop/loopback-next/issues" target="_blank" rel="noopener noreferrer">Report issues</a>.</li><li><a href="https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contribute</a> code and documentation.</li><li><a href="https://github.com/strongloop/loopback-next/labels/good%20first%20issue" target="_blank" rel="noopener noreferrer">Open a pull request on one of our "good first issues"</a>.</li><li><a href="https://github.com/strongloop/loopback-next/issues/110" target="_blank" rel="noopener noreferrer">Join</a> our user group.</li></ul>]]></content:encoded>
            <category>Milestone update</category>
        </item>
        <item>
            <title><![CDATA[Community Q&A Monthly Digest - May 2020]]></title>
            <link>https://loopbackio.github.io/2020-may-slack-qa</link>
            <guid>2020-may-slack-qa</guid>
            <pubDate>Thu, 11 Jun 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>Since we made the <a href="https://loopbackio.slack.com/" target="_blank" rel="noopener noreferrer">LoopBack Slack community</a> available, we are happy to see more and more users are joining. Let's see some of the questions and answers that we've highlighted below.</p><hr><p><strong>Question</strong>: In the <a href="https://loopback.io/doc/en/lb4/Model.html#using-the-juggler-bridge" target="_blank" rel="noopener noreferrer">Model documentation page</a>, it says "To define a model for use with the juggler bridge, extend your classes from Entity". What's the juggler bridge?</p><p><strong>Answer</strong>: the Juggler bridge is used to bridge the gap between <code>@loopback/repository</code> and <code>loopback-datasource-juggler</code>. The former is used by LoopBack 4 to help define Models, Repositories, etc. It also allows for cross-datasource relations, etc. as they are enforced at the application level instead of the database.</p><p>The latter is the ORM/ODM that builds the queries and interacts with the database. It's from LoopBack 3 and is probably the only major component that didn't get revamped to keep backwards-compatibility.</p><p>Hence, the Juggler bridge helps bridge the gaps between these Node.js packages.</p><p><code>Entity</code> is, at it's core, a model that has an ID property. Looking at the source code for <code>Entity</code>, there's quite a bit of boilerplate code added.</p><hr><p><strong>Question:</strong> Is there a way to change the application port to string ? I am trying to deploy the application under Azure web app where the port is a string.</p><p><strong>Answer</strong>: Use <code>port: +(process.env.BILLING_PORT || 3000),</code>. The <code>+</code> converts a string to number. For the pipe, you should use <code>path</code> property instead of <code>port</code>. See <a href="https://github.com/strongloop/loopback-next/blob/master/packages/http-server/src/__tests__/integration/http-server.integration.ts#L272" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback-next/blob/master/packages/http-server/src/<strong>tests</strong>/integration/http-server.integration.ts#L272</a>.</p><hr><p><strong>Question:</strong> I have a model with a field which is defined as “number”. Working with Postgres. How should I define it to have the field as a double and not an integer ?</p><p><strong>Answer:</strong> You can specify the dataType field to define a certain type of that column. For type Double, for example,</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">model</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">Item</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name maybe-class-name">Entity</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">property</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'number'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    generated</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  id</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">number</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">property</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'number'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    postgresql</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      dataType</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'double precision'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  price</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">number</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token spread operator" style="color:#393A34">...</span><span class="token punctuation" style="color:#393A34">.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Then run <code>npm run build</code> and then <code>npm run migrate</code> commands, the table should have columns:</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">price       |                | double precision</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Besides the data type, LB4 also allows you to describe tables via the model definition and/or property definition. See <a href="https://loopback.io/doc/en/lb4/Model.html#data-mapping-properties" target="_blank" rel="noopener noreferrer">Data Mapping Properties</a> for information.</p><hr><p><strong>Question:</strong> Is there client sdk for lb4 for api code generation? I tried with swagger codegen, but the generated code seems doesn't work.</p><p><strong>Answer:</strong> You should try <code>lb4 openapi --client</code>. It generates strongly-typed LoopBack service proxies over openapi spec using TypeScript. We use it to generate SDKs in TS.</p><hr><h2 class="anchor anchorWithStickyNavbar_mojV" id="interested-to-join-our-slack-workspace">Interested to Join our Slack Workspace?<a class="hash-link" href="#interested-to-join-our-slack-workspace" title="Direct link to heading">​</a></h2><p>Simply click <a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">this invitation link</a> to join. You can also find more channel details here: <a href="https://github.com/strongloop/loopback-next/issues/5048" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback-next/issues/5048</a>.</p>]]></content:encoded>
            <category>Community</category>
            <category>Slack</category>
            <category>Q&amp;A</category>
        </item>
        <item>
            <title><![CDATA[How We Improved LoopBack REST Performance by 45%]]></title>
            <link>https://loopbackio.github.io/2020-improve-looopback-performance-uuid</link>
            <guid>2020-improve-looopback-performance-uuid</guid>
            <pubDate>Tue, 09 Jun 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>Recently, I measured the performance of LoopBack 4 and found an opportunity for an easy but significant improvement in the way how we are building per-request context instances.</p><p>I have been always interested in performance, from high-level design patterns like caching &amp; memoization, to micro-optimizations at language level (anybody remembers <a href="https://stackoverflow.com/a/44765284/69868" target="_blank" rel="noopener noreferrer">CrankShaftScript</a> from Node.js 0.10 days?), all the way down to Mechanical Sympathy.</p><p>Since we started rewritting LoopBack from scratch in 2016/17, our primary focus was on features; performance aspects were a bit off the radar. (Not entirely, we were careful to design our HTTP routing layer to avoid the low performance of regexp-matching approach used by Express.) Now that LoopBack 4 is pretty mature, I though it's a good time to take a quick look on how fast is our framework.</p><p>To quickly get a high-level overview, I installed <a href="https://clinicjs.org" target="_blank" rel="noopener noreferrer">Clinic.js</a> and benchmarked our <a href="https://loopback.io/doc/en/lb4/todo-list-tutorial.html" target="_blank" rel="noopener noreferrer">TodoList example application</a>. I used the following TodoList query (<code>filter</code>) for all benchmarks:</p><div class="codeBlockContainer_I0IT language-json theme-code-block"><div class="codeBlockContent_wNvx json"><pre tabindex="0" class="prism-code language-json codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"include"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"relation"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"todos"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>The filter value needs to be URL-encoded, producing the following URL to pass to Clinic.js - let's save it to a shell variable for later use.</p><div class="codeBlockContainer_I0IT language-shell theme-code-block"><div class="codeBlockContent_wNvx shell"><pre tabindex="0" class="prism-code language-shell codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token assign-left variable" style="color:#36acaa">URL</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"/todo-lists?filter=%7B%0A%20%20%22include%22%3A%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22relation%22%3A%20%22todos%22%0A%20%20%20%20%7D%0A%20%20%5D%0A%7D"</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="clinicjs-doctor">Clinic.js Doctor<a class="hash-link" href="#clinicjs-doctor" title="Direct link to heading">​</a></h2><p>The Doctor component performs an overall diagnosis looking for common anti-patterns. After installing Clinic.js globally, I ran the following command in <code>examples/todo-list</code> directory of loopback-next monorepo:</p><div class="codeBlockContainer_I0IT language-shell theme-code-block"><div class="codeBlockContent_wNvx shell"><pre tabindex="0" class="prism-code language-shell codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ clinic doctor --debug --autocannon </span><span class="token variable" style="color:#36acaa">$URL</span><span class="token plain"> -- </span><span class="token function" style="color:#d73a49">node</span><span class="token plain"> </span><span class="token builtin class-name">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Server is running at http://127.0.0.1:3000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Running 10s </span><span class="token builtin class-name">test</span><span class="token plain"> @ http://localhost:3000/todo-lists?filter</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> connections</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">18k requests </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">11</span><span class="token plain">.05s, </span><span class="token number" style="color:#36acaa">11.1</span><span class="token plain"> MB </span><span class="token builtin class-name">read</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Analysing data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Generated HTML </span><span class="token function" style="color:#d73a49">file</span><span class="token plain"> is file:///</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">/todo-list/.clinic/41598.clinic-doctor.html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">You can use this </span><span class="token builtin class-name">command</span><span class="token plain"> to upload it:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">clinic upload .clinic/41598.clinic-doctor</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>The report says there were no issue detected, hooray!</p><img class="aligncenter size-full" src="{{site.url}}/blog-assets/2020/06/uuid-clinic-doctor.png"><p>A closer inspection shows that our process is consuming quite a lot of memory.  We don't have any memory leaks, which is most important. However, excessive allocations put more pressure on garbage collector which does impact application's performance. Let's set the memory usage aside for now and check how much time is the application spending on waiting for asynchronous operations.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="clinicjs-bubbleprof">Clinic.js Bubbleprof<a class="hash-link" href="#clinicjs-bubbleprof" title="Direct link to heading">​</a></h2><p>Quoting from <a href="https://www.thoughtworks.com/radar/languages-and-frameworks/clinic-js-bubbleprof" target="_blank" rel="noopener noreferrer">ThoughtWorks Technology Radar</a>:</p><blockquote><p>Clinic.js Bubbleprof represents visually the async operations in Node.js processes, drawing a map of delays in the application's flow. We like this tool because it helps developers to easily identify and prioritize what to improve in the code.</p></blockquote><p>Let's see how the bubbles look like for a LoopBack application!</p><div class="codeBlockContainer_I0IT language-shell theme-code-block"><div class="codeBlockContent_wNvx shell"><pre tabindex="0" class="prism-code language-shell codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ clinic bubbleprof --debug --autocannon </span><span class="token variable" style="color:#36acaa">$URL</span><span class="token plain"> -- </span><span class="token function" style="color:#d73a49">node</span><span class="token plain"> </span><span class="token builtin class-name">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Warning: The code is transpiled, bubbleprof does not support </span><span class="token builtin class-name">source</span><span class="token plain"> maps yet.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Server is running at http://127.0.0.1:3000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Running 10s </span><span class="token builtin class-name">test</span><span class="token plain"> @ http://localhost:3000/todo-lists?filter</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> connections</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2k requests </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain">.06s, </span><span class="token number" style="color:#36acaa">1.28</span><span class="token plain"> MB </span><span class="token builtin class-name">read</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Analysing data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Generated HTML </span><span class="token function" style="color:#d73a49">file</span><span class="token plain"> is file:///</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">/todo-list/.clinic/42229.clinic-bubbleprof.html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">You can use this </span><span class="token builtin class-name">command</span><span class="token plain"> to upload it:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">clinic upload .clinic/42229.clinic-bubbleprof</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>There isn't much to see in the report, the application spent less than 20ms waiting for async operations. I guess that was kind of expected considering that our example application is using in-memory storage and not communicating with any external service.</p><img class="aligncenter size-full" src="{{site.url}}/blog-assets/2020/06/uuid-clinic-bubbleprof.png"><h2 class="anchor anchorWithStickyNavbar_mojV" id="clinicjs-flame">Clinic.js Flame<a class="hash-link" href="#clinicjs-flame" title="Direct link to heading">​</a></h2><p>The last item in Clinic.js toolbox is Flame. Quoting from Clinic's website:</p><blockquote><p>(...)  flamegraphs are a visualization of profiled software, allowing the most frequent code-paths to be identified quickly and accurately. Clinic.js Flame is specifically for Node.js and is built into Clinic.js. It collects metrics using by CPU sampling, then tracks top-of-the-stack frequency and creates flamegraphs.</p></blockquote><p>Can we find anything interesting in the flames? Let's see.</p><div class="codeBlockContainer_I0IT language-shell theme-code-block"><div class="codeBlockContent_wNvx shell"><pre tabindex="0" class="prism-code language-shell codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ clinic flame --debug --autocannon </span><span class="token variable" style="color:#36acaa">$URL</span><span class="token plain"> -- </span><span class="token function" style="color:#d73a49">node</span><span class="token plain"> </span><span class="token builtin class-name">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Server is running at http://127.0.0.1:3000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Running 10s </span><span class="token builtin class-name">test</span><span class="token plain"> @ http://localhost:3000/todo-lists?filter</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> connections</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">15k requests </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain">.03s, </span><span class="token number" style="color:#36acaa">9.44</span><span class="token plain"> MB </span><span class="token builtin class-name">read</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Analysing data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Generated HTML </span><span class="token function" style="color:#d73a49">file</span><span class="token plain"> is file:///</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">/todo-list/.clinic/42454.clinic-flame.html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">You can use this </span><span class="token builtin class-name">command</span><span class="token plain"> to upload it:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">clinic upload .clinic/42454.clinic-flame</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>There is a lot of information packaged into a flame graph. Initially, Clinic.js is selecting the hottest frame - the stack that was observed most often while running the application. In our case, the hottest frame is pointing to Node.js internals dealing with writing data to streams.</p><img class="aligncenter size-full" src="{{site.url}}/blog-assets/2020/06/uuid-clinic-flame-1.png"><p>There isn't much we can do about Node.js streams. Our application is writing HTTP responses so it has to spend some time writing the data. The third hottest frame is <code>parseQueryStringValues</code> from the module <code>qs</code>, this is again not something we can easily improve. Let's remove all components except <code>dist</code> in the check-box list at the bottom of the screen to focus on LoopBack code only.</p><img class="aligncenter size-full" src="{{site.url}}/blog-assets/2020/06/uuid-clinic-flame-2.png"><p>Now the list of hot frames looks much more actionable! Here are the top entries:</p><ol><li><code>handle</code> in <code>sequence.js</code> was 11.4% of time on top of stack</li><li><code>buildLookupMap</code> in <code>relation.helpers.js</code> was 6.3% of time on top of stack</li><li><code>findByForeignKeys</code> in <code>relation.helpers.js</code> was 5.7% of time on top of stack</li></ol><p>And so the list goes on. The entry number 7 caught my attention: the application is spending 1.3% of the time in <code>generateName</code> from <code>context.js</code>.  That's suspicious, why is generating context names so expensive?</p><p>It turns out we are generating unique context names to make it easier to debug binding-related issues. Our initial implementation was based on <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)" target="_blank" rel="noopener noreferrer">UUID version 4 (random)</a> algorithm. Universally unique ids are great when you are aggregating debug logs from a mesh of microservices. However, most of the time, context names are just a hidden property of context instances that's not surfaced anywhere.  Applications shouldn't be paying performance tax for something they don't use. Let's see if we can find a better solution.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="uuid-alternatives">UUID Alternatives<a class="hash-link" href="#uuid-alternatives" title="Direct link to heading">​</a></h2><p>What other options are there to generate unique ids?</p><ul><li>We can use UUID version 1 that's based on date-time and MAC address.</li><li>If we didn't need universally unique values, then a simple counter (perhaps prefixed with the current process id) could be a viable alternative.</li><li>Surely somebody else must have encountered this problem before us. Aren't there any fast id generators on npmjs.com? Of course there are! The search for <a href="https://www.npmjs.com/search?q=fast%20unique%20id" target="_blank" rel="noopener noreferrer">"fast unique id"</a> returned
<a href="https://www.npmjs.com/package/hyperid" target="_blank" rel="noopener noreferrer">hyperid</a> as the best match.</li></ul><p>Let's compare the performance of these alternatives. I wrote a simple benchmark which you can find in this <a href="https://gist.github.com/bajtos/6343512b171156872d3b701b2c10a682" target="_blank" rel="noopener noreferrer">Gist</a> and measured the following data:</p><table><thead><tr><th>method</th><th align="right">ids/second</th></tr></thead><tbody><tr><td>numeric counter</td><td align="right"><code>11095k</code></td></tr><tr><td>hyperid</td><td align="right"><code>10234k</code></td></tr><tr><td>UUID v1</td><td align="right"><code>1649k</code></td></tr><tr><td>UUID v4</td><td align="right"><code>325k</code></td></tr></tbody></table><p>Initially, I wanted to use a numeric counter because it has the best performance. However, that would mean losing uniqueness of context names.  At the end, I decided to go with <code>hyperid</code>. It combines UUID v4 with a counter to achieve almost the same performance as the counter-only algorithm while preserving universal uniqueness of the generated ids.</p><p>To better measure the impact on performance, I created a small REST application that does not parse the query string and returns the response data directly, without going through <code>@loopback/repository</code>. Replacing <code>uuid/v4</code> with <code>hyperid</code> improved the performance of my test application from <code>~2.4k</code> requests/second to <code>~3.5k</code> requests/second on average. The average request latency has improved from <code>3.8ms</code> to <code>2.6ms</code>.</p><p>The pull request <a href="https://github.com/strongloop/loopback-next/pull/5628" target="_blank" rel="noopener noreferrer">loopback-next#5628</a> improving <code>generateName</code> performance has been already landed and will become publicly available in the next framework release.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="summary">Summary<a class="hash-link" href="#summary" title="Direct link to heading">​</a></h2><p>As the popular saying goes, performance is not a problem until it becomes a problem. Even if your project is not performance sensitive, it's still good to pay attention to how much resources it consumes at runtime.</p><ol><li><p>Watch for warning signs. Maybe an existing test has suddenly started to fail on a timeout? When that happens, try to take the hard path: investigate the problem, dig deep to find the root cause and fix it.</p></li><li><p>Measure, measure, measure. Always create a reproducible benchmark to measure the effect of the changes you are going to make. Performance tuning is full of surprises and not all changes are for better.</p></li><li><p>Know the tooling. Node.js is compatible with many tools provided by Chrome's Developer Tools, it provides also tracing functionality for a more fine-grained analysis. You can learn more in Node.js documentation, starting from <a href="https://nodejs.org/en/docs/guides/debugging-getting-started/" target="_blank" rel="noopener noreferrer">Debugging - Getting Started</a>, <a href="https://nodejs.org/en/docs/guides/simple-profiling/" target="_blank" rel="noopener noreferrer">Easy profiling for Node.js Applications</a> and <a href="https://nodejs.org/en/docs/guides/diagnostics-flamegraph/" target="_blank" rel="noopener noreferrer">Flame Graphs</a>.</p></li><li><p>Optimize hot paths. A semi-expensive function can become a performance problem when it's called for every incoming request.</p></li></ol><h2 class="anchor anchorWithStickyNavbar_mojV" id="call-to-action">Call to Action<a class="hash-link" href="#call-to-action" title="Direct link to heading">​</a></h2><p>LoopBack's success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here's how you can join us and help the project:</p><ul><li><a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">Join the community Slack chat</a></li><li><a href="https://github.com/strongloop/loopback-next/issues" target="_blank" rel="noopener noreferrer">Report issues</a>.</li><li><a href="https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contribute</a> code and documentation.</li><li><a href="https://github.com/strongloop/loopback-next/labels/good%20first%20issue" target="_blank" rel="noopener noreferrer">Open a pull request on one of our "good first issues"</a>.</li></ul>]]></content:encoded>
            <category>REST</category>
            <category>Performance</category>
        </item>
        <item>
            <title><![CDATA[LoopBack 4 May 2020 Milestone Update]]></title>
            <link>https://loopbackio.github.io/may-2020-milestone</link>
            <guid>may-2020-milestone</guid>
            <pubDate>Thu, 04 Jun 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>The completion of the migration epic would be the biggest news in May. Now LoopBack 3 users can find the migration guide <a href="https://loopback.io/doc/en/lb4/migration-overview.html" target="_blank" rel="noopener noreferrer">here</a>. Meanwhile, we have feature contributions and bug fixes happened across all the functional areas. </p><p>There are more than 20 community PRs merged in May and we really appreciate every community member's help. We set up community calls every four weeks to keep in touch with our maintainers. See the latest schedule and recording in <a href="https://github.com/strongloop/loopback-governance/issues/4" target="_blank" rel="noopener noreferrer">this story</a>.</p><p>Keep reading to learn about what happened in May.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="migration-epic">Migration Epic<a class="hash-link" href="#migration-epic" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="migrating-components">Migrating components<a class="hash-link" href="#migrating-components" title="Direct link to heading">​</a></h3><p>The migration guide for components, which is a powerful way to contribute any artifacts, is the last but most widely covered story in the migration epic. To make the migration guide easier to navigate, we split component-related instructions into several sub-sections as "project layout", "models, entities and repositories", "current context", "model mixins", "REST API endpoints". You can check the documentation <a href="https://loopback.io/doc/en/lb4/migration-extensions-overview.html" target="_blank" rel="noopener noreferrer">migration-extensions-overview</a> and its sub-pages to learn the details.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="migrating-loopback-3-tests-to-loopback-4">Migrating LoopBack 3 tests to LoopBack 4<a class="hash-link" href="#migrating-loopback-3-tests-to-loopback-4" title="Direct link to heading">​</a></h3><p>When a LoopBack 3 application is mounted in a LoopBack 4 project, its endpoints are exposed through the LoopBack 4's REST server. To reuse the existing LoopBack 3 tests, you can easily migrate them by following the instructions in <a href="https://github.com/strongloop/loopback-next/tree/master/examples/lb3-application#running-lb3-tests-from-lb4" target="_blank" rel="noopener noreferrer">example <code>lb3-application</code></a>. It covers how to set up clients to test requests and how to test runtime functions.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="features">Features<a class="hash-link" href="#features" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="preserving-prototype-for-toobject">Preserving prototype for toObject<a class="hash-link" href="#preserving-prototype-for-toobject" title="Direct link to heading">​</a></h3><p>LoopBack CRUD operations invoke <code>toObject</code> function internally to return a model instance. <code>toObject</code> converts a value to a plain object as DTO (Data transfer object). It returned a JSON representation before, which doesn't preserve the prototype of complicated types like <code>Date</code>, <code>ObjectId</code> but returned the value as a string instead. Now such values' prototypes are kept, for example:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">DATE</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name known-class-name class-name">Date</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'2020-05-01'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> created </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> repo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  createdAt</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">DATE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// The returned model instance has `createdAt` as type Date</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">expect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">created</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toObject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">to</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">deepEqual</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  createdAt</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">DATE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="express-middleware">Express Middleware<a class="hash-link" href="#express-middleware" title="Direct link to heading">​</a></h3><p>LookBack 4 leverages Express behind the scenes for its REST server implementation. We decided to not use Express middleware as-is but now we support integrating the middleware in different ways. You can invoke it explicitly in the sequence, or register it to be executed by <code>InvokeMiddleware</code> action, or use it as controller interceptors.</p><p>Page <a href="https://loopback.io/doc/en/lb4/Express-middleware.html" target="_blank" rel="noopener noreferrer">Express middlware</a> explains all the scenarios and usages. And page <a href="https://loopback.io/doc/en/lb4/Middleware.html" target="_blank" rel="noopener noreferrer">Middleware</a> provides the general knowledge of LoopBack 4 middleware.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="context-improvements">Context Improvements<a class="hash-link" href="#context-improvements" title="Direct link to heading">​</a></h3><ul><li><p>Function <code>createBindingFromClass</code> allow bindings to be created from dynamic value provider classes, for example: </p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">bind</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">tags</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">greeting</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'c'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">DynamicGreetingProvider</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">value</span><span class="token punctuation" style="color:#393A34">(</span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">inject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'currentUser'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> user</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">Hello, </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation keyword" style="color:#00009f">this</span><span class="token template-string interpolation punctuation" style="color:#393A34">.</span><span class="token template-string interpolation property-access">user</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// toDynamicValue() is used internally</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// A tag `{type: 'dynamicValueProvider'}` is added</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> binding </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">createBindingFromClass</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">GreetingProvider</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">binding</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div></li><li><p>A provider class can use dependency injection to receive resolution-related
metadata such as context and binding. But the overhead to wrap a factory
function is not desired for some use cases. <a href="https://github.com/strongloop/loopback-next/pull/5370" target="_blank" rel="noopener noreferrer">PR#5370</a> introduces a lightweight alternative using toDynamicValue as follows:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">ValueFactory</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/context'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// The factory function now have access extra metadata about the resolution</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> factory</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">ValueFactory</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token builtin">string</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> resolutionCtx </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">Hello, </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">resolutionCtx</span><span class="token template-string interpolation punctuation" style="color:#393A34">.</span><span class="token template-string interpolation property-access">context</span><span class="token template-string interpolation punctuation" style="color:#393A34">.</span><span class="token template-string interpolation property-access">name</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c">#</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation"></span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string interpolation">    resolutionCtx</span><span class="token template-string interpolation punctuation" style="color:#393A34">.</span><span class="token template-string interpolation property-access">binding</span><span class="token template-string interpolation punctuation" style="color:#393A34">.</span><span class="token template-string interpolation property-access">key</span><span class="token template-string interpolation"></span><br></span><span class="token-line" style="color:#393A34"><span class="token template-string interpolation">  </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c"> </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">resolutionCtx</span><span class="token template-string interpolation punctuation" style="color:#393A34">.</span><span class="token template-string interpolation property-access">options</span><span class="token template-string interpolation punctuation" style="color:#393A34">.</span><span class="token template-string interpolation property-access">session</span><span class="token template-string interpolation operator" style="color:#393A34">?.</span><span class="token template-string interpolation method function property-access" style="color:#d73a49">getBindingPath</span><span class="token template-string interpolation punctuation" style="color:#393A34">(</span><span class="token template-string interpolation punctuation" style="color:#393A34">)</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> b </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ctx</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">bind</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'msg'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toDynamicValue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">factory</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>  A benchmark is added to measure the performance of
different styles of context bindings in package <a href="https://github.com/strongloop/loopback-next/tree/master/benchmark" target="_blank" rel="noopener noreferrer">@loopback/benchmark</a>. You can run <code>npm run -s benchmark:context</code> to see the result.</p></li><li><p><a href="https://github.com/strongloop/loopback-next/pull/5378" target="_blank" rel="noopener noreferrer">PR#5378</a> introduced a model booter to automatically bind model classes to the application during boot. You can retrieve and inject model constructors using key <code>models.&lt;model_name&gt;</code>. For example:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">model</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">MyModel</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name maybe-class-name">Model</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">MyModelComponent</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  models </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token maybe-class-name">MyModel</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// you can get MyModel by `models.MyModel`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> modelCtor </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> myApp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token generic-function function" style="color:#d73a49">getSync</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name keyword" style="color:#00009f">typeof</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name maybe-class-name">MyModel</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'models.MyModel'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="build-improvements">Build Improvements<a class="hash-link" href="#build-improvements" title="Direct link to heading">​</a></h3><ul><li><p>We upgraded the dependency to <a href="mailto:TypeScript@3.9.2." target="_blank" rel="noopener noreferrer">TypeScript@3.9.2.</a> Code adjustments including <code>null</code> check and type intersection were made to be compatible with the new version. You can check <a href="https://github.com/strongloop/loopback-next/pull/5041/commits" target="_blank" rel="noopener noreferrer">PR#5041</a> for more details.</p></li><li><p>Replace eslint rule <code>no-invalid-this</code> with TypeScript-aware one: In code accessing <code>this</code> variable, eslint-ignore comment for <code>no-invalid-this</code> will no longer work. You can either
change those comments to disable <code>@typescript-eslint/no-invalid-this</code>,  or better tell TypeScript what is the type of <code>this</code> in your function.</p><p>  A TypeScript example:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">Suite</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'mocha'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">describe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'my mocha suite'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Suite</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">timeout</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">it</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'is slow'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Mocha</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">Context</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">timeout</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>  A JavaScript example:</p><div class="codeBlockContainer_I0IT language-js theme-code-block"><div class="codeBlockContent_wNvx js"><pre tabindex="0" class="prism-code language-js codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">describe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'my mocha suite'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/** @this {Mocha.Suite} */</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">timeout</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">it</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'is slow'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/** @this {Mocha.Context} */</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">timeout</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div></li><li><p>Remove hand-written index files: We removed the root level dummy index files and changed the entry point of project to be the index file inside <code>src</code> folder. An example of the latest layout of a package can be found in the <a href="https://github.com/strongloop/loopback-next/tree/master/examples/todo" target="_blank" rel="noopener noreferrer">Todo application</a>.</p></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="application-booter">Application Booter<a class="hash-link" href="#application-booter" title="Direct link to heading">​</a></h3><ul><li><p>You can register a booter to boot a sub-application as:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">MainAppWithSubAppBooter</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name maybe-class-name">BootMixin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">Application</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">constructor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">projectRoot</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> __dirname</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// boot a sub-application `app`, its bindings will be added as well</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">applicationBooter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">app</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="documentation-and-blog">Documentation and Blog<a class="hash-link" href="#documentation-and-blog" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="what-loopback-can-offer-on-top-of-express">What LoopBack can offer on top of Express<a class="hash-link" href="#what-loopback-can-offer-on-top-of-express" title="Direct link to heading">​</a></h3><p>LoopBack is a framework built on top of Express. It comes packed with tools, features, and capabilities that enables rapid API and micro-services development and easy maintenance. Last month we published a blog summarizing the points that make LoopBack a compelling choice for Express developers when it comes to API development. You can read <a href="https://strongloop.com/strongblog/express-to-loopback/" target="_blank" rel="noopener noreferrer">this blog</a> to see how LoopBack can bring Express to the next level.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="managing-loopback-apis-with-ibm-apiconnect">Managing LoopBack APIs with IBM APIConnect<a class="hash-link" href="#managing-loopback-apis-with-ibm-apiconnect" title="Direct link to heading">​</a></h3><p>LoopBack 4 application can integrate with API Connect framework. We've prepared an article on how you can take the APIs created from LoopBack and import them into API Connect for API management. Stay tuned for the published article.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="setting-debug-string">Setting Debug String<a class="hash-link" href="#setting-debug-string" title="Direct link to heading">​</a></h3><p>Documentation <a href="https://loopback.io/doc/en/lb4/Setting-debug-strings.html" target="_blank" rel="noopener noreferrer">setting debug string</a> explains the usage of running a LoopBack 4 application with debug string turned on. You can check the documentation above to learn the debug string pattern and the format in each package.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="strong-error-handler">Strong Error Handler<a class="hash-link" href="#strong-error-handler" title="Direct link to heading">​</a></h3><p>As a dependency of <a href="https://github.com/strongloop/loopback-next/tree/master/packages/rest" target="_blank" rel="noopener noreferrer"><code>@loopback/rest</code></a>, package <code>strong-error-handler</code> is an error handler for use in both development (debug) and production environments. You can use it to customize the error rejection in the LoopBack 4 sequence. For its detailed usage, please read the documentation <a href="https://loopback.io/doc/en/lb4/Using-strong-error-handler.html" target="_blank" rel="noopener noreferrer">using string error handler</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="postgresql-connector">Postgresql Connector<a class="hash-link" href="#postgresql-connector" title="Direct link to heading">​</a></h3><p>We've been sharing the connector documentation with LB3, which might be confusing, especially for new LB4 users. We updated the PostgreSQL connector page and also the tutorial. By walking you through the steps of creating a LB4 application and connecting to the PostgreSQL database, we hope the new tutorial helps new users to pick up LoopBack 4 better.</p><p>You can read page <a href="https://loopback.io/doc/en/lb4/Connecting-to-PostgreSQL.html" target="_blank" rel="noopener noreferrer">connecting to PostgreSQL</a> to follow the tutorial.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="youtube-videos">Youtube Videos<a class="hash-link" href="#youtube-videos" title="Direct link to heading">​</a></h2><p>For creating tutorials, we have more materials than documentations. Last month, one of our core maintainers <a href="https://github.com/bajtos" target="_blank" rel="noopener noreferrer">Miroslav</a> published two video tutorials on <a href="https://www.youtube.com/channel/UCR8LLOxVNwSEWLMqoZzQNXw" target="_blank" rel="noopener noreferrer">our StrongLoop YouTube channel</a>:</p><ul><li>How to reuse LoopBack repository code: <a href="https://www.youtube.com/watch?v=s2yDaKiNYCg" target="_blank" rel="noopener noreferrer">Click to watch the video</a></li><li>Migrate LoopBack 4 datasource config to TypeScript: <a href="https://www.youtube.com/watch?v=S3BKXh7wDYE" target="_blank" rel="noopener noreferrer">Click to watch the video</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="authentication">Authentication<a class="hash-link" href="#authentication" title="Direct link to heading">​</a></h2><p>There are several documentation and user experience improvements happened this month to make the authentication system more automatic and easy to use:</p><ul><li><p>Added example <a href="https://github.com/strongloop/loopback-next/tree/master/examples/todo-jwt" target="_blank" rel="noopener noreferrer"><code>@loopback/todo-jwt</code></a> to demo enabling JWT authentication in the Todo application. Its corresponding tutorial <a href="https://loopback.io/doc/en/lb4/Authentication-Tutorial.html" target="_blank" rel="noopener noreferrer">JWT authentication tutorial</a> is coming soon.</p></li><li><p>Added security specification enhancer in <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt" target="_blank" rel="noopener noreferrer">@loopback/authentication-jwt</a> to automatically bind the JWT scheme and global security specification to application. You don't need to manually add them in the application constructor anymore. The updated usage is documented in the <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt#usage" target="_blank" rel="noopener noreferrer">README.md</a> file.</p></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="june-milestones">June Milestones<a class="hash-link" href="#june-milestones" title="Direct link to heading">​</a></h2><p>This month, we would like to work on the remaining items for the migration guide epic, documentation improvement and more. For more details, take a look at our <a href="https://github.com/strongloop/loopback-next/issues/5607" target="_blank" rel="noopener noreferrer">June milestone list on GitHub</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="call-to-action">Call to Action<a class="hash-link" href="#call-to-action" title="Direct link to heading">​</a></h2><p>In 2020, we look forward to helping you and seeing you around! LoopBack's success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here's how you can join us and help the project:</p><ul><li><a href="https://github.com/strongloop/loopback-next/issues" target="_blank" rel="noopener noreferrer">Report issues</a>.</li><li><a href="https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contribute</a> code and documentation.</li><li><a href="https://github.com/strongloop/loopback-next/labels/good%20first%20issue" target="_blank" rel="noopener noreferrer">Open a pull request on one of our "good first issues"</a>.</li><li><a href="https://github.com/strongloop/loopback-next/issues/110" target="_blank" rel="noopener noreferrer">Join</a> our user group.</li></ul>]]></content:encoded>
            <category>Milestone update</category>
        </item>
        <item>
            <title><![CDATA[How to reuse custom LoopBack Repository code]]></title>
            <link>https://loopbackio.github.io/2020-share-repository-code</link>
            <guid>2020-share-repository-code</guid>
            <pubDate>Tue, 02 Jun 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>When building a LoopBack 4 application, we often need to tweak or improve the default data access behavior provided by the framework. It's usually desirable to apply the same set of customizations for multiple models, possibly across several microservices. In this post, I'd like to share a few tips and tricks for reusing such repository code.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="using-a-repository-base-class">Using a Repository Base Class<a class="hash-link" href="#using-a-repository-base-class" title="Direct link to heading">​</a></h2><p>In this approach, you insert a new repository class (the Repository Base Class, e.g. <code>AuditableRepository</code>) between your model-specific repository class (e.g. <code>ProductRepository</code>) and the repository class provided by the framework (typically <code>DefaultCrudRepository</code>). The base class will hold any code you want to reuse in multiple model-specific repositories.</p><p>A week ago, I recorded a screencast showing the concept of Repository base classes in practice, you can watch it here:</p><iframe width="560" height="315" src="https://www.youtube.com/embed/s2yDaKiNYCg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"></iframe><p>The first step is to create a new source code file and implement an empty Repository Base Class. It's important to use <code>.repository.base.ts</code> suffix in the file name, this will allow <code>lb4 repository</code> to recognize the file as contributing a base class.</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// src/repositories/auditing.repository.base.ts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"></span><br></span><span class="token-line" style="color:#393A34"><span class="token imports">  </span><span class="token imports maybe-class-name">DefaultCrudRepository</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"></span><br></span><span class="token-line" style="color:#393A34"><span class="token imports">  </span><span class="token imports maybe-class-name">Entity</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"></span><br></span><span class="token-line" style="color:#393A34"><span class="token imports">  juggler</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"></span><br></span><span class="token-line" style="color:#393A34"><span class="token imports"></span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/repository'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">AuditingRepository</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">  </span><span class="token class-name constant" style="color:#36acaa">T</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:#00009f">extends</span><span class="token class-name"> </span><span class="token class-name maybe-class-name">Entity</span><span class="token class-name punctuation" style="color:#393A34">,</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">  </span><span class="token class-name constant" style="color:#36acaa">ID</span><span class="token class-name punctuation" style="color:#393A34">,</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">  </span><span class="token class-name maybe-class-name">Relations</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:#00009f">extends</span><span class="token class-name"> object </span><span class="token class-name operator" style="color:#393A34">=</span><span class="token class-name"> </span><span class="token class-name punctuation" style="color:#393A34">{</span><span class="token class-name punctuation" style="color:#393A34">}</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name"></span><span class="token class-name operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name maybe-class-name">DefaultCrudRepository</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name constant" style="color:#36acaa">T</span><span class="token class-name punctuation" style="color:#393A34">,</span><span class="token class-name"> </span><span class="token class-name constant" style="color:#36acaa">ID</span><span class="token class-name punctuation" style="color:#393A34">,</span><span class="token class-name"> </span><span class="token class-name maybe-class-name">Relations</span><span class="token class-name operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// put the shared code here</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>You should also add an entry to <code>src/repositories/index.ts</code> file to re-export the new class:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// src/repositories/index.ts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token exports operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'./auditing.repository.base'</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>When you run <code>lb4 repository</code> command now, it will find our new base class and offer it in the prompts:</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ lb4 repository</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">? Please select the datasource DbDatasource</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">? Select the model(s) you want to generate a repository for Product</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">? Please select the repository base class (Use arrow keys)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">❯ DefaultCrudRepository (Legacy juggler bridge)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ----- Custom Repositories -----</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  AuditingRepository</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>I will not go into details on implementing custom persistence behavior here, please watch the screencast to learn how to create a repository class that sets the model property <code>modifiedBy</code> to the currently authenticated user on every write operation.</p><p>Once you have the repository base class implemented, you may want to share it between multiple projects (e.g. microservices). I recommend creating a LoopBack 4 extension providing the base class and packaging the extension as a standalone npm module..</p><ol><li>Create a new LoopBack 4 extension using <code>lb4 extension</code></li><li>Move <code>src/repositories/auditing.repository.base.ts</code> file to the extension (you can use the same file name and path, i.e. <code>src/repositories/auditing.repository.base.ts</code>)</li><li>In the extension, update <code>src/repositories/index.ts</code> and <code>src/index.ts</code> to re-export (new) artifacts.</li><li>Publish the extension to your (private) npm registry or add it as a new package to your monorepo.</li></ol><p>In order to use the repository base class from the extension in an application project, we have a bit of work to do. At the moment, <code>lb4 repository</code> does not scan dependencies in <code>node_modules</code> for repository base classes. To make the base class discoverable by LoopBack's CLI, you can add a tiny wrapper file to your application into a location discoverable by the CLI. Implementation-wise, the wrapper just re-exports the base class provided by the extension.</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// src/repositories/auditing.repository.base.ts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token exports punctuation" style="color:#393A34">{</span><span class="token exports maybe-class-name">AuditingRepository</span><span class="token exports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'my-extension-name'</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>That's it! Now you can easily create new model-specific repositories using <code>lb4 repository</code> and select your shared repository as the base class.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="using-a-repository-mixin">Using a Repository Mixin<a class="hash-link" href="#using-a-repository-mixin" title="Direct link to heading">​</a></h2><p>While easy to use, Repository Base Classes have few shortcomings too.</p><ol><li><p>JavaScript does not support multiple inheritance, thus it's not possible to combine behavior from multiple repository base classes in the same model-specific repository class.</p></li><li><p>Inheritance-based reuse is considered to be an anti-pattern in Object Oriented Design; it's recommended to use composition instead ("prefer composition over inheritance").</p></li></ol><p>Let's take a look on how to use Mixins to share bits of repository code via composition.</p><p>Instead of creating a repository base class, we will create a repository mixin using the <a href="https://loopback.io/doc/en/lb4/Mixin.html" target="_blank" rel="noopener noreferrer">mixin class pattern</a>.</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">MixinTarget</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/core'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">CrudRepository</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"> </span><span class="token imports maybe-class-name">Model</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/repository'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">AuditingRepositoryMixin</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token generic-function generic class-name">  </span><span class="token generic-function generic class-name constant" style="color:#36acaa">M</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name keyword" style="color:#00009f">extends</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name maybe-class-name">Model</span><span class="token generic-function generic class-name punctuation" style="color:#393A34">,</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token generic-function generic class-name">  </span><span class="token generic-function generic class-name constant" style="color:#36acaa">R</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name keyword" style="color:#00009f">extends</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name maybe-class-name">MixinTarget</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name maybe-class-name">CrudRepository</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name constant" style="color:#36acaa">M</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;&gt;</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token generic-function generic class-name"></span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">superClass</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">R</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name keyword" style="color:#00009f">extends</span><span class="token plain"> superClass </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// put the shared code here</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Because <code>lb4 repository</code> does not support repository mixins yet, you have to edit model repository classes manually to apply your new mixin.</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">Constructor</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"> inject</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/core'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">DefaultCrudRepository</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/repository'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">DbDataSource</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'../datasources'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">AuditingRepositoryMixin</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'../mixins/auditing.repository-mixin'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">Product</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"> </span><span class="token imports maybe-class-name">ProductRelations</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'../models'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">ProductRepository</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name maybe-class-name">AuditingRepositoryMixin</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">  </span><span class="token class-name maybe-class-name">Product</span><span class="token class-name punctuation" style="color:#393A34">,</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">  </span><span class="token class-name maybe-class-name">Constructor</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">    </span><span class="token class-name maybe-class-name">DefaultCrudRepository</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">      </span><span class="token class-name maybe-class-name">Product</span><span class="token class-name punctuation" style="color:#393A34">,</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">      </span><span class="token class-name keyword" style="color:#00009f">typeof</span><span class="token class-name"> </span><span class="token class-name maybe-class-name">Product</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name property-access">prototype</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name property-access">id</span><span class="token class-name punctuation" style="color:#393A34">,</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">      </span><span class="token class-name maybe-class-name">ProductRelations</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">    </span><span class="token class-name operator" style="color:#393A34">&gt;</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">  </span><span class="token class-name operator" style="color:#393A34">&gt;</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name"></span><span class="token class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">DefaultCrudRepository</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">constructor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">inject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'datasources.db'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> dataSource</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">DbDataSource</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">Product</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dataSource</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>We are discussing CLI support for repository mixins in <a href="https://github.com/strongloop/loopback-next/issues/5565" target="_blank" rel="noopener noreferrer">loopback-next#5565</a>, please leave a comment to let us know if you are interested in this feature.</p><p>Mixins are easy to share via LoopBack extensions too:</p><ol><li>Create a new LoopBack 4 extension using <code>lb4 extension</code></li><li>Move <code>src/mixins/auditing.repository-mixin.ts</code> file to the extension</li><li>In the extension, update <code>src/mixins/index.ts</code> and <code>src/index.ts</code> to re-export (new) artifacts.</li><li>Publish the extension to your (private) npm registry or add it as a new package to your monorepo.</li><li>In your application, update <code>import</code> statements to import the shared repository mixin from the extension.</li></ol><h2 class="anchor anchorWithStickyNavbar_mojV" id="composing-mixins-together">Composing mixins together<a class="hash-link" href="#composing-mixins-together" title="Direct link to heading">​</a></h2><p>When using a repository base class, it's easy to apply all project-specific behavior via a single base class. We can build a composite mixin to achieve the same easy of use with mixins too.</p><p>Let's say we already have <code>AuditingRepositoryMixin</code> and <code>TimeStampRepositoryMixin</code> implemented, and now we want to create <code>MyProjectRepositoryMixin</code> that will apply those two mixins, so that repository classes in our project don't have to repeat the list of mixins to apply.</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// src/mixins/my-project.repository-mixin.ts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token generic-function function" style="color:#d73a49">MyProjectRepositoryMixin</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token generic-function generic class-name">  </span><span class="token generic-function generic class-name constant" style="color:#36acaa">M</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name keyword" style="color:#00009f">extends</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name maybe-class-name">Model</span><span class="token generic-function generic class-name punctuation" style="color:#393A34">,</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token generic-function generic class-name">  </span><span class="token generic-function generic class-name constant" style="color:#36acaa">R</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name keyword" style="color:#00009f">extends</span><span class="token generic-function generic class-name"> </span><span class="token generic-function generic class-name maybe-class-name">MixinTarget</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name maybe-class-name">CrudRepository</span><span class="token generic-function generic class-name operator" style="color:#393A34">&lt;</span><span class="token generic-function generic class-name constant" style="color:#36acaa">M</span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;&gt;</span><span class="token generic-function generic class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token generic-function generic class-name"></span><span class="token generic-function generic class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">superClass</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">R</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">AuditingRepositoryMixin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function maybe-class-name" style="color:#d73a49">TimeStampRepositoryMixin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">superClass</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="typescript-limitations">TypeScript limitations<a class="hash-link" href="#typescript-limitations" title="Direct link to heading">​</a></h2><p>Now you may be thinking: can we define a repository base class that would be recognized by <code>lb4 repository</code> and would apply all required mixins?  Unfortunately, the answer is NO.</p><p>Consider the following code:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// src/repositories/base.repository.base.ts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">BaseRepository</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">  </span><span class="token class-name constant" style="color:#36acaa">T</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:#00009f">extends</span><span class="token class-name"> </span><span class="token class-name maybe-class-name">Entity</span><span class="token class-name punctuation" style="color:#393A34">,</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">  </span><span class="token class-name constant" style="color:#36acaa">ID</span><span class="token class-name punctuation" style="color:#393A34">,</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">  </span><span class="token class-name maybe-class-name">Relations</span><span class="token class-name"> </span><span class="token class-name keyword" style="color:#00009f">extends</span><span class="token class-name"> object </span><span class="token class-name operator" style="color:#393A34">=</span><span class="token class-name"> </span><span class="token class-name punctuation" style="color:#393A34">{</span><span class="token class-name punctuation" style="color:#393A34">}</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name"></span><span class="token class-name operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name maybe-class-name">MyProjectRepositoryMixin</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">  </span><span class="token class-name constant" style="color:#36acaa">T</span><span class="token class-name punctuation" style="color:#393A34">,</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">  </span><span class="token class-name maybe-class-name">Constructor</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name maybe-class-name">DefaultCrudRepository</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name constant" style="color:#36acaa">T</span><span class="token class-name punctuation" style="color:#393A34">,</span><span class="token class-name"> </span><span class="token class-name constant" style="color:#36acaa">ID</span><span class="token class-name punctuation" style="color:#393A34">,</span><span class="token class-name"> </span><span class="token class-name maybe-class-name">Relations</span><span class="token class-name operator" style="color:#393A34">&gt;&gt;</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name"></span><span class="token class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">DefaultCrudRepository</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// empty class</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>TypeScript reports the following error during compilation:</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">error TS2562: Base class expressions cannot reference class type parameters.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>You can learn more about this problem and the reasoning for the current compiler behavior in GitHub issue <a href="https://github.com/Microsoft/TypeScript/issues/26154" target="_blank" rel="noopener noreferrer">Mixin does not allow Generic</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>In this post, I explained how to extract bits of Repository code into a reusable form and how to share them by creating a new LoopBack extension. We discussed two options: an inheritance-based approach that uses Repository Base Class and a composition-based approach that uses Repository Mixin. Along the way, we discovered a few areas where TypeScript and LoopBack could improve the developer experience.</p><p>I hope you will find these techniques useful.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="call-to-action">Call to Action<a class="hash-link" href="#call-to-action" title="Direct link to heading">​</a></h2><p>LoopBack's success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here's how you can join us and help the project:</p><ul><li>Join the discussion in <a href="https://github.com/strongloop/loopback-next/issues/5565" target="_blank" rel="noopener noreferrer">loopback-next#5565</a> and let us know if you are interested in CLI support for repository mixins.</li><li><a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">Join the community Slack chat</a></li><li><a href="https://github.com/strongloop/loopback-next/issues" target="_blank" rel="noopener noreferrer">Report issues</a>.</li><li><a href="https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contribute</a> code and documentation.</li><li><a href="https://github.com/strongloop/loopback-next/labels/good%20first%20issue" target="_blank" rel="noopener noreferrer">Open a pull request on one of our "good first issues"</a>.</li></ul>]]></content:encoded>
            <category>Feature</category>
            <category>Repository</category>
        </item>
        <item>
            <title><![CDATA[LoopBack - Taking Express to the Next Level]]></title>
            <link>https://loopbackio.github.io/express-to-loopback</link>
            <guid>express-to-loopback</guid>
            <pubDate>Wed, 27 May 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>Express is the most popular Node.js package for web server development. Its lightweight, extensible, and flexible nature makes it a perfect fit for projects, small and large, from simple websites to complex web frameworks.</p><p>LoopBack is a framework built on top of Express. It comes packed with tools, features, and capabilities that enables rapid API and microservices development and easy maintenance.</p><p>In this post we will explore the points that make LoopBack a compelling choice for Express developers when it comes to API development.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="express-and-loopback-are-not-mutually-exclusive">Express and LoopBack Are Not Mutually Exclusive<a class="hash-link" href="#express-and-loopback-are-not-mutually-exclusive" title="Direct link to heading">​</a></h2><p>First off, let's make it clear that Express and LoopBack are not mutually exclusive. You can very well use an existing Express app or middleware with LoopBack. This capability enables gradual migration from Express to LoopBack, that way you don't have to throw away your existing code and re-write everything from scratch. </p><img class="aligncenter size-full" src="{{site.url}}/blog-assets/2020/05/express-loopback.png"><h3 class="anchor anchorWithStickyNavbar_mojV" id="extending-an-existing-express-application-with-loopback">Extending an Existing Express Application With LoopBack<a class="hash-link" href="#extending-an-existing-express-application-with-loopback" title="Direct link to heading">​</a></h3><p>To use an existing Express app with LoopBack, you can mount the LoopBack app on your Express app.</p><p>For a tutorial on how to do that, refer to "<a href="https://loopback.io/doc/en/lb4/express-with-lb4-rest-tutorial.html" target="_blank" rel="noopener noreferrer">Creating an Express Application with LoopBack REST API</a>".</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="using-express-middleware-with-loopback">Using Express Middleware With LoopBack<a class="hash-link" href="#using-express-middleware-with-loopback" title="Direct link to heading">​</a></h3><p>LoopBack provides three broads ways for loading Express middleware.</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="1-mountexpressrouter">1. mountExpressRouter()<a class="hash-link" href="#1-mountexpressrouter" title="Direct link to heading">​</a></h4><p>The <code>mountExpressRouter()</code> method of the <a href="https://loopback.io/doc/en/lb4/apidocs.rest.restapplication.html" target="_blank" rel="noopener noreferrer">RestApplication</a> and <a href="https://loopback.io/doc/en/lb4/apidocs.rest.restserver.html" target="_blank" rel="noopener noreferrer">RestServer</a> class mounts an express router or application at a path, and supports OpenAPI specification for describing the endpoints provided by the router. It is the preferred choice for mounting data endpoints, like an existing REST API app.</p><p>For more details refer to "<a href="https://loopback.io/doc/en/lb4/Routes.html#mounting-an-express-router" target="_blank" rel="noopener noreferrer">Mounting an Express Router</a>".</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="2-invokemiddleware">2. invokeMiddleware()<a class="hash-link" href="#2-invokemiddleware" title="Direct link to heading">​</a></h4><p>Express middleware can also be plugged into the <a href="https://loopback.io/doc/en/lb4/Sequence.html" target="_blank" rel="noopener noreferrer">Sequence</a> class using the <code>invokeMiddleware()</code> action. This approach is recommended when you are not looking beyond a hard-coded list of middleware, when it comes to flexibility and configurability.</p><p>Refer to "<a href="https://loopback.io/doc/en/lb4/Express-middleware.html#use-express-middleware-within-the-sequence-of-actions" target="_blank" rel="noopener noreferrer">Use Express middleware within the sequence of actions</a>" for more details.</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="3-middleware-as-interceptors">3. Middleware as Interceptors<a class="hash-link" href="#3-middleware-as-interceptors" title="Direct link to heading">​</a></h4><p>Express middleware can act as interceptors to controller methods at global, class, or method levels. It is not as simple as the previous two methods, but it provides the most configurability.</p><p>The following helper methods from the <code>@loopback/express</code> package enable Express middleware to be wrapped into LoopBack interceptors.</p><ul><li><code>toInterceptor</code> - Wraps an Express handler function to a LoopBack interceptor function</li><li><code>createInterceptor</code> - Creates a LoopBack interceptor function from an Express factory function with configuration</li><li><code>defineInterceptorProvider</code> - Creates a LoopBack provider class for interceptors from an Express factory function with configuration. This is only necessary that injection and/or change of configuration is needed. The provider class then needs to be bound to the application context hierarchy as a global or local interceptor.</li></ul><p>Refer to "<a href="https://loopback.io/doc/en/lb4/Middleware.html" target="_blank" rel="noopener noreferrer">Middleware</a>" and "<a href="https://loopback.io/doc/en/lb4/Express-middleware.html#use-express-middleware-as-interceptors-for-controllers" target="_blank" rel="noopener noreferrer">Use Express middleware as interceptors for controllers</a>" for more information.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="what-does-loopback-offer-on-top-of-express">What Does LoopBack Offer on Top of Express?<a class="hash-link" href="#what-does-loopback-offer-on-top-of-express" title="Direct link to heading">​</a></h2><p>Express is a very extensible but bare-bones web server implementation. What LoopBack offers on top of Express is a set of tools and capabilities that make rapid API and microservices development possible and maintenance easy. REST API and microservices development with Express is possible but after a certain level of complexity, it can become a bug-ridden repetitive exercise for each new project. Using a REST API framework like LoopBack cuts down the development time and reduces maitenance headache.</p><p>Here are some of the points that makes LoopBack an excellent API development framework for Express developers.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="1-rest-api-specialist">1. REST API Specialist<a class="hash-link" href="#1-rest-api-specialist" title="Direct link to heading">​</a></h3><p>LoopBack is specially crafted for REST API development. The framework's architecture, developer experience, and everything around it are designed primarily with REST API on mind.</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="i-model-view-controller-mvc-pattern">i. Model-View-Controller (MVC) Pattern<a class="hash-link" href="#i-model-view-controller-mvc-pattern" title="Direct link to heading">​</a></h4><p><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" target="_blank" rel="noopener noreferrer">MVC</a> is a popular software design pattern that seprates the internal representation of data, implementation of access to this data, and what is presented to the client. This enables clear decoupling of the components that make up the application, which in turn leads to fewer bugs and better management of the development process.</p><p>LoopBack implements the MVC pattern. The models are defined in model files, controllers provide the REST API interface, and views are JSON objects returned by the controller. This not only allows modular development of the project, but also prevents the codebase from getting messy and unmanageable as the project grows.</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="ii-repository-pattern">ii. Repository Pattern<a class="hash-link" href="#ii-repository-pattern" title="Direct link to heading">​</a></h4><p><a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design#the-repository-pattern" target="_blank" rel="noopener noreferrer">Repository pattern</a> is an abstraction for data access logic. It is a great way to decouple data access details from models.</p><p>In LoopBack, model files define only the shape and properties of models, connection and queries are handled by repositories which are bound to the models.</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="iii-openapi">iii. OpenAPI<a class="hash-link" href="#iii-openapi" title="Direct link to heading">​</a></h4><p>LoopBack uses <a href="http://spec.openapis.org/oas/v3.0.3" target="_blank" rel="noopener noreferrer">OpenAPI specification</a> for describing the data request and response formats. This highly descriptive standard specification greatly reduces the friction involved in the structural aspect of API development and consumption.</p><p>LoopBack exposes an OpenAPI specification file created out of the controllers in the app, which is essentially the documentation of the whole REST API of the app.</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="iv-crud">iv. CRUD<a class="hash-link" href="#iv-crud" title="Direct link to heading">​</a></h4><p>With a <a href="https://loopback.io/doc/en/lb4/DataSources.html" target="_blank" rel="noopener noreferrer">datasource</a> defined and configured, once a model and its corresponding repository and controller are created, a <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete" target="_blank" rel="noopener noreferrer">CRUD</a> functionality is automatically available for the model without any additional work.</p><p>The auto-generated functionality and implementation can be modified by editing the controller and/or the respository files of the model.</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="v-support-for-numerous-databases">v. Support for Numerous Databases<a class="hash-link" href="#v-support-for-numerous-databases" title="Direct link to heading">​</a></h4><p>Configuring database connectivity and executing queries is one of the most crucial tasks when developing APIs. With the numerous database options available, writing optimal queries, and maybe even switching to a different database altogether can become a very tedious and time-consuming task.</p><p>LoopBack provides an abstraction for database access using <a href="https://loopback.io/doc/en/lb4/DataSources.html" target="_blank" rel="noopener noreferrer">datasources</a>. All you have to do is select the database you want to use for your app and provide the connectivity details. LoopBack then takes care of making the connection and running the queries in the context of a REST API implementation.</p><p>Any time you want to switch to a different database, it is just a matter to speciying a new datasource. You don't have to worry about re-writing the queries, LoopBack takes care of it for you.</p><p>The following datasources are supported by LoopBack: In-memory db, In-memory key-value, IBM Object Storage, IBM Db2 (for Linux, Unix, Windows), IBM Db2 for i, IBM Db2 for z/OS, IBM DashDB, IBM MQ Light, IBM Cloudant DB, Couchdb 2.x, IBM WebSphere eXtreme Scale key-value, Cassandra, gRPC, Redis, MongoDB, MySQL, PostgreSQL, OracleDB, Microsoft SQL, and z/OS Connect Enterprise Edition.</p><p>Non-database datasources supported by LoopBack includes: OpenAPI, REST services, SOAP webservices, Email, and ElasticSearch.</p><p>Community supported datasources includes: Couchbase, Neo4j, Twilio, Kafka, and SAP HANA.</p><p>This wide of array of datasources covers almost all the popular databases used for REST API development, which significantly reduces the development time and effort in the database department.</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="vi-integration-capabilities-with-external-apis">vi. Integration Capabilities With External APIs<a class="hash-link" href="#vi-integration-capabilities-with-external-apis" title="Direct link to heading">​</a></h4><p>Apart from using the non-database datasources provided by LoopBack, you can create your own <a href="https://loopback.io/doc/en/lb4/Services.html" target="_blank" rel="noopener noreferrer">services</a> for connecting to external REST/SOAP/gRPC APIs.</p><p>These services can then be used in the controllers, effectively creating an OpenAPI-compliant proxy to those remote services. This usage scenario is perfect for proving a custom interface to an existing (legacy) API.</p><img class="aligncenter size-full" src="{{site.url}}/blog-assets/2020/05/req-res-high-level.png"><h3 class="anchor anchorWithStickyNavbar_mojV" id="2-dependency-injection">2. Dependency Injection<a class="hash-link" href="#2-dependency-injection" title="Direct link to heading">​</a></h3><p>Conventionally, dependencies are passed as function parameters. This method works fine if the dependency is used only in the invoked function, however it can get pretty complex and unwieldy in certain scenarios because the dependency parameter is a factor that prevents the caller and the called function from being <a href="https://en.wikipedia.org/wiki/Loose_coupling" target="_blank" rel="noopener noreferrer">loosely coupled</a>.</p><p>Imagine, a dependency is used within a function within a function within a function within a function. You will need to pass the dependency from the called function to the next function to the next function to the next function. Now imagine, the dependency has been changed to a different object in one or more places. You will now have to change it in the "top" function and all the places where it was being passed around. It is a mess.</p><p>Enter <a href="https://en.wikipedia.org/wiki/Dependency_injection" target="_blank" rel="noopener noreferrer">dependency injection</a> (DI). Dependency injection enables dependent code to inject the dependencies themselves, instead of relying on the caller function to pass the dependency in function arguments. That way, any time something changes, it never includes the caller. The caller and called functions are loosely coupled.</p><p>LoopBack's <a href="https://loopback.io/doc/en/lb4/Context.html" target="_blank" rel="noopener noreferrer">Context</a> object is a DI container. It makes it possible to inject dependencies in classes, properties, and methods without having to pass dependecies in constructor or method parameters.</p><p>The ability to use DI in your codebase can greatly improve the overall quality of code, increase development productivity, improve tests cases, and reduce maintenance costs.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="3-extensibility">3. Extensibility<a class="hash-link" href="#3-extensibility" title="Direct link to heading">​</a></h3><p>LoopBack is designed to be highly extensible. It provides extensibility using different artifacts and patterns in different layers of the framework.</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="i-sequence">i. Sequence<a class="hash-link" href="#i-sequence" title="Direct link to heading">​</a></h4><p>The LoopBack <a href="https://loopback.io/doc/en/lb4/Sequence.html" target="_blank" rel="noopener noreferrer">Sequence</a> class contains the whole request-response handling infrastructure of the framework, therefore the <code>Sequence</code> is the perfect place for implementing functionality that requires access to the beginning and the end of the request-response cycle - like logging, authentication, etc.</p><p>It is very easy to modify the existing functionality or add new ones by implementing a custom <a href="https://loopback.io/doc/en/lb4/apidocs.rest.sequencehandler.html" target="_blank" rel="noopener noreferrer">SequenceHandler</a> for your app's <code>Sequence</code>. The <code>Sequence</code> file is located at <code>src/sequence.ts</code>.</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="ii-components">ii. Components<a class="hash-link" href="#ii-components" title="Direct link to heading">​</a></h4><p><a href="https://loopback.io/doc/en/lb4/Components.html" target="_blank" rel="noopener noreferrer">Components</a> are great for grouping different but related artifacts for implementing a feature or functionality in the app.</p><p>Components can contribute the following artifacts to the app:</p><ul><li><a href="https://loopback.io/doc/en/lb4/Controllers.html" target="_blank" rel="noopener noreferrer">Controllers</a></li><li><a href="https://loopback.io/doc/en/lb4/Services.html" target="_blank" rel="noopener noreferrer">Providers</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/classes.html" target="_blank" rel="noopener noreferrer">Classes</a></li><li><a href="https://loopback.io/doc/en/lb4/Server.html" target="_blank" rel="noopener noreferrer">Servers</a></li><li><a href="https://loopback.io/doc/en/lb4/Life-cycle.html" target="_blank" rel="noopener noreferrer">Lifecycle observers</a></li><li><a href="https://loopback.io/doc/en/lb4/Binding.html" target="_blank" rel="noopener noreferrer">Bindings</a></li></ul><h4 class="anchor anchorWithStickyNavbar_mojV" id="iii-extensions">iii. Extensions<a class="hash-link" href="#iii-extensions" title="Direct link to heading">​</a></h4><p><a href="https://loopback.io/doc/en/lb4/Extension-point-and-extensions.html" target="_blank" rel="noopener noreferrer">Extension points and extensions</a> are the interfaces for developing plugins for LoopBack apps. It is an excellent pattern for adding decoupled extensibility to a software system.</p><p>LoopBack provides the following helper decorators and functions for implementating extension points and extensions on top of its <a href="https://loopback.io/doc/en/lb4/Context.html" target="_blank" rel="noopener noreferrer">Inversion of Control</a> and <a href="https://loopback.io/doc/en/lb4/Dependency-injection.html" target="_blank" rel="noopener noreferrer">Dependency Injection</a> container.</p><ul><li><code>@extensionPoint</code> - decorates a class to be an extension point with an optional custom name</li><li><code>@extensions</code> - injects a getter function to access extensions to the target extension point</li><li><code>@extensions.view</code> - injects a context view to access extensions to the target extension point. The view can be listened for context events.</li><li><code>@extensions.list</code> - injects an array of extensions to the target extension point. The list is fixed when the injection is done and it does not add or remove extensions afterward.</li><li><code>extensionFilter</code> - creates a binding filter function to find extensions for the named extension point</li><li><code>extensionFor</code> - creates a binding template function to set the binding to be an extension for the named extension point(s). It can accept one or more extension point names to contribute to given extension points</li><li><code>addExtension</code> - registers an extension class to the context for the named extension point</li></ul><h4 class="anchor anchorWithStickyNavbar_mojV" id="iv-life-cycle-observers">iv. Life Cycle Observers<a class="hash-link" href="#iv-life-cycle-observers" title="Direct link to heading">​</a></h4><p><a href="https://loopback.io/doc/en/lb4/Extension-life-cycle.html" target="_blank" rel="noopener noreferrer">Life cycle observers</a> are artifacts that can take part in the starting and stopping processes of the application. They can execute code as the app is starting (such as configuring something) or is shutting down (such as closing the connection to a server).</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="v-servers">v. Servers<a class="hash-link" href="#v-servers" title="Direct link to heading">​</a></h4><p>The LoopBack REST API server is just one of the many possible server capabilities of LoopBack. LoopBack can start multiple <a href="https://loopback.io/doc/en/lb4/Creating-servers.html" target="_blank" rel="noopener noreferrer">servers</a> together of similar or different implementations, making LoopBack an excellent microservices hub. You can use this to create your own implementations of REST, SOAP, gRPC, MQTT and more protocols. For an overview, see <a href="https://loopback.io/doc/en/lb4/Server.html" target="_blank" rel="noopener noreferrer">Server</a>.</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="vi-interceptors">vi. Interceptors<a class="hash-link" href="#vi-interceptors" title="Direct link to heading">​</a></h4><p>LoopBack supports <a href="https://loopback.io/doc/en/lb4/Interceptors.html" target="_blank" rel="noopener noreferrer">Interceptors</a>. They are reusable functions to provide <a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming" target="_blank" rel="noopener noreferrer">aspect-oriented</a> logic around method invocations. There are many use cases for interceptors, such as:</p><p>a. Add extra logic before / after method invocation, for example, logging or measuring method invocations.
b. Validate/transform arguments
c. Validate/transform return values
d. Catch/transform errors, for example, normalize error objects
e. Override the method invocation, for example, return from cache</p><p>For more details about extensibility in LoopBack, refer to "<a href="https://loopback.io/doc/en/lb4/Extending-LoopBack-4.html" target="_blank" rel="noopener noreferrer">Extending LoopBack 4</a>".</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="4-authentication-and-authorization">4. Authentication and Authorization<a class="hash-link" href="#4-authentication-and-authorization" title="Direct link to heading">​</a></h3><p>Authentication and authorization form the basis of securing and controlling access to protected resources, and is a requirement for any app that deals with protected data. Authentication is responsible for verifying the user's identity before allowing access to a protected resource. Authorization is responsible for deciding if a user can perform a certain action on a protected resource or not.</p><p>LoopBack comes with an <a href="https://loopback.io/doc/en/lb4/apidocs.authentication.html" target="_blank" rel="noopener noreferrer">authentication component</a>, which enables developers to plug in different authentication strategies (custom and standard) to the app. It also supports all the <a href="http://www.passportjs.org/" target="_blank" rel="noopener noreferrer">Passport</a> authentication strategies.</p><p>You can read more about authentication in LoopBack in the <a href="https://loopback.io/doc/en/lb4/Loopback-component-authentication.html" target="_blank" rel="noopener noreferrer">authentication doc</a>.</p><p>LoopBack's <a href="https://loopback.io/doc/en/lb4/apidocs.authorization.html" target="_blank" rel="noopener noreferrer">authorization component</a> is a highly configurable authorization system, which allows you to write your own authorization rules or use an existing one.</p><p>All the details about authorization in LoopBack can be found in the <a href="https://loopback.io/doc/en/lb4/Loopback-component-authorization.html" target="_blank" rel="noopener noreferrer">authorization doc</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="5-great-command-line-tools">5. Great command-line Tools<a class="hash-link" href="#5-great-command-line-tools" title="Direct link to heading">​</a></h3><p>Datasources, models, controllers, repositories are great for modularizing the app, but manually creating the files and writing repetitive code with minimal differences for each new entity would be a tedious time-consuming activity.</p><p>LoopBack comes with a utility command-line tool, <a href="https://www.npmjs.com/package/@loopback/cli" target="_blank" rel="noopener noreferrer">lb4</a>. It has commands for generating datasources, models, controllers, repositories, and other LoopBack artifacts so that you don't have to create them manually.</p><p>Given a datasource, the <code>discover</code> command can generate models files from the database. This can be a great time saver if you are using an existing database of your LoopBack app, and especially if the database had a lot of tables with many columns (or their equivalent structures). If an OpenAPI specification is provided, the <code>openapi</code> command will not only create the model files, it will also create the controller files. This can save even more time.</p><p>Refer to the <a href="https://loopback.io/doc/en/lb4/Command-line-interface.html" target="_blank" rel="noopener noreferrer">documentation</a> for all the details about the <code>lb4</code> command.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="6-typescript-support">6. TypeScript Support<a class="hash-link" href="#6-typescript-support" title="Direct link to heading">​</a></h3><p>LoopBack is a <a href="https://www.typescriptlang.org/" target="_blank" rel="noopener noreferrer">TypeScript</a> framework. TypeScript is a typed superset of JavaScript.</p><p>Although not directly a LoopBack feature, using a typed language for development prevents many bugs and steers developers towards using optimized coding practices. This can make a significant difference in the development and maintenance efforts when compared to using plain JavaScript.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="7-the-ibm-confidence">7. The IBM Confidence<a class="hash-link" href="#7-the-ibm-confidence" title="Direct link to heading">​</a></h3><p>LoopBack is an open source project backed by IBM, used by IBM products and customers. Hopefully, this gives you assurance on the quality and the longevity of this framework.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="call-to-action">Call to Action<a class="hash-link" href="#call-to-action" title="Direct link to heading">​</a></h2><p>In 2020, we look forward to helping you and seeing you around! LoopBack's success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here's how you can join us and help the project:</p><ul><li><a href="https://github.com/strongloop/loopback-next/issues" target="_blank" rel="noopener noreferrer">Report issues</a>.</li><li><a href="https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contribute</a> code and documentation.</li><li><a href="https://github.com/strongloop/loopback-next/labels/good%20first%20issue" target="_blank" rel="noopener noreferrer">Open a pull request on one of our "good first issues"</a>.</li><li><a href="https://github.com/strongloop/loopback-next/issues/110" target="_blank" rel="noopener noreferrer">Join</a> our user group.</li></ul>]]></content:encoded>
            <category>Express</category>
            <category>JavaScript</category>
        </item>
        <item>
            <title><![CDATA[LoopBack 4 April 2020 Milestone Update]]></title>
            <link>https://loopbackio.github.io/april-2020-milestone</link>
            <guid>april-2020-milestone</guid>
            <pubDate>Wed, 06 May 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>In April, we focused mostly on completing migration activities, like the migration guide and other related
tasks like running existing tests in a LoopBack 3 application after composing it within a LoopBack 4 application. But, that didn't stop us from exploring and adding some cool features.</p><p>We now have a new <a href="https://github.com/strongloop/loopback-next/tree/master/packages/express" target="_blank" rel="noopener noreferrer">Express</a> package, which enables modeling Express middleware functions as an interceptor chain. Also it is possible now to break a complex application into much smaller components and wire them in a main application. You can find more details on thsese below in <a href="#exploring-new-territories"><code>Exploring new territories</code></a>.</p><p>Also our community has published many <a href="https://www.npmjs.com/search?q=keywords:loopback-extension" target="_blank" rel="noopener noreferrer">LoopBack 4 extensions in NPM</a>. Many of these extensions are addressing a variety of usecases like pub-sub messaging, mqtt, graphql, rate-limiting, authentication, logging, AWS cloud integration, etc. The extensibility of LoopBack in real time use cases are even surprising us and the possibilities seems to be endless.</p><ul><li><a href="#migration-guide">Migration Guide</a></li><li><a href="#exploring-new-territories">Exploring new territories</a></li><li><a href="#apiconnect-extension">APIConnect Extension</a></li><li><a href="#miscellaneous">Miscellaneous</a></li><li><a href="#documentation">Documentation</a></li><li><a href="#community-contributions">Community Contributions</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="migration-guide">Migration Guide<a class="hash-link" href="#migration-guide" title="Direct link to heading">​</a></h2><p>We have made very good progress with migration guides and LoopBack 3 users should have a solid ground now to explore and migrate to LoopBack 4. The well used LoopBack 3 components are all covered with migrations examples and tutorials. There are certain components which are having fewer downloads per day, that are not covered yet. But we are pursuing steadily to address all migration questions.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="differences-in-request-response-cycle">Differences in Request-Response Cycle<a class="hash-link" href="#differences-in-request-response-cycle" title="Direct link to heading">​</a></h3><p>We have created a document describing the differences between the <a href="https://loopback.io/doc/en/lb4/LB3-vs-LB4-request-response-cycle.html" target="_blank" rel="noopener noreferrer">request-response cycle</a> in LoopBack 3 and LoopBack 4. Those of you coming from LoopBack 3 will have a better understanding about how the request-response cycle works in LoopBack 4 compared to LoopBack 3.</p><p>The <a href="https://loopback.io/doc/doc/en/lb4/Request-response-cycle.html" target="_blank" rel="noopener noreferrer">LoopBack 4 request-response cycle documentation</a> contains the details in more depth for LoopBack 4.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="example-to-use-passport-strategies-for-authentication-in-loopback-4">Example to use Passport Strategies for Authentication in LoopBack 4<a class="hash-link" href="#example-to-use-passport-strategies-for-authentication-in-loopback-4" title="Direct link to heading">​</a></h3><p>A new <a href="https://github.com/strongloop/loopback-next/tree/master/examples/passport-login" target="_blank" rel="noopener noreferrer">Passport Login example</a> is now available. It shows how to use <a href="http://www.passportjs.org/docs/" target="_blank" rel="noopener noreferrer">Passport Strategies</a> in LoopBack 4 as an independent authentication step in the application <code>Sequence</code> as well as standard express middleware. If you are using the loopback-component-passport in LoopBack 3, this example can help you migrate your application to LoopBack 4.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="booting-migration-guide">Booting Migration Guide<a class="hash-link" href="#booting-migration-guide" title="Direct link to heading">​</a></h3><p>Because of the architectural differences, the booting process is very different in LoopBack 3 and LoopBack 4. <a href="https://loopback.io/doc/en/lb4/LB3-vs-LB4-booting.html" target="_blank" rel="noopener noreferrer">This document</a> describes the differences and lists the various artifacts that take part in the booting process in LoopBack 4.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="custom-validation">Custom Validation<a class="hash-link" href="#custom-validation" title="Direct link to heading">​</a></h3><p>The <a href="https://loopback.io/doc/en/lb4/LB3-vs-LB4-request-response-cycle.html#data-coercion-and-validation" target="_blank" rel="noopener noreferrer">data coercion and validation</a> and <a href="https://loopback.io/doc/en/lb4/LB3-vs-LB4-request-response-cycle.html#access-to-data-before-writing-to-the-databases" target="_blank" rel="noopener noreferrer">access to data before writing to the databases</a> sections of the <a href="https://loopback.io/doc/en/lb4/LB3-vs-LB4-request-response-cycle.html" target="_blank" rel="noopener noreferrer">LB3 to LB4 request-response migration guide</a> deals with the topic of access and application of custom validation to data in Loopback 4.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="differences-between-lb3-and-lb-4-cli-commands">Differences between LB3 and LB 4 CLI Commands<a class="hash-link" href="#differences-between-lb3-and-lb-4-cli-commands" title="Direct link to heading">​</a></h3><p>The command line interfaces of LoopBack 3 and LoopBack 4 have some similarities, but also some differences. We have outlined these similarities and differences in <a href="https://loopback.io/doc/en/lb4/migration-cli.html" target="_blank" rel="noopener noreferrer">Migrating CLI usage patterns</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="exploring-new-territories">Exploring New Territories<a class="hash-link" href="#exploring-new-territories" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="the-new-express-package-and-enabling-express-middleware-as-interceptors">The NEW Express Package and Enabling Express Middleware as Interceptors<a class="hash-link" href="#the-new-express-package-and-enabling-express-middleware-as-interceptors" title="Direct link to heading">​</a></h3><p>The new <a href="https://github.com/strongloop/loopback-next/tree/master/packages/express" target="_blank" rel="noopener noreferrer">Express Package</a>, has enabled injecting single and multiple express middleware functions as <code>interceptors</code> into <code>Controller</code> invocations and also as a middleware step in the application <code>Sequence</code> as follows:</p><p>The default sequence now has a Middleware step. It creates an invocation chain to call registered middleware handlers with the extension pattern. The sequence can be customized to have more than one Middleware step. Express middleware can also be wrapped as LB4 interceptors, which can in turn be added to global/class/method level. Move built-in cors and openapi endpoints as express middleware functions.</p><p>You can check the <a href="https://loopback.io/doc/en/lb4/Express-middleware.html" target="_blank" rel="noopener noreferrer">express middleware page in loopback docs</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="spike---migrating-oauth2-component">Spike - Migrating OAuth2 Component<a class="hash-link" href="#spike---migrating-oauth2-component" title="Direct link to heading">​</a></h3><p>In story <a href="https://github.com/strongloop/loopback-next/issues/3959" target="_blank" rel="noopener noreferrer">#3959</a> we explored the possibility and evaluated the required effort to migrate module <a href="https://github.com/strongloop/loopback-component-oauth2" target="_blank" rel="noopener noreferrer"><code>loopback-component-oauth2</code></a>. Considering that LoopBack 4 currently focuses on the integration with third party OAuth 2.0 providers, and the module is complicated, we decide to defer the migration guide and demo a simplified server with OAuth 2.0 enabled on it.</p><p>You can find details about the mock server on page <a href="https://loopback.io/doc/en/lb4/migration-auth-oauth2.html" target="_blank" rel="noopener noreferrer">migration-auth-oauth2</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="running-loopback-3-tests-when-mounted-on-a-loopback-4-project">Running LoopBack 3 Tests when Mounted on a LoopBack 4 project<a class="hash-link" href="#running-loopback-3-tests-when-mounted-on-a-loopback-4-project" title="Direct link to heading">​</a></h3><p>With users being able to <a href="https://loopback.io/doc/en/lb4/migration-mounting-lb3app.html" target="_blank" rel="noopener noreferrer">mount their LoopBack 3 tests on a LoopBack 4 project</a>, we explored how they can also migrate their LB3 tests onto the LB4 project. Documentation is <a href="https://github.com/strongloop/loopback-next/issues/5298" target="_blank" rel="noopener noreferrer">coming</a>, but if you want to see how an example of how to do it now, see the <a href="https://github.com/strongloop/loopback-next/pull/5251" target="_blank" rel="noopener noreferrer">spike</a>. The spike demonstrates running LB3 tests in the <a href="https://github.com/strongloop/loopback-next/tree/master/examples/lb3-application" target="_blank" rel="noopener noreferrer"><code>lb3-application</code> example</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="simplify-your-complex-applications---booting-component-applications">Simplify your Complex Applications - Booting Component Applications<a class="hash-link" href="#simplify-your-complex-applications---booting-component-applications" title="Direct link to heading">​</a></h3><p>Users can now break down a complex application into much smaller components and wire them all together in a main application, with a new feature to <a href="https://github.com/strongloop/loopback-next/pull/5304" target="_blank" rel="noopener noreferrer">Boot up Component Applications</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="apiconnect-extension">APIConnect Extension<a class="hash-link" href="#apiconnect-extension" title="Direct link to heading">​</a></h2><p>The <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect" target="_blank" rel="noopener noreferrer">LoopBack APIConnect extension</a> is now tested by <a href="https://github.com/strongloop/loopback-next/issues/4498" target="_blank" rel="noopener noreferrer">publishing shopping app APIs, enhanced with the extension, on a IBM DataPower Gateway</a>.</p><p>We took the shopping example for a close-to-real-life scenario. This would help IBM APIConnect customers to develop their applications with LoopBack and manage them with IBM APIConnect.</p><p>Once LoopBack developers have their REST APIs created they could use the <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect" target="_blank" rel="noopener noreferrer">LoopBack APIConnect extension</a> to enhance their OpenAPI spec with <code>x-ibm-</code> OpenAPI metadata. For the shopping example, we followed the <a href="https://github.com/strongloop/loopback4-example-shopping/blob/master/kubernetes/docs/deploy-to-ibmcloud.md" target="_blank" rel="noopener noreferrer">steps in the example repository</a> to deploy to IBM Cloud and then imported the OpenAPI specification to APIConnect with <a href="https://developer.ibm.com/apiconnect/2019/10/30/manage-and-enforce-openapi-v3-oai-v3/" target="_blank" rel="noopener noreferrer">steps explained in the IBM developer portal</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="miscellaneous">Miscellaneous<a class="hash-link" href="#miscellaneous" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="extracting-jwt-authentication-to-an-extension-module">Extracting JWT Authentication to an Extension Module<a class="hash-link" href="#extracting-jwt-authentication-to-an-extension-module" title="Direct link to heading">​</a></h3><p>After creating the demo for JWT authentication in <a href="https://github.com/strongloop/loopback4-example-shopping" target="_blank" rel="noopener noreferrer"><code>loopback4-shopping-example</code></a>, and applied a similar auth system in <a href="https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration" target="_blank" rel="noopener noreferrer"><code>access-control-migration</code></a>, we think it's time to extract the JWT authentication system into a separate extension package, so that people can quickly mount a component to try out the feature. </p><p>Last month, we created the extension as <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt" target="_blank" rel="noopener noreferrer">authentication-jwt</a>, and its usage is well documented in the <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt" target="_blank" rel="noopener noreferrer">README.md file</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="strong-soap-features-and-support">Strong-Soap Features and Support<a class="hash-link" href="#strong-soap-features-and-support" title="Direct link to heading">​</a></h3><p>Strong-Soap now supports validation of <a href="https://github.com/strongloop/strong-soap/pull/275" target="_blank" rel="noopener noreferrer">anonymous simple types</a> and <a href="https://github.com/strongloop/strong-soap/pull/271" target="_blank" rel="noopener noreferrer">RPC suffixes</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="customizing-explorer-theme">Customizing Explorer Theme<a class="hash-link" href="#customizing-explorer-theme" title="Direct link to heading">​</a></h3><p>As many community users show the interests in changing the look of explorer, we introduced a configuration property called <code>swaggerThemeFile</code> to specify user provided .css themes. For example:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Inside application constructor</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// customize the swagger-ui</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">configure</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">RestExplorerBindings</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">COMPONENT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">to</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  swaggerThemeFile</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'/theme-newspaper.css'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>You can check the complete guide in section <a href="https://github.com/strongloop/loopback-next/blob/956a6aa574995c6cdd5066f6af7b92a93382eefc/packages/rest-explorer/README.md#customizing-swagger-ui-theme" target="_blank" rel="noopener noreferrer">customizing Swagger UI theme</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="move-datasource-configurations-from-json-to-ts-file">Move Datasource Configurations from .json to .ts File<a class="hash-link" href="#move-datasource-configurations-from-json-to-ts-file" title="Direct link to heading">​</a></h3><p>To align with existing typescript files and dynamic configuration of datasources, we have <a href="https://github.com/strongloop/loopback-next/pull/5000" target="_blank" rel="noopener noreferrer">switched datasource configurations to .ts files</a> from LoopBack 3 style json files. Please watch the <a href="https://www.youtube.com/watch?v=S3BKXh7wDYE&amp;feature=youtu.be" target="_blank" rel="noopener noreferrer">video tutorial</a> from Miroslav on migrating <code>Migrate LoopBack 4 datasource config to TypeScript</code>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="build-with-ts-project-references">Build with TS Project-References<a class="hash-link" href="#build-with-ts-project-references" title="Direct link to heading">​</a></h3><p>LoopBack monorepo was configured in a hacky way to allow TypeScript to build individual packages. We have made <a href="https://github.com/strongloop/loopback-next/pull/5155" target="_blank" rel="noopener noreferrer">changes to leverage TypeScript's Project-References</a>. Project references are a new feature in TypeScript 3.0 that allow to structure TypeScript projects into smaller pieces.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="other-build-features">Other Build Features<a class="hash-link" href="#other-build-features" title="Direct link to heading">​</a></h3><p>Changes done to make <a href="https://github.com/strongloop/loopback-next/pull/5205" target="_blank" rel="noopener noreferrer">default compilation target as ES2018</a> and enable all ES2020 features for <code>lib</code> configuration.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="complex-openapi-validations">Complex OpenAPI Validations<a class="hash-link" href="#complex-openapi-validations" title="Direct link to heading">​</a></h3><p>A list of AJV features have been added in the past few months including <a href="https://github.com/strongloop/loopback-next/pull/3539" target="_blank" rel="noopener noreferrer">AJV keywords</a>, <a href="https://github.com/strongloop/loopback-next/pull/4979" target="_blank" rel="noopener noreferrer">AJV extensibility</a>, <a href="https://github.com/strongloop/loopback-next/pull/4808" target="_blank" rel="noopener noreferrer">AJV service provider</a> and <a href="https://github.com/strongloop/loopback-next/pull/4762" target="_blank" rel="noopener noreferrer">asynchronous validations</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="documentation">Documentation<a class="hash-link" href="#documentation" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="working-with-data">Working with Data<a class="hash-link" href="#working-with-data" title="Direct link to heading">​</a></h3><p>In LoopBack 4, models describe the shape of data, repositories provide behavior like CRUD operations, and controllers define routes. It's easy to manipulate and query data with LB4. However, for a long time LoopBack 4 documentation was missing the <em>Woring with Data</em> section and users were referencing the old docs in LoopBack 3. Even though LB3 has almost the same querying rules as LB4, the different styles between LB4 and LB3 sometimes are still causing confusion.</p><p>Gladly, we added that section with different filters under the page <a href="https://loopback.io/doc/en/lb4/Working-with-data.html" target="_blank" rel="noopener noreferrer">Usage Scenarios - Working with Data</a>. For each filter, we introduced the basic usage with Node.js and REST APIs and also show examples of using both APIs. For instance, we have an example of showing how the <code>limit</code> filter works with Node.js API and also the corresponding example of using REST. </p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">Node.js API:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">await orderRepository.find({limit: 5});</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">REST:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/orders?filter[limit]=5</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="calling-apis-with-openapi-specification">Calling APIs with OpenAPI Specification<a class="hash-link" href="#calling-apis-with-openapi-specification" title="Direct link to heading">​</a></h3><p>If you want to connect to a REST service with an OpenAPI description, the <a href="https://github.com/strongloop/loopback-connector-openapi" target="_blank" rel="noopener noreferrer">OpenAPI connector</a> would be what you need. We updated the documentation in the <a href="https://loopback.io/doc/en/lb4/Calling-other-APIs-and-web-services.html" target="_blank" rel="noopener noreferrer">Calling other APIs and web services
</a> to include this usage. Besides, we added more configuration details in the <a href="https://loopback.io/doc/en/lb4/OpenAPI-connector.html" target="_blank" rel="noopener noreferrer">OpenAPI connector docs page</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="community-contributions">Community Contributions<a class="hash-link" href="#community-contributions" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="added-tsdocs-for-loopback-packages">Added tsdocs for LoopBack Packages<a class="hash-link" href="#added-tsdocs-for-loopback-packages" title="Direct link to heading">​</a></h3><p>Autogenerated API docs had descriptions empty for all packages which now fixed by <a href="https://github.com/strongloop/loopback-next/pull/4711" target="_blank" rel="noopener noreferrer">adding ts docs to all packages</a>. Please take a look at the <a href="https://loopback.io/doc/en/lb4/apidocs.index.html" target="_blank" rel="noopener noreferrer">API docs</a> to see the difference.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="consolidate-openapi-schema-using-a-new-spec-enhancer">Consolidate Openapi Schema using a New Spec Enhancer<a class="hash-link" href="#consolidate-openapi-schema-using-a-new-spec-enhancer" title="Direct link to heading">​</a></h3><p>LoopBack users will be able to automatically extract schemas used in multiple places into <code>#/components/schemas</code> and replace the references with a <code>$ref</code>, with a <a href="https://github.com/strongloop/loopback-next/pull/4365" target="_blank" rel="noopener noreferrer">new OAS enhancer</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="may-milestones">May Milestones<a class="hash-link" href="#may-milestones" title="Direct link to heading">​</a></h2><p>This month, we would like to work on the remaining items for the migration guide epic, documentation improvement and more. For more detials, take a look at our <a href="https://github.com/strongloop/loopback-next/issues/5301" target="_blank" rel="noopener noreferrer">May milestone list on GitHub</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="call-to-action">Call to Action<a class="hash-link" href="#call-to-action" title="Direct link to heading">​</a></h2><p>In 2020, we look forward to helping you and seeing you around! LoopBack's success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here's how you can join us and help the project:</p><ul><li><a href="https://github.com/strongloop/loopback-next/issues" target="_blank" rel="noopener noreferrer">Report issues</a>.</li><li><a href="https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contribute</a> code and documentation.</li><li><a href="https://github.com/strongloop/loopback-next/labels/good%20first%20issue" target="_blank" rel="noopener noreferrer">Open a pull request on one of our "good first issues"</a>.</li><li><a href="https://github.com/strongloop/loopback-next/issues/110" target="_blank" rel="noopener noreferrer">Join</a> our user group.</li></ul>]]></content:encoded>
            <category>Milestone update</category>
        </item>
        <item>
            <title><![CDATA[Community Q&A Monthly Digest - April 2020]]></title>
            <link>https://loopbackio.github.io/2020-april-slack-qa</link>
            <guid>2020-april-slack-qa</guid>
            <pubDate>Wed, 29 Apr 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>In the past, we've explored a few options on providing a forum for our users to help each other: <a href="https://groups.google.com/forum/#!forum/loopbackjs" target="_blank" rel="noopener noreferrer">Google group</a>, <a href="https://gitter.im/strongloop/loopback" target="_blank" rel="noopener noreferrer">Gitter</a> and GitHub. We are pleased to announce that the LoopBack Slack workspace, <a href="https://loopbackio.slack.com/" target="_blank" rel="noopener noreferrer">https://loopbackio.slack.com/</a>, is available for our users to join. Since Slack is quite commonly used, we thought it would be a good time for us to modernize our tooling for the LoopBack community helping out each other out. Also, the LoopBack core team uses Slack on a daily basis; it is helpful because it allows us to get notifications and communicate efficiently.</p><p>There have been lots of great questions and answers. We thought it would be helpful to curate some of the discussions here. Thanks again for submitting the questions and answers! </p><p><strong>Question: I am trying to find a working implementation for TimeStamp Mixin to have time stamp automatic fields in the database. In the older version of LoopBack, I was capable to create a BaseEntity and BaseRepository and to extend them but now it is not working anymore. If I extend in the same way the controllers are not working anymore. The current example in the docs is based on adding the mixin to the Controller which I like much less. Any suggestions? Thanks.</strong></p><p><strong>Answer:</strong> For specifying the creation timestamp, you can use the <code>default</code> property for the <code>@property</code> decorator in your model. Something like:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">property</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'date'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function-variable function" style="color:#d73a49">default</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name known-class-name class-name">Date</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  createDate</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>You can also use <a href="https://momentjs.com/" target="_blank" rel="noopener noreferrer">Moment.js</a> to format the timestamp. </p><p>Updating updatedAt field should be possible via 2 ways:</p><ol><li>Via controller
When a controller function is invoked, the current timestamp could be taken and then injected into the original request query before being passed into the repository function.
You can also write your own base class (without the <code>@model</code> decorator) and then extend it where necessary.</li><li>Via datasource
It is possible to add a new function to the datasource which can mutate the query object and then pass it on.</li></ol><hr><p><strong>Question: Kinda new to loopback, I want to learn more about decorators and how to custom loopback logic for more advanced usages, can you walk me through the process of creating custom decorators to create my own "hook" around a controller?</strong></p><p><strong>Answer:</strong> A great starting point would be the <a href="https://loopback.io/doc/en/lb4/Extending-LoopBack-4.html" target="_blank" rel="noopener noreferrer">Extending LoopBack 4</a> docs.</p><p>These concepts are the building blocks of LB4. They serve a specific purpose while following the OOP paradigm.
It may look like a lot, but these are essentially the different extension points in LoopBack 4 (hence why LB4 is extremely extensible).
Let's see if we can break it down:</p><p><strong>Decorators (in general)</strong>
The decorators in LB4 are no different to the standard decorators in TypeScript. They add metadata to classes, methods. properties, or parameters. They don't actually add any functionality, only metadata.
Think of it like the file properties on your file system: It's not visible when interacting with the file normally, but those who want to access those properties will be able to via a standard interface.
There's more benefits to Decorators, but the above explanation is the watered-down gist of it.</p><p><strong>Sequence (in general)</strong>
Sequences are a group of Actions. It simply indicates which actions should be used by the server to process the request.</p><p><strong>Sequence Actions (in general)</strong>
Sequence Actions (or simply "Actions") are stateless, meaning that they only have the basic concept Elements.
Converting into Express.js terminology; Think of an Action as an middleware. And think of an Element as the contents that a middleware receives. They work differently, but the high-level idea is about the same.
They are unaware of other higher-level concepts such as Controllers, DataSource, Models, etc.</p><p><strong>Components (in general)</strong>
When adding functionality to LB4, you'll usually need to add a combination of Providers, Booters, etc. This can tedious to manage. Hence, Components are registered once in the LB4 Application, which will then register the other stuff for you.
<strong>@authenticate</strong>
Adds authentication metadata.</p><p><strong>AuthenticationComponent</strong>
A component to register the necessary artifacts.</p><p><strong>AuthenticationActionProvider</strong>
This is a Sequence Action. Essentially, it adds an "authentication" step to the Sequence.</p><p><strong>AuthenticationStrategyProvider</strong>
This is a standard interface that the @loopback/authentiation package understands. Hence, any authentication strategy that adopts this interface can be used in @loopback/authentication. Think of it like the standard interface for Passport.js uses to interface with many different authentication strategies</p><hr><p><strong>Question: I have experience with other ActiveRecord implementations. If I was able to utilize TypeORM, this would be more straightforward. You mentioned TypeORM is coming soon as an option for LoopBack 4?</strong></p><p><strong>Answer:</strong> You can track progress of a proof of concept here: <a href="https://github.com/strongloop/loopback-next/pull/4794" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback-next/pull/4794</a>
Loopback 4 has been designed to allow flexibility so you can for example use TypeORM if you prefer.</p><p><strong>Question: I am using mysql connector,  I have generated models using LB4 model, But when I migrate the models from loopback to database using <code>npm run migrate</code>. The foreign key constraints were missing in database. I have many.model.ts files. How to have foreign key in database with npm run migrate.</strong></p><p><strong>Answer:</strong> AFAIK, you’ll need to add some settings in the <code>@model</code> decorator on the FK configuration so that npm run migrate can pick up.
I’ve tried that for postgresql using <a href="https://github.com/dhmlau/loopback4-coffeeshop/blob/master/src/models/review.model.ts#L4-L15" target="_blank" rel="noopener noreferrer">this snippet</a>.  Hope it works for you for mysql as well.</p><p>There is an GitHub issue tracking the work to add constraints in db migration: <a href="https://github.com/strongloop/loopback-next/issues/2332" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback-next/issues/2332</a>.</p><hr><p><strong>Question: Can anyone point me in the right direction on how to do loggig in LB4?</strong></p><p><strong>Answer:</strong> You have lots of options.  If you want to do it inside of the context of the loopback application, with IoC binding, you can create a singleton service provider that returns the log utility of your choice.  For example, with winston:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// services/logger.service.ts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> bind</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"> </span><span class="token imports maybe-class-name">BindingScope</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"> </span><span class="token imports maybe-class-name">Provider</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/core'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports operator" style="color:#393A34">*</span><span class="token imports"> </span><span class="token imports keyword module" style="color:#00009f">as</span><span class="token imports"> winston</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'winston'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports operator" style="color:#393A34">*</span><span class="token imports"> </span><span class="token imports keyword module" style="color:#00009f">as</span><span class="token imports"> </span><span class="token imports maybe-class-name">Transport</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'winston-transport'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">bind</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> scope</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">BindingScope</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">SINGLETON</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">LogService</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">implements</span><span class="token plain"> </span><span class="token class-name maybe-class-name">Provider</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name">winston</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name property-access maybe-class-name">Logger</span><span class="token class-name operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  logger</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> winston</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">Logger</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">constructor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">value</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">logger</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> transports</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Transport</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      transports</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">push</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">winston</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">transports</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access maybe-class-name" style="color:#d73a49">File</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          handleExceptions</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          format</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">winston</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">format</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          filename</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'/path/t'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">logger</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> winston</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">createLogger</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        transports</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        exitOnError</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">logger</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><strong>application.ts</strong></p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// in constructor</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">bind</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'loggingKey'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toProvider</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">Logger</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">inScope</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">BindingScope</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">SINGLETON</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><strong>controller.ts (also applies for service.ts and others)</strong></p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">HelloWorldController</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'/hello-world'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getHelloWorld</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">inject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'loggingKey'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> logger</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> winston</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">Logger</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    logger</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">info</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'logging to a file!'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Hello World'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>With binding and injection, you can do some pretty cool stuff, like this extension that gives you a <code>@log(LOG_LEVEL.INFO)</code> decorator that can be used to time a request:
<a href="https://github.com/strongloop/loopback-next/tree/master/examples/log-extension" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback-next/tree/master/examples/log-extension</a></p><p>There's also the old school nodejs way of just importing a file that exports a log utility, all set up in the global scope. I believe most tutorials for utilities like winston start with that :)</p><hr><p><strong>Question: Are there any solution to see the errors of model in the response of the request?</strong></p><p><strong>Answer:</strong> See <a href="https://loopback.io/doc/en/lb4/Sequence.html#handling-errors" target="_blank" rel="noopener noreferrer">https://loopback.io/doc/en/lb4/Sequence.html#handling-errors</a> for reference.</p><hr><h2 class="anchor anchorWithStickyNavbar_mojV" id="interested-to-join-our-slack-workspace">Interested to Join our Slack Workspace?<a class="hash-link" href="#interested-to-join-our-slack-workspace" title="Direct link to heading">​</a></h2><p>Simply click <a href="https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw" target="_blank" rel="noopener noreferrer">this invitation link</a> to join. You can also find more channel details here: <a href="https://github.com/strongloop/loopback-next/issues/5048" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback-next/issues/5048</a>.</p>]]></content:encoded>
            <category>Community</category>
            <category>Slack</category>
            <category>Q&amp;A</category>
        </item>
        <item>
            <title><![CDATA[Build REST APIs for CRUD operations from a model without coding]]></title>
            <link>https://loopbackio.github.io/model-to-rest-api-feature</link>
            <guid>model-to-rest-api-feature</guid>
            <pubDate>Wed, 22 Apr 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>As LoopBack 3 is expected to reach its EOL by the end of this year, we have been working hard to achieve feature parity between LoopBack 3 and LoopBack 4. One feature of LoopBack 3 that we did not have in LoopBack 4 yet was the ability to go directly from only a model definition and model configuration to fully-featured CRUD REST API. Unlike LoopBack 3, LoopBack 4 relied on intermediate repository and controller classes in order to go from a model defintion class to use REST API. One thing that LoopBack 4 strives to do is make common tasks as easy as possible, while allowing advanced composition with loosely-coupled artifacts. So, after completing tasks from the related <a href="https://github.com/strongloop/loopback-next/issues/2036" target="_blank" rel="noopener noreferrer">epic</a>, we are now proud to announce that LoopBack 4 now offers support for going from a model definition to REST API with no custom repository or controller classes. </p><p>In LoopBack 4, the <a href="https://loopback.io/doc/en/lb4/Model.html" target="_blank" rel="noopener noreferrer">model definition</a> provides the schema and the <a href="https://loopback.io/doc/en/lb4/DataSources.html" target="_blank" rel="noopener noreferrer">datasource</a> configures how to access the database. Starting with these two artifacts, the user can directly expose REST API by using the following CLI command:</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">lb4 rest-crud</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>For example, if you have a model <code>Product</code> and datasource <code>db</code>, you can use the command as follows:</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">lb4 rest-crud --model Product --datasource db</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>The command can also take in multiple models at the same time. You can find more information on how to use the command in the <a href="https://loopback.io/doc/en/lb4/Rest-Crud-generator.html" target="_blank" rel="noopener noreferrer">REST CRUD generator documentation</a>.</p><p>What the command does is it creates a configuration file describing properties of the REST API:</p><p><code>/src/model-endpoints/product.rest-config.ts</code></p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">ModelCrudRestApiConfig</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/rest-crud'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">Product</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'../models'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">module</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">ModelCrudRestApiConfig</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    model</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Product</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// name of the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pattern</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'CrudRest'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// make sure to use this pattern</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dataSource</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'db'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// name of the datasource</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    basePath</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'/products'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Then it adds <code>CrudRestComponent</code> from <code>@loopback/rest-crud</code> to the application:</p><p><code>src/application.ts</code></p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">CrudRestComponent</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/rest-crud'</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">component</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">CrudRestComponent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Documentation for this feature can be found in <a href="https://loopback.io/doc/en/lb4/Creating-crud-rest-apis.html" target="_blank" rel="noopener noreferrer">Creating CRUD REST APIs from a model</a>. </p><h2 class="anchor anchorWithStickyNavbar_mojV" id="implementation">Implementation<a class="hash-link" href="#implementation" title="Direct link to heading">​</a></h2><p>We implemented <a href="https://github.com/strongloop/loopback-next/tree/master/packages/rest-crud" target="_blank" rel="noopener noreferrer"><code>@loopback/rest-crud</code></a> based on the <a href="https://github.com/strongloop/loopback-next/tree/master/packages/model-api-builder" target="_blank" rel="noopener noreferrer"><code>@loopback/model-api-builder</code></a> package. This model API builder is what builds CRUD REST API from the model definition and datasource.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="example-application">Example Application<a class="hash-link" href="#example-application" title="Direct link to heading">​</a></h2><p>To demonstrate this functionality with an example, we added a new example based on the <a href="https://github.com/strongloop/loopback-next/tree/master/examples/todo" target="_blank" rel="noopener noreferrer"><code>Todo</code> example</a>. <a href="https://github.com/strongloop/loopback-next/tree/master/examples/rest-crud" target="_blank" rel="noopener noreferrer"><code>@loopback/example-rest-crud</code></a> mimics the behavior of the <code>Todo</code> example, but does not include any custom repository or controller classes like the <code>Todo</code> example. To download this example, use the following command:</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">lb4 example rest-crud</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="future-work">Future Work<a class="hash-link" href="#future-work" title="Direct link to heading">​</a></h2><p>While the main epic is now complete, there are additional out of scope tasks that are part of future work. If you would like to contribute, please see the following issues:</p><ul><li><a href="https://github.com/strongloop/loopback-next/issues/2483" target="_blank" rel="noopener noreferrer">From relation definition to REST API with auto-generated repository/controller classes</a></li><li><a href="https://github.com/strongloop/loopback-next/issues/2737" target="_blank" rel="noopener noreferrer">KeyValueRestController extension</a></li><li><a href="https://github.com/strongloop/loopback-next/issues/2482" target="_blank" rel="noopener noreferrer">Expose custom remote methods</a></li></ul><p>The LoopBack team appreciates all your contributions!</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="call-to-action">Call to Action<a class="hash-link" href="#call-to-action" title="Direct link to heading">​</a></h2><p>In 2020, we look forward to helping you and seeing you around! LoopBack's success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here's how you can join us and help the project:</p><ul><li><a href="https://github.com/strongloop/loopback-next/issues" target="_blank" rel="noopener noreferrer">Report issues</a>.</li><li><a href="https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contribute</a> code and documentation.</li><li><a href="https://github.com/strongloop/loopback-next/labels/good%20first%20issue" target="_blank" rel="noopener noreferrer">Open a pull request on one of our "good first issues"</a>.</li><li><a href="https://github.com/strongloop/loopback-next/issues/110" target="_blank" rel="noopener noreferrer">Join</a> our user group.</li></ul>]]></content:encoded>
            <category>feature</category>
            <category>REST</category>
        </item>
        <item>
            <title><![CDATA[LoopBack 4 2020 Q1 Overview]]></title>
            <link>https://loopbackio.github.io/loopback-4-2020-q1-overview</link>
            <guid>loopback-4-2020-q1-overview</guid>
            <pubDate>Wed, 15 Apr 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>The past few weeks have been challenging for many of us. While this pandemic situation affected our lives in different ways, we hope you all stay safe.</p><p>In Q1, we continued to make good progress in the following areas:</p><ul><li><a href="#migration-guide">Migration guide</a></li><li><a href="#migration-tooling-and-examples">Migration Tooling and Examples</a></li><li><a href="#from-model-definitions-to-rest-apis">From Model Definitions to REST APIs</a></li><li><a href="#newly-added-examples">Newly added examples</a></li><li><a href="#newly-added-extensions">Newly added extensions</a></li><li><a href="#enhancements-in-loopback-core-and-openapi-areas">Enhancements in LoopBack core and OpenAPI areas</a></li><li><a href="#rework-of-shopping-example">Rework of shopping example</a></li><li><a href="#refreshed-look-for-loopback-documentation">Refreshed look for LoopBack documentation</a></li></ul><p>Let's take a closer look.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="migration-guide">Migration Guide<a class="hash-link" href="#migration-guide" title="Direct link to heading">​</a></h2><p>Building the migration guide is one of the key focuses for us this year. We made good progress in completing the migration guide. Please check out our <a href="https://loopback.io/doc/en/lb4/migration-overview.html" target="_blank" rel="noopener noreferrer">migration guide</a>. LoopBack 3 is currently in maintenance LTS. Read <a href="https://strongloop.com/strongblog/lb3-entered-maintenance-mode/" target="_blank" rel="noopener noreferrer">this blog</a> to find out what it means and how it affects you.</p><p>In LB3, it was possible to use mixins to enhance a model with a new property, a custom method, or a custom remote method. In LB4, this can be accomplished by using a mixin class factory function against model, repository, or controller classes.
We added a <a href="https://loopback.io/doc/en/lb4/migration-models-mixins.html" target="_blank" rel="noopener noreferrer">Migrating model mixins</a> page to demonstrate how to accomplish this.</p><p>In LB3, Operation hooks are useful tools that are triggered by all methods that execute a particular high-level CRUD operation. However, LB4 hasn't supported this feature yet. To help LB3 users to continue using the feature, we provide a workaround and explain how they can migrate LB3 operation hooks to LB4 repositories in page <a href="https://loopback.io/doc/en/lb4/migration-models-operation-hooks.html" target="_blank" rel="noopener noreferrer">Migrating operation hooks</a>.</p><p>LB3 has the built-in User/AccessToken model based authentication. In LB4, we provide a more flexible authentication system. We explain how LB3 users can migrate it to LB4 with handy LB4 CLI tools. The content can be found in page <a href="https://loopback.io/doc/en/lb4/migration-authentication.html" target="_blank" rel="noopener noreferrer">Migrating built-in authentication</a>.</p><p>In addition, we added the <a href="https://loopback.io/doc/en/lb4/migration-not-planned.html" target="_blank" rel="noopener noreferrer">LB3 features not in-plan documentation page</a> to clarify which LB3 features are not supported in LB4 or the workarounds for those features if users would like to continue using them in LB4. </p><h2 class="anchor anchorWithStickyNavbar_mojV" id="migration-tooling-and-examples">Migration Tooling and Examples<a class="hash-link" href="#migration-tooling-and-examples" title="Direct link to heading">​</a></h2><p>Besides documentation, we migrated the <a href="https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration" target="_blank" rel="noopener noreferrer">LoopBack 3 access control example to LoopBack 4</a>. In the <a href="https://github.com/strongloop/loopback-next/tree/master/examples/lb3-application" target="_blank" rel="noopener noreferrer">lb3-application example</a>, we added instructions on how to move the middleware from the LoopBack 3 application to a common location where both the LB3 and LB4 applications can use it.</p><p>For tooling that helps your migration process easier, the <code>lb4 import-lb3-models</code> command now supports migrating models inheriting from all other models, including LoopBack 3 built-in models.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="from-model-definitions-to-rest-apis">From Model Definitions to REST APIs<a class="hash-link" href="#from-model-definitions-to-rest-apis" title="Direct link to heading">​</a></h2><p>One of the frequent inputs we got from users is that they would like to see fewer steps from creating the models to having runnable endpoints. We now have the <a href="https://github.com/strongloop/loopback-next/tree/master/packages/rest-crud" target="_blank" rel="noopener noreferrer"><code>rest-crud</code></a> package, the app booter, and the CLI command. You can see how to create a simple LoopBack 4 app with the <a href="https://loopback.io/doc/en/lb4/Rest-Crud-generator.html" target="_blank" rel="noopener noreferrer"><code>lb4 rest-crud</code> CLI command</a>.</p><p>To glue these pieces together and helper users to understand the feature, we added a page <a href="https://loopback.io/doc/en/lb4/Creating-crud-rest-apis.html" target="_blank" rel="noopener noreferrer">Creating CRUD REST APIs</a>. You can also run this <a href="https://github.com/strongloop/loopback-next/tree/master/examples/rest-crud" target="_blank" rel="noopener noreferrer">CRUD REST example</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="integrate-with-ibm-api-connect">Integrate with IBM API Connect<a class="hash-link" href="#integrate-with-ibm-api-connect" title="Direct link to heading">​</a></h2><p>Earlier, we identified the work items required for the integration with <a href="https://www.ibm.com/cloud/api-connect" target="_blank" rel="noopener noreferrer">IBM API Connect</a>. When importing an OpenAPI spec generated by a LoopBack 4 application, there is additional metadata needs to be added. Instead of having our users to modify the OpenAPI spec manually, we introduced an <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect" target="_blank" rel="noopener noreferrer">API Connect OpenAPI enhancer</a> to inject the <code>x-ibm-configuration</code> and other required attributes in the OpenAPI spec. </p><p>Additionally, we extracted and translated the messages for our CLI tooling.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="newly-added-examples">Newly Added Examples<a class="hash-link" href="#newly-added-examples" title="Direct link to heading">​</a></h2><p>We continue to add examples which demonstrate commonly used scenarios. With the growing number of examples, we also categorized the <a href="https://loopback.io/doc/en/lb4/Examples.html" target="_blank" rel="noopener noreferrer">Example list</a>. Here are the newly added examples:</p><ul><li><p><a href="https://github.com/strongloop/loopback-next/blob/master/examples/access-control-migration" target="_blank" rel="noopener noreferrer">access control migration example</a> to show how to migrate a LoopBack 3 application with access control to LoopBack 4.</p></li><li><p><a href="https://github.com/strongloop/loopback-next/tree/master/examples/file-transfer" target="_blank" rel="noopener noreferrer">file transfer example</a> for exposing APIs to upload and download files using Express Multer.</p></li><li><p><a href="https://github.com/strongloop/loopback-next/tree/master/examples/validation-app" target="_blank" rel="noopener noreferrer">validation example</a> for adding different kinds of validations in a LoopBack 4 application.</p></li><li><p><a href="https://github.com/strongloop/loopback-next/tree/master/examples/rest-crud" target="_blank" rel="noopener noreferrer">rest-crud example</a> for using <code>CrudRestComponent</code> to define repository and controller classes for a model without creating those classes</p></li></ul><p>If there's any example you'd like to see, feel free to open an issue in the <a href="https://github.com/strongloop/loopback-next" target="_blank" rel="noopener noreferrer">loopback-next repo</a>. Better yet, submit a PR and contribute! </p><h2 class="anchor anchorWithStickyNavbar_mojV" id="newly-added-extensions">Newly Added Extensions<a class="hash-link" href="#newly-added-extensions" title="Direct link to heading">​</a></h2><p>LoopBack 4 is designed to be extensible. We added three extensions in this quarter for various usages: </p><ul><li><p><a href="https://github.com/strongloop/loopback-next/blob/master/extensions/logging" target="_blank" rel="noopener noreferrer">@loopback/extension-logging</a> provides logging facilities based on Winston and Fluentd.</p></li><li><p><a href="https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect" target="_blank" rel="noopener noreferrer">@loopback/apiconnect</a> is the IBM API Connect OpenAPI enhancer  extension extends LoopBack with the ability to integrate with <a href="https://www.ibm.com/cloud/api-connect" target="_blank" rel="noopener noreferrer">IBM API Connect</a>. </p></li><li><p><a href="https://github.com/strongloop/loopback-next/tree/master/extensions/cron" target="_blank" rel="noopener noreferrer">@loopback/cron</a> provides integration with <a href="https://github.com/kelektiv/node-cron" target="_blank" rel="noopener noreferrer">Cron</a> so that applications can schedule jobs using <code>cron</code> based schedule.</p></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="ibm-db2-for-i-connector">IBM Db2 for i Connector<a class="hash-link" href="#ibm-db2-for-i-connector" title="Direct link to heading">​</a></h2><p>The <a href="https://github.com/strongloop/loopback-connector-ibmi" target="_blank" rel="noopener noreferrer">IBM Db2 for i connector</a> was added to the connector list. You can now conveniently create a IBM Db2 for i datasource using our CLI. If you are starting a new project that connects to IBM Db2 for i, we recommend you to use this connector instead of <code>loopback-connector-db2iseries</code> connector.  You can find more details in the <a href="https://loopback.io/doc/en/lb4/DB2-for-i-connector.html" target="_blank" rel="noopener noreferrer">Db2 for i connector page</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="enhancements-in-loopback-core-and-openapi-areas">Enhancements in LoopBack core and OpenAPI areas<a class="hash-link" href="#enhancements-in-loopback-core-and-openapi-areas" title="Direct link to heading">​</a></h2><p>In this quarter, thanks to our community contributors, we had a number of important enhancements in the OpenAPI area. An <code>OASEnhancerService</code> was introduced which allows other enhancers to register and contribute OpenAPI specs into the application. This also provides the base for the <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect" target="_blank" rel="noopener noreferrer">API Connect OpenAPI enhancer</a> mentioned above. On top of that, a few OpenAPI convenience decorators were added, for example, the <code>@deprecated()</code> decorator and the <code>@tags(tagNames: string [])</code> decorator for a class and method.</p><p>For the core of the framework, we have added the support hot-loading of controllers during application startup. Besides, the context and binding inspection APIs were improved with more options and information to print out their injections. More details can be found in the <a href="https://strongloop.com/strongblog/february-2020-milestone/" target="_blank" rel="noopener noreferrer">February milestone blog</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="rework-of-shopping-example">Rework of Shopping Example<a class="hash-link" href="#rework-of-shopping-example" title="Direct link to heading">​</a></h2><p>The most noticeable changes for <a href="https://github.com/strongloop/loopback4-example-shopping" target="_blank" rel="noopener noreferrer">our shopping example</a> is the newly added frontend. There was some rework on the authentication and authorization side to make the app working from end to end.</p><p><img src="https://raw.githubusercontent.com/strongloop/loopback4-example-shopping/master/shoppy.png" alt="Shopping example web site"></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="refreshed-look-for-loopback-web-site">Refreshed Look for LoopBack Web Site<a class="hash-link" href="#refreshed-look-for-loopback-web-site" title="Direct link to heading">​</a></h2><p>Last but not least, if you haven't noticed already, <a href="https://loopback.io/doc/en/lb4/" target="_blank" rel="noopener noreferrer">our documentation site</a> has a refreshed look. Don't forget to check it out!</p><p><img alt="LoopBack documentation site" src="/assets/images/new-docs-site-d900be09d06e488451fdf4935fffcd2c.png" width="2402" height="1300"></p><p>With increasing number of user testimonials, we created a <a href="https://loopback.io/what-our-users-say.html" target="_blank" rel="noopener noreferrer">separate page</a> for it. <a href="https://github.com/strongloop/loopback-next/issues/3047" target="_blank" rel="noopener noreferrer">Let us know</a> if you would like to tell us about your LoopBack usage!</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="previous-milestone-blogs">Previous Milestone Blogs<a class="hash-link" href="#previous-milestone-blogs" title="Direct link to heading">​</a></h2><p>There are many more accomplishments that cannot be captured in this blog, make sure you check out our previously published monthly milestone blog posts in Q1 for more details:</p><ul><li><a href="https://strongloop.com/strongblog/january-2020-milestone/" target="_blank" rel="noopener noreferrer">Janurary 2020</a></li><li><a href="https://strongloop.com/strongblog/february-2020-milestone/" target="_blank" rel="noopener noreferrer">February 2020</a></li><li><a href="https://strongloop.com/strongblog/march-2020-milestone/" target="_blank" rel="noopener noreferrer">March 2020</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="whats-next">What's Next?<a class="hash-link" href="#whats-next" title="Direct link to heading">​</a></h2><p>We have published a blog <a href="https://strongloop.com/strongblog/2020-goals/" target="_blank" rel="noopener noreferrer">LoopBack - 2020 Goals and Focus</a> about our plans this year. Here is a summary of the <a href="https://github.com/strongloop/loopback-next/blob/master/docs/ROADMAP.md#q2-2020-roadmap" target="_blank" rel="noopener noreferrer">Q2 2020 roadmap</a>: </p><ul><li>finish migration guide for both general runtime and authentication &amp; authorization</li><li>continue with API Connect and LoopBack integration</li><li>look into feature parity gaps that are highly requested by users</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="call-to-action">Call to Action<a class="hash-link" href="#call-to-action" title="Direct link to heading">​</a></h2><p>In 2020, we look forward to helping you and seeing you around! LoopBack's success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here's how you can join us and help the project:</p><ul><li><a href="https://github.com/strongloop/loopback-next/issues" target="_blank" rel="noopener noreferrer">Report issues</a>.</li><li><a href="https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contribute</a> code and documentation.</li><li><a href="https://github.com/strongloop/loopback-next/labels/good%20first%20issue" target="_blank" rel="noopener noreferrer">Open a pull request on one of our "good first issues"</a>.</li><li><a href="https://github.com/strongloop/loopback-next/issues/110" target="_blank" rel="noopener noreferrer">Join</a> our user group.</li></ul>]]></content:encoded>
            <category>Quarterly update</category>
        </item>
        <item>
            <title><![CDATA[LoopBack 4 March 2020 Milestone Update]]></title>
            <link>https://loopbackio.github.io/march-2020-milestone</link>
            <guid>march-2020-milestone</guid>
            <pubDate>Wed, 08 Apr 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>The whole world has been through a lot in the past month. The LoopBack team hopes that everyone stays safe and gets through this together.</p><p>Let's check out the work we did in March:</p><ul><li><a href="#migration-guide">Migration Guide</a></li><li><a href="#from-model-to-rest-api">From Model to REST API</a></li><li><a href="#more-usage-scenarios">More Usage Scenarios</a></li><li><a href="#miscellaneous">Miscellaneous</a></li><li><a href="#documentation-enhancement">Documentation Enhancement</a></li><li><a href="#community-contribution">Community Contribution</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="migration-guide">Migration Guide<a class="hash-link" href="#migration-guide" title="Direct link to heading">​</a></h2><p>As LoopBack 3 will go end of life at the end of 2020, we've been focusing on the migration guide for the past months. Here is the content we added in March to help LB3 users adopt LoopBack 4:</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="migrating-built-in-authentication">Migrating Built-in Authentication<a class="hash-link" href="#migrating-built-in-authentication" title="Direct link to heading">​</a></h3><p>In LoopBack 3, the authentication system is a token-based one and has built-in models involved in the mechanism. In LB4, we built a more flexible authentication system that is compatible with different authentication strategies. Even though there are lots of differences, the newly created <a href="https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration" target="_blank" rel="noopener noreferrer">access control migration example</a> explores how to migrate and build an equivalent LoopBack 3 authentication system in LoopBack 4 with detailed steps. The tutorial includes two main parts: </p><ol><li>How to migrate the LoopBack 3 User model's definition and its persistence and login endpoint.</li><li>How to secure endpoints using a token based authentication system and enable the authorize dialog in the API explorer like what we have in LoopBack 3.</li></ol><p>The tutorial also uses the handy LB4 CLI to help LB3 users to get familiar with LB4 terms. Read the <a href="https://loopback.io/doc/en/lb4/migration-authentication.html" target="_blank" rel="noopener noreferrer">migration-authentication</a> tutorial to learn about the details.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="features-not-planned-for-loopback-4">Features Not Planned for LoopBack 4<a class="hash-link" href="#features-not-planned-for-loopback-4" title="Direct link to heading">​</a></h3><p>Besides migrating artifacts from LB3, there are several features/components we no longer support anymore in LB4. They are listed in the page <a href="https://loopback.io/doc/en/lb4/migration-not-planned.html" target="_blank" rel="noopener noreferrer">LoopBack 3 features not planned in LoopBack 4</a>. We also provide workarounds for these features if users would like to continue using them in LB4. </p><h2 class="anchor anchorWithStickyNavbar_mojV" id="from-model-to-rest-api">From Model to REST API<a class="hash-link" href="#from-model-to-rest-api" title="Direct link to heading">​</a></h2><p>The story <a href="https://github.com/strongloop/loopback-next/issues/2036" target="_blank" rel="noopener noreferrer">From Model to REST API with no custom repository/controller epic</a> is almost done! In the past few months, we created the <a href="https://github.com/strongloop/loopback-next/tree/master/packages/rest-crud" target="_blank" rel="noopener noreferrer"><code>@loopback/rest-crud</code></a> package, as well as the the <code>ModelApiBooter</code> booter. And this month, we built the CLI command <code>lb4 rest-crud</code>. To glue these pieces together, we added an example and documentation to help you pick up this convenience tool. Details are listed below. We will have a blog post in the near future.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="cli-command">CLI Command<a class="hash-link" href="#cli-command" title="Direct link to heading">​</a></h3><p>In order to make it easier for users to use this feature, we've added a CLI command to simplify the process. If you have model classes and a valid(<em>persisted</em>) datasource, the following command will generate model endpoints for you:</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">lb4 rest-crud</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="example-application">Example Application<a class="hash-link" href="#example-application" title="Direct link to heading">​</a></h3><p>We've added a new <a href="https://github.com/strongloop/loopback-next/tree/master/examples/rest-crud" target="_blank" rel="noopener noreferrer"><code>rest-crud</code> example</a> which creates the <a href="https://github.com/strongloop/loopback-next/tree/master/examples/todo" target="_blank" rel="noopener noreferrer"><code>Todo</code> example</a> without the need to define a repository or controller for the Todo model. By loading the <code>CrudRestComponent</code>, it demonstrates how to use the default CRUD REST repository and controller with a single model class , datasource, and configuration. The example can be downloaded by running:</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">lb4 example rest-crud</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>You can find more information on how to use the command in the <a href="https://loopback.io/doc/en/lb4/Rest-Crud-generator.html" target="_blank" rel="noopener noreferrer">REST CRUD generator documentation</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="documentation">Documentation<a class="hash-link" href="#documentation" title="Direct link to heading">​</a></h3><p>Now that most of the epic is completed, we've added <a href="https://loopback.io/doc/en/lb4/Creating-crud-rest-apis.html" target="_blank" rel="noopener noreferrer">documentation</a> explaining how to use the feature and the configuration options that come with it. Additionally, we also added <a href="https://loopback.io/doc/en/lb4/Extending-Model-API-builder.html" target="_blank" rel="noopener noreferrer">documentation</a> on extending the <a href="https://github.com/strongloop/loopback-next/tree/master/packages/model-api-builder" target="_blank" rel="noopener noreferrer"><code>@loopback/model-api-builder</code></a> package to create your own custom model API builders; similar to <a href="https://github.com/strongloop/loopback-next/tree/master/packages/rest-crud" target="_blank" rel="noopener noreferrer"><code>@loopback/rest-crud</code></a>'s <a href="https://loopback.io/doc/en/lb4/apidocs.rest-crud.crudrestapibuilder.html" target="_blank" rel="noopener noreferrer"><code>CrudRestApiBuilder</code></a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="more-usage-scenarios">More Usage Scenarios<a class="hash-link" href="#more-usage-scenarios" title="Direct link to heading">​</a></h2><p>We've been adding more examples to show what you can build with, and how you can configure a LoopBack 4 app. One of our favorite examples is the <a href="https://github.com/strongloop/loopback4-example-shopping/" target="_blank" rel="noopener noreferrer">Shopping App</a>. It shows how you can integrate LB4 APIs with a simple front-end design to build a site. Besides the <a href="#example-application"><code>rest-crud</code></a> example mentioned above, we added more examples to show various LoopBack 4 features.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="validation-example">Validation Example<a class="hash-link" href="#validation-example" title="Direct link to heading">​</a></h3><p>LB4 allows you to add validations at three different layers: REST, controller, and ORM. The newly added documentation <a href="#Validation.md">Validation</a> explains these three different types of validations. We added a corresponding example <a href="https://github.com/strongloop/loopback-next/tree/master/examples/validation-app" target="_blank" rel="noopener noreferrer">Validation Example</a> to our <a href="https://loopback.io/doc/en/lb4/Examples.html" target="_blank" rel="noopener noreferrer">Examples list</a> demonstrating how to add and make use of different kinds of validations in a LoopBack 4 application.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="file-upload-and-download-example">File Upload and Download Example<a class="hash-link" href="#file-upload-and-download-example" title="Direct link to heading">​</a></h3><p>Uploading/downloading files is a common requirement for API applications. The documentation for <a href="https://loopback.io/doc/en/lb4/File-upload-download.html" target="_blank" rel="noopener noreferrer">Upload and download files</a> shows the code snippets to create artifacts such as controllers and UI to achieve such a requirement. A fully-functional example is available at <a href="https://github.com/strongloop/loopback-next/tree/master/examples/file-transfer" target="_blank" rel="noopener noreferrer">File Transfer Example</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="documentation-enhancement">Documentation Enhancement<a class="hash-link" href="#documentation-enhancement" title="Direct link to heading">​</a></h2><p>We made some changes in the layout design of the website. Hope you like the new look!</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="request-response-cycle">Request Response Cycle<a class="hash-link" href="#request-response-cycle" title="Direct link to heading">​</a></h3><p>To help users have a better understanding of all the components involved in the request-response handling process, in the  <a href="https://loopback.io/doc/en/lb4/Request-response-cycle.html" target="_blank" rel="noopener noreferrer">Request-Response cycle</a> document, we walk through the path taken by a request to see how it makes its way through the various parts of the framework to return a result. In the near future, we will also add documentation in the migration guide to explain the differences of the request-response cycle between LB3 and LB4. See the GH story <a href="https://github.com/strongloop/loopback-next/issues/4836" target="_blank" rel="noopener noreferrer">Migration Guide: Request-response cycle</a> for more details.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="changelog-docs">CHANGELOG Docs<a class="hash-link" href="#changelog-docs" title="Direct link to heading">​</a></h3><p>We made the CHANGELOG easier to find on our site. It is available in the section <a href="https://loopback.io/doc/en/lb4/changelog.index.html" target="_blank" rel="noopener noreferrer">CHANGELOG</a>. We hope it helps developers to check out the changes of different packages for each release.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="miscellaneous">Miscellaneous<a class="hash-link" href="#miscellaneous" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="user-testimonials">User Testimonials<a class="hash-link" href="#user-testimonials" title="Direct link to heading">​</a></h3><p>We're glad to see a growing number of user testimonials. We refactored it in a new page. Check out the <a href="https://loopback.io/what-our-users-say.html" target="_blank" rel="noopener noreferrer">what our users say</a> section. <a href="https://github.com/strongloop/loopback-next/issues/3047" target="_blank" rel="noopener noreferrer">Let us know</a> if you would like to tell us about your LoopBack usage!</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="ibm-i-connector">IBM i Connector<a class="hash-link" href="#ibm-i-connector" title="Direct link to heading">​</a></h3><p>The <a href="https://github.com/strongloop/loopback-connector-ibmi" target="_blank" rel="noopener noreferrer">IBM Db2 for i connector</a> was added to the connector list. You can now conveniently create an IBM Db2 for i datasource using our CLI. See the <a href="https://loopback.io/doc/en/lb4/DB2-for-i-connector.html" target="_blank" rel="noopener noreferrer">Db2 for i connector page</a> for more details.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="newly-added-extensions">Newly Added Extensions<a class="hash-link" href="#newly-added-extensions" title="Direct link to heading">​</a></h3><p>Here are the extensions we added to the framework:</p><p>The IBM API Connect OpenAPI enhancer <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect" target="_blank" rel="noopener noreferrer">@loopback/apiconnect</a> extension was added to extend LoopBack with the ability to integrate with <a href="https://www.ibm.com/cloud/api-connect" target="_blank" rel="noopener noreferrer">IBM API Connect</a>.</p><p>An experimental extension <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/cron" target="_blank" rel="noopener noreferrer"><code>@loopback/cron</code></a> was added. With it, LB4 apps can be integrated with <a href="https://github.com/kelektiv/node-cron" target="_blank" rel="noopener noreferrer">Cron</a> to schedule jobs using <code>cron</code> based schedules.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="extracting-jwt-component">Extracting JWT Component<a class="hash-link" href="#extracting-jwt-component" title="Direct link to heading">​</a></h3><p>After creating the demo for JWT authentication in <a href="https://github.com/strongloop/loopback4-example-shopping" target="_blank" rel="noopener noreferrer">loopback4-example-shopping</a> and applying a similar system in <a href="https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration" target="_blank" rel="noopener noreferrer">loopback-example-access-control</a>, we think it's time to extract the JWT authentication system into a separate component. This will benefit users who want to quickly mount a prototype token based authentication module to their application. As the first step, we extracted the JWT strategies, the token, and user services into a local module under <a href="https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration/src/components/jwt-authentication" target="_blank" rel="noopener noreferrer">components/jwt-authentication</a>. Next we will move it to a standalone extension package. Feel free to join the discussion in GH story <a href="https://github.com/strongloop/loopback-next/issues/4903" target="_blank" rel="noopener noreferrer">Extract the jwt authentication to an extension module</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="supporting-type-any">Supporting Type Any<a class="hash-link" href="#supporting-type-any" title="Direct link to heading">​</a></h3><p>Model property of type <code>any</code> is now supported. The corresponding OpenAPI and JSON schema is <code>{}</code> or <code>true</code> (according to <a href="https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.3.2" target="_blank" rel="noopener noreferrer">the draft JSON schema standard</a>). If your model property allows arbitrary values, now you can define it as:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">MyModel</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name maybe-class-name">Entity</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ...other code</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">property</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// specify the type name here as 'any'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'any'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// use `any` as its TypeScript type</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// eslint-disable-next-line @typescript-eslint/no-explicit-any</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  anyProperty</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">any</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="bug-fixes">Bug fixes<a class="hash-link" href="#bug-fixes" title="Direct link to heading">​</a></h3><ul><li><p>We fixed a bug in module <code>@loopback-ibmdb</code> where a put request <code>PUT /Model/{instanceId}</code> now operates correctly. The fix trickles down into any LoopBack connector with a dependency on <code>@loopback-ibmdb</code> like <code>@loopback-connector-db2</code> and <code>@loopback-connector-dashdb</code>, for example.</p></li><li><p>We fixed a bug in connector <code>@loopback-connector-mssql</code> which was causing permission problems during installation on Windows. Some extra folders ended up in the package tgz file, and this was causing the problem. The fix went out for several LoopBack connectors: MSSQL, DB2, dashDB, Cloudant, MongoDb, MySQL, Oracle, PostgreSQL, and Redis KeyValue. </p></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="community-contribution">Community Contribution<a class="hash-link" href="#community-contribution" title="Direct link to heading">​</a></h2><p>Our community maintainers and users have been very helpful with building a better LoopBack 4, we really appreciate all the help! Here are the highlights this month:</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="enable-authentication-strategies-to-contribute-oasenhancer">Enable Authentication Strategies to Contribute OASEnhancer<a class="hash-link" href="#enable-authentication-strategies-to-contribute-oasenhancer" title="Direct link to heading">​</a></h3><p>The community maintainer <a href="https://github.com/dougal83" target="_blank" rel="noopener noreferrer"><code>dougal83</code></a> improved the authentication strategies <code>AuthenticationStrategy</code> so that it can be bound with the OAS enhancer extension point via a binding key instead of a constant.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="japanese-translation-for-lb4">Japanese Translation for LB4<a class="hash-link" href="#japanese-translation-for-lb4" title="Direct link to heading">​</a></h3><p>The community user <a href="https://github.com/saotak" target="_blank" rel="noopener noreferrer"><code>saotak</code></a> added several LB4 pages in Japanese. See <a href="https://loopback.io/doc/ja/lb4/index.html" target="_blank" rel="noopener noreferrer">the site</a>. We need your help to have more translations for the LB4 documentations! The instructions can be found in the page <a href="https://loopback.io/doc/en/contrib/translation.html" target="_blank" rel="noopener noreferrer">Translation</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="call-to-action">Call to Action<a class="hash-link" href="#call-to-action" title="Direct link to heading">​</a></h2><p>In 2020, we look forward to helping you and seeing you around! LoopBack's success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here's how you can join us and help the project:</p><ul><li><a href="https://github.com/strongloop/loopback-next/issues" target="_blank" rel="noopener noreferrer">Report issues</a>.</li><li><a href="https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contribute</a> code and documentation.</li><li><a href="https://github.com/strongloop/loopback-next/labels/good%20first%20issue" target="_blank" rel="noopener noreferrer">Open a pull request on one of our "good first issues"</a>.</li><li><a href="https://github.com/strongloop/loopback-next/issues/110" target="_blank" rel="noopener noreferrer">Join</a> our user group.</li></ul>]]></content:encoded>
            <category>Milestone update</category>
        </item>
        <item>
            <title><![CDATA[LoopBack 4 February 2020 Milestone Update]]></title>
            <link>https://loopbackio.github.io/february-2020-milestone</link>
            <guid>february-2020-milestone</guid>
            <pubDate>Thu, 05 Mar 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>The February in a leap year is quite special and we hope everyone has some memorable stories from that extra day! In the past month, LoopBack team continued to focus on the migration guide epic. In the meantime, we were able to contribute significant PRs across all the functional areas. We are really glad to see the increasing engagement from community members, we appreciate all your code reviews and contributions. Last but not least, we published new major releases for <a href="https://github.com/strongloop/loopback-next" target="_blank" rel="noopener noreferrer"><code>@loopback/*</code></a> modules as as we dropped Node.js 8 support and introduced a few other breaking changes.</p><p>Keep reading to learn about what happened in February!</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="migration-guide">Migration Guide<a class="hash-link" href="#migration-guide" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="migrating-operation-hooks">Migrating Operation Hooks<a class="hash-link" href="#migrating-operation-hooks" title="Direct link to heading">​</a></h3><p>While we work on a <a href="https://github.com/strongloop/loopback-next/issues/1919" target="_blank" rel="noopener noreferrer">spike for supporting operation hooks for models/repositories</a>, we are providing a temporary API for enabling operation hooks in LoopBack 4. It requires overriding the <code>DefaultCrudRepository</code>'s <code>definePersistedModel</code> method in the model's repository.</p><p>Here is an example of adding a <code>before save</code> operation hook to the <code>Product</code> model.</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">ProductRepository</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name maybe-class-name">DefaultCrudRepository</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">  </span><span class="token class-name maybe-class-name">Product</span><span class="token class-name punctuation" style="color:#393A34">,</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">  </span><span class="token class-name keyword" style="color:#00009f">typeof</span><span class="token class-name"> </span><span class="token class-name maybe-class-name">Product</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name property-access">prototype</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name property-access">id</span><span class="token class-name punctuation" style="color:#393A34">,</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name">  </span><span class="token class-name maybe-class-name">ProductRelations</span><span class="token class-name"></span><br></span><span class="token-line" style="color:#393A34"><span class="token class-name"></span><span class="token class-name operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">constructor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dataSource</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> juggler</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">DataSource</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">Product</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dataSource</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">definePersistedModel</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entityClass</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> </span><span class="token maybe-class-name">Product</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> modelClass </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">definePersistedModel</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entityClass</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    modelClass</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">observe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'before save'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> ctx </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">going to save </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">ctx</span><span class="token template-string interpolation punctuation" style="color:#393A34">.</span><span class="token template-string interpolation property-access maybe-class-name">Model</span><span class="token template-string interpolation punctuation" style="color:#393A34">.</span><span class="token template-string interpolation property-access">modelName</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> modelClass</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>For more details visit <a href="https://loopback.io/doc/en/lb4/migration-models-operation-hooks.html" target="_blank" rel="noopener noreferrer">Migrating CRUD operation hooks</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="migrating-loopback-3-models-with-a-custom-base-class">Migrating LoopBack 3 Models with a Custom Base Class<a class="hash-link" href="#migrating-loopback-3-models-with-a-custom-base-class" title="Direct link to heading">​</a></h3><p>The initial implementation of <code>lb4 import-lb3-models</code> was able to import only models inheriting from models that have a built-in counter-part in LoopBack 4: <code>Model</code>, <code>PersistedModel</code>, <code>KeyValueModel</code>. Now it also supports migrating models inheriting from all other models, including LoopBack 3 built-in models like <code>User</code>, or an application-specific model. The chain of base (parent) models will also be created in the LoopBack 4 application. For example, model <code>Customer</code> extends model <code>UserBase</code> which extends model <code>User</code>, and if you run <code>lb4 import-lb3-models</code>, you will see the following prompts:</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ lb4 import-lb3-models ~/src/loopback/next/packages/cli/test/fixtures/import-lb3-models/app-using-model-inheritance.js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WARNING: This command is experimental and not feature-complete yet.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Learn more at https://loopback.io/doc/en/lb4/Importing-LB3-models.html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">? Select models to import: Customer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Model Customer will be created in src/models/customer.model.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Adding UserBase (base of Customer) to the list of imported models.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Model UserBase will be created in src/models/user-base.model.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Adding User (base of UserBase) to the list of imported models.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Model User will be created in src/models/user.model.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Import of model relations is not supported yet. Skipping the following relations: accessTokens</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Ignoring the following unsupported settings: acls</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   create src/models/customer.model.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   create src/models/user-base.model.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   create src/models/user.model.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   update src/models/index.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   update src/models/index.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   update src/models/index.ts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="migrating-access-control-example">Migrating Access Control Example<a class="hash-link" href="#migrating-access-control-example" title="Direct link to heading">​</a></h3><p>As the first story to explorer the authorization migration path, we started with migrating a <a href="https://github.com/strongloop/loopback-example-access-control" target="_blank" rel="noopener noreferrer">LoopBack 3 example application</a> which implemented a RBAC (role based access control) system for demoing the LoopBack 3 authentication and authorization mechanism.</p><p>The migrated LoopBack 4 example is created in <a href="https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration" target="_blank" rel="noopener noreferrer">examples/access-control-migration</a>. It uses <a href="https://github.com/casbin/casbin" target="_blank" rel="noopener noreferrer">casbin</a> as the third party library to implement the role mapping. The original models and endpoints are migrated to the LoopBack 4 models, repositories, and controllers. The JWT authentication system is applied again and the core logic of original role resolvers and model ACLs map to the LoopBack 4 authorization system's authorizers and metadata.</p><p>We created a very <a href="https://loopback.io/doc/en/lb4/migration-auth-access-control-example.html" target="_blank" rel="noopener noreferrer">detailed tutorial</a> for the migration steps that you can follow to see how to secure the same endpoints in LoopBack 4.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="migrating-model-mixins">Migrating Model Mixins<a class="hash-link" href="#migrating-model-mixins" title="Direct link to heading">​</a></h3><p>We've added a section <a href="https://loopback.io/doc/en/lb4/migration-models-mixins.html" target="_blank" rel="noopener noreferrer">Migrating model mixins</a> to the migration guide to detail how LoopBack 3 property and custom method/remote method mixins can be migrated to LoopBack 4 model/repository/controller mixin class factory functions.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="migration-of-all-model-properties">Migration of all model properties<a class="hash-link" href="#migration-of-all-model-properties" title="Direct link to heading">​</a></h3><p>We have confirmed that migration also passes down the connector metadata in the model properties with <a href="https://github.com/strongloop/loopback-next/issues/3810" target="_blank" rel="noopener noreferrer">additional tests</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="experimental-feature-on-integration-with-winston-and-fluentd-logging">Experimental Feature on Integration with Winston and Fluentd Logging<a class="hash-link" href="#experimental-feature-on-integration-with-winston-and-fluentd-logging" title="Direct link to heading">​</a></h2><p><a href="https://github.com/strongloop/loopback-next/blob/master/extensions/logging/README.md" target="_blank" rel="noopener noreferrer"><code>@loopback/extension-logging</code></a> contains a component that provides logging facilities based on <a href="https://github.com/winstonjs/winston" target="_blank" rel="noopener noreferrer">Winston</a> and <a href="https://github.com/fluent/fluent-logger-node" target="_blank" rel="noopener noreferrer">Fluentd</a>. Here is an example of injecting and invoking a Winston logger:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports">inject</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/context'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">Logger</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"> logInvocation</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/extension-logging'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports">get</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"> param</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/rest'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">MyController</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Inject a winston logger</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">inject</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">LoggingBindings</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">WINSTON_LOGGER</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> logger</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Logger</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// http access is logged by a global interceptor</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'/greet/{name}'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// log the `greet` method invocations</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">logInvocation</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">greet</span><span class="token punctuation" style="color:#393A34">(</span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">param</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">path</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'name'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">Hello, </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">name</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'/hello/{name}'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">hello</span><span class="token punctuation" style="color:#393A34">(</span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">param</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">path</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'name'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Use the winston logger explicitly</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">logger</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'info'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">greeting </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">name</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">Hello, </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">name</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Its architecture diagram and basic usage are well documented in the package's <a href="https://github.com/strongloop/loopback-next/blob/master/extensions/logging/README.md" target="_blank" rel="noopener noreferrer">README.md</a> file.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="context-and-binding">Context and Binding<a class="hash-link" href="#context-and-binding" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="adding-inspection-flags">Adding Inspection Flags<a class="hash-link" href="#adding-inspection-flags" title="Direct link to heading">​</a></h3><p>Context and binding inspection APIs were improved with more options and information to print out their injections. </p><p>At binding level, there is one flag:</p><ul><li><code>includeInjections</code>: control if injections should be inspected.</li></ul><p>An example usage is:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> myBinding </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name maybe-class-name">Binding</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">tag</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'model'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'my-model'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toClass</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">MyController</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// It converts a binding with value constructor to plain JSON object</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> json </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> myBinding</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">inspect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">includeInjections</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>At context level, there are two flags:</p><ul><li><code>includeInjections</code>: control if binding injections should be inspected.</li><li><code>includeParent</code>: control if parent context should be inspected.</li></ul><p>And their corresponding example usages:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">childCtx</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">inspect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">includeInjections</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">childCtx</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">inspect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">includeParent</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>More test cases can be found in PR <a href="https://github.com/strongloop/loopback-next/pull/4558" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback-next/pull/4558</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="inspect-example">Inspect Example<a class="hash-link" href="#inspect-example" title="Direct link to heading">​</a></h3><p><a href="https://strongloop.com/authors/Raymond_Feng/" target="_blank" rel="noopener noreferrer">@raymondfeng</a> has created <a href="https://github.com/raymondfeng/loopback4-example-inspect" target="_blank" rel="noopener noreferrer">loopback4-example-inspect</a> to demonstrate the inspection of a LoopBack 4 application's context hierarchy. It provides visualization on the different contexts (request, server, application), their bindings, and dependency injections in class constructors. Information is exposed via 3 endpoints:</p><ul><li>inspect: Fetches a JSON document for the context hierarchy.</li><li>graph: Renders the LoopBack application as a SVG diagram.</li><li>graph-d3: Displays the graph using <a href="https://github.com/magjac/d3-graphviz" target="_blank" rel="noopener noreferrer">d3-graphviz</a>.</li></ul><p>This example is turning into an extension <code>@loopback/context-explorer</code> in PR <a href="https://github.com/strongloop/loopback-next/pull/4666" target="_blank" rel="noopener noreferrer">#4666</a>. The core code is packed as a component.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="dynamic-binding-and-rebinding-of-controllers">Dynamic Binding and Rebinding of Controllers<a class="hash-link" href="#dynamic-binding-and-rebinding-of-controllers" title="Direct link to heading">​</a></h3><p>The hot-reloading of controllers after starting application is supported now. You can dynamically add/remove controllers after the application runs, and their endpoints will be mounted/removed accordingly. The OpenAPI specification that describes the exposed endpoints will also be updated. For example:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> app </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name maybe-class-name">Application</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> app</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">start</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">app</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">controller</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">MyController</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// MyController are available via REST API now</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// You can also see the updated OpenAPI Specification from endpoint /openapi.json</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="allowing-different-naming-convention-in-lb4-discover-cli">Allowing Different Naming Convention in <code>lb4 discover</code> CLI<a class="hash-link" href="#allowing-different-naming-convention-in-lb4-discover-cli" title="Direct link to heading">​</a></h2><p>The CLI now allows selection of two naming convention for <code>lb4 discover</code> command: camel case or all lower case. You can find the explanation of each prompt in the <a href="https://loopback.io/doc/en/lb4/Discovering-models.html" target="_blank" rel="noopener noreferrer">Discovering models from relational databases</a> page. <code>discoverAndBuildModels</code> allows you to have different conventions to meet your requirements. Details can be found in page <a href="https://loopback.io/doc/en/lb3/Discovering-models-from-relational-databases.html#discover-and-define-models-at-runtime" target="_blank" rel="noopener noreferrer">Discover and define models at runtime</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="crud-rest-api-builder">CRUD REST API Builder<a class="hash-link" href="#crud-rest-api-builder" title="Direct link to heading">​</a></h2><p>We added a new API builder that helps build a CRUD repository and controller class in <a href="https://github.com/strongloop/loopback-next/pull/4589" target="_blank" rel="noopener noreferrer">PR #4589</a>. <code>CrudRestApiBuilder</code> can be used with an <code>Entity</code> class to create a default repository and controller classes for the model class.
For example, if you have a <code>Product</code> model and a database <code>db</code>. In your <code>src/application.ts</code> file:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// add the following import</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">CrudRestComponent</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/rest-crud'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">TryApplication</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name maybe-class-name">BootMixin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function maybe-class-name" style="color:#d73a49">ServiceMixin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function maybe-class-name" style="color:#d73a49">RepositoryMixin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">RestApplication</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">constructor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">options</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">ApplicationConfig</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// other code</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// add the following line</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">component</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">CrudRestComponent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Create a new file for the configuration, e.g. <code>src/model-endpoints/product.rest-config.ts</code> that defines the <code>model</code>, <code>pattern</code>, <code>dataSource</code>, and <code>basePath</code> properties:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">ModelCrudRestApiConfig</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/rest-crud'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports maybe-class-name">Product</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'../models'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">module</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">ModelCrudRestApiConfig</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  model</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Product</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  pattern</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'CrudRest'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// make sure to use this pattern</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  dataSource</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'db'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  basePath</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'/products'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Now your Product model will have a default repository and default controller class defined without the need for a repository or controller class file.
For more information on the API builder, see <a href="https://github.com/strongloop/loopback-next/blob/master/packages/rest-crud/README.md" target="_blank" rel="noopener noreferrer"><code>@loopback/rest-crud</code>'s README</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="rest-decorators">REST Decorators<a class="hash-link" href="#rest-decorators" title="Direct link to heading">​</a></h2><p>We simplified the <code>filter</code> and <code>where</code> usage for constraint, schema, and OpenAPI mapping with two shortcut decorators: <code>@param.filter</code> and <code>@param.where</code>. The example below shows how they replaced the tedious signatures:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">TodoController</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">find</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">param</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">filter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">Todo</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// replaces `@param.query.object('filter', getFilterSchemaFor(Todo))`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    filter</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Filter</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">Todo</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">Promise</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">Todo</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">todoRepository</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">find</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">filter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">findById</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">param</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">path</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">number</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'id'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// replaces `@param.query.object('filter', getFilterSchemaFor(Todo))`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">param</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">filter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">Todo</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">exclude</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'where'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> filter</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">FilterExcludingWhere</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">Todo</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">Promise</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">Todo</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">todoRepository</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">findById</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> filter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">param</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">where</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">Todo</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> where</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Where</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">Todo</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">Promise</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">Count</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// replaces @param.query.object('where', getWhereSchemaFor(Todo)) where?: Where&lt;Todo&gt;,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">todoRepository</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">where</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="api-explorer">API Explorer<a class="hash-link" href="#api-explorer" title="Direct link to heading">​</a></h2><p>We have now changed the OpenAPI specification generated by the decorator <code>@param.query.json</code> to support url-encoding. Please take a look at (<a href="https://github.com/strongloop/loopback-next/issues/2208" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback-next/issues/2208</a>). This means users can now test their APIs from API explorer with complex json query parameters (eg: <code>filter={include: {relation: "todoList"}}</code>). Previously users were able to test from API explorer with only simple key-values in exploded format (eg: <code>?filter[limit]=1</code> ), because the generated OpenAPI for json query parameters was always of <code>exploded deep-object</code> style. This could be a breaking change for some API clients. Please take a look at the breaking change log in commits from PR <a href="https://github.com/strongloop/loopback-next/pull/4347" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback-next/pull/4347</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="tooling-and-build">Tooling and Build<a class="hash-link" href="#tooling-and-build" title="Direct link to heading">​</a></h2><ul><li><p><code>npm test</code> is passing on Windows: The problem was caused by <code>process.stdin.isTTY</code> behaves differently on the Windows platform, and was discovered by community member <a href="https://github.com/derdeka" target="_blank" rel="noopener noreferrer">@derdeka</a>. Great thanks to him and <a href="https://github.com/dougal83" target="_blank" rel="noopener noreferrer">@dougal83</a> who had been working with <a href="https://strongloop.com/authors/Miroslav_Bajto%C5%A1/" target="_blank" rel="noopener noreferrer">@bajtos</a> to investigate and eventually fix the issue! A series of PRs are involved: <a href="https://github.com/strongloop/loopback-next/pull/4643" target="_blank" rel="noopener noreferrer">#4643</a>, <a href="https://github.com/strongloop/loopback-next/pull/4605" target="_blank" rel="noopener noreferrer">#4605</a>, <a href="https://github.com/strongloop/loopback-next/pull/4652" target="_blank" rel="noopener noreferrer">#4652</a>, <a href="https://github.com/strongloop/loopback-next/pull/4657" target="_blank" rel="noopener noreferrer">#4657</a></p></li><li><p>PR <a href="https://github.com/strongloop/loopback-next/pull/4707" target="_blank" rel="noopener noreferrer">#4707</a> removed dist files from top-level tsconfig to speed up the eslint checks. The time for <code>npm run eslint</code> was reduced from about 4m10s down to 2m50s. More importantly, it enabled proper caching behavior, so that subsequent runs of <code>npm run eslint</code> are super quick, even after <code>npm run build</code> modified dist files.</p></li><li><p>Dropped Node.js 8 support in PR <a href="https://github.com/strongloop/loopback-next/pull/4619" target="_blank" rel="noopener noreferrer">#4619</a>. Node.js v8.x is now end of life, so that we upgraded the supported version across all the LoopBack 4 packages to be 10 and above. This breaking change also resulted in a semver-major release for the monorepo. Many small breaking changes are coming as part of it.</p></li><li><p><a href="https://www.npmjs.com/package/request" target="_blank" rel="noopener noreferrer"><code>request</code></a> module is now officially deprecated, so we replaced it with a new HTTP client <a href="https://github.com/axios/axios" target="_blank" rel="noopener noreferrer"><code>axios</code></a>. The entire story is tracked in <a href="https://github.com/strongloop/loopback-next/issues/2672" target="_blank" rel="noopener noreferrer">#2672</a>. We have updated the <a href="https://github.com/strongloop/loopback-next/pull/4637" target="_blank" rel="noopener noreferrer">http-caching-proxy</a> and <a href="https://github.com/strongloop/loopback-next/pull/4628" target="_blank" rel="noopener noreferrer">benchmark</a> packages to use axios.</p></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="miscellaneous">Miscellaneous<a class="hash-link" href="#miscellaneous" title="Direct link to heading">​</a></h2><ul><li><p>We upgraded the dependency of TypeScript from 3.7 to 3.8 in PR <a href="https://github.com/strongloop/loopback-next/pull/4769" target="_blank" rel="noopener noreferrer">#4769</a>. You can find the new features of TypeScript 3.8 in <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html" target="_blank" rel="noopener noreferrer">here</a></p></li><li><p>Querying with filter <code>where</code>, <code>fields</code> and <code>order</code> is now supported in the API Explorer, the usage is well documented in the section <a href="https://loopback.io/doc/en/lb4/Decorators_openapi.html#parameter-decorator-to-support-json-objects" target="_blank" rel="noopener noreferrer">parameter decorator to support json objects</a></p></li><li><p>We enabled running shared tests from both loopback-datasource-juggler@3 and loopback-datasource-juggler@4 in one more connector: <code>loopback-connector-db2</code></p></li><li><p>We fixed a bug in postgresql connector which occurred when few of the foreign keys in a parent table have null values (<a href="https://github.com/strongloop/loopback-next/issues/4332" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback-next/issues/4332</a>)</p></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="documentations-and-blog-posts">Documentations and Blog Posts<a class="hash-link" href="#documentations-and-blog-posts" title="Direct link to heading">​</a></h2><p>After refactoring the shopping example, we updated the <a href="https://github.com/strongloop/loopback4-example-shopping" target="_blank" rel="noopener noreferrer">README.md</a> file to document the new changes of application usage and the authorization system.</p><p>We published two blog posts this month about the management and plan for our project:</p><ul><li><p>LoopBack 3 has entered Maintenance LTS: <a href="https://strongloop.com/strongblog/lb3-entered-maintenance-mode/" target="_blank" rel="noopener noreferrer">https://strongloop.com/strongblog/lb3-entered-maintenance-mode/</a></p></li><li><p>The 2020 Goals and Focus for LoopBack: <a href="https://strongloop.com/strongblog/2020-goals/" target="_blank" rel="noopener noreferrer">https://strongloop.com/strongblog/2020-goals/</a></p></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="community-contribution">Community Contribution<a class="hash-link" href="#community-contribution" title="Direct link to heading">​</a></h2><p>With more LoopBack users joined us as community maintainers, we're seeing more interactions and discussions! Also, we're glad to see that the increasing numbers of pull request from the community. We really appreciate all of these help! Here are the highlight of community PR of February:</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="adding-flag-disabledefaultsort-to-improve-database-query-performance">Adding Flag <code>disableDefaultSort</code> to Improve Database Query Performance<a class="hash-link" href="#adding-flag-disabledefaultsort-to-improve-database-query-performance" title="Direct link to heading">​</a></h3><p>User <a href="https://github.com/Erikdegroot89" target="_blank" rel="noopener noreferrer"><code>Erikdegroot89</code></a> pointed out that the way LB4 sets default sorting for SQL query might drag down the querying time when the database has a massive amount of data. Using the new added flag <code>disableDefaultSort</code>, users can turn the default sorting off. See details in <a href="https://github.com/strongloop/loopback-connector-postgresql/pull/417" target="_blank" rel="noopener noreferrer">PR #417</a>. This PR also inspires us to leverage the option to all connectors. The issue is tracked in <a href="https://github.com/strongloop/loopback-connector/issues/169" target="_blank" rel="noopener noreferrer">GH issue</a>. Feel free to contribute or join the discussion.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="deprecation-decorator">Deprecation Decorator<a class="hash-link" href="#deprecation-decorator" title="Direct link to heading">​</a></h3><p><code>@oas.deprecated</code> was created by user <a href="https://github.com/mschnee" target="_blank" rel="noopener noreferrer">mschnee</a> to enrich our OpenAPI decorators. It can be applied to class and a class method. It will set
the <code>deprecated</code> boolean property of the Operation Object. When applied to a
class, it will mark all operation methods of that class as deprecated, unless a
method overloads with <code>@oas.deprecated(false)</code>. You can check out <a href="https://loopback.io/doc/en/lb4/Decorators_openapi.html#oasdeprecated" target="_blank" rel="noopener noreferrer">its documentation</a> to learn more details.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="call-to-action">Call to Action<a class="hash-link" href="#call-to-action" title="Direct link to heading">​</a></h2><p>In 2020, we look forward to helping you and seeing you around! LoopBack's success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here's how you can join us and help the project:</p><ul><li><a href="https://github.com/strongloop/loopback-next/issues" target="_blank" rel="noopener noreferrer">Report issues</a>.</li><li><a href="https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contribute</a> code and documentation.</li><li><a href="https://github.com/strongloop/loopback-next/labels/good%20first%20issue" target="_blank" rel="noopener noreferrer">Open a pull request on one of our "good first issues"</a>.</li><li><a href="https://github.com/strongloop/loopback-next/issues/110" target="_blank" rel="noopener noreferrer">Join</a> our user group.</li></ul>]]></content:encoded>
            <category>Milestone update</category>
        </item>
        <item>
            <title><![CDATA[LoopBack - 2020 Goals and Focus]]></title>
            <link>https://loopbackio.github.io/2020-goals</link>
            <guid>2020-goals</guid>
            <pubDate>Wed, 26 Feb 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>2019 was surely an exciting and rewarding year for LoopBack. We <a href="https://strongloop.com/strongblog/loopback-2019-api-award-api-middleware/" target="_blank" rel="noopener noreferrer">received the "Best in API Middleware" award</a> from API World, our LB4 downloads on npmjs.com increased more than double compared to the year before. Moreover, we are thrilled to learn that many of you had deployed LoopBack 4 applications in production! In case you missed our <a href="https://strongloop.com/strongblog/loopback-2019-review/" target="_blank" rel="noopener noreferrer">2019 review</a>, make sure you check it out. As 2020 begins, we would like to share with you our high-level goals for this year. Things might change or shift throughout the year, but here is our plan.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="goal1---enable-as-many-loopback-3-users-to-migrate-to-loopback-4-as-possible">Goal#1 - Enable as many LoopBack 3 users to migrate to LoopBack 4 as possible<a class="hash-link" href="#goal1---enable-as-many-loopback-3-users-to-migrate-to-loopback-4-as-possible" title="Direct link to heading">​</a></h3><p>With LoopBack 3 going end-of-life at the end of 2020, we are continuing to focus on the following areas: </p><ul><li><p><a href="https://loopback.io/doc/en/lb4/migration-overview.html" target="_blank" rel="noopener noreferrer">Migration Guide</a></p><p>  We had made good progress in the general runtime migration guide. As we complete the spike for the migration guide on authentication and authorization, we aim at finishing the migration guide in both areas. Our approach is to create the skeleton of the migration guide and fill in the details as we go. If you'd like to see certain migration topics but they are not in the guide, please let us know!</p></li><li><p>Migration tooling</p><p>  To allow you to migrate your LB3 app incrementally, we have <a href="https://github.com/strongloop/loopback-next/tree/master/examples/lb3-application" target="_blank" rel="noopener noreferrer">an example</a> for you to demonstrate how to mount your existing LoopBack 3 (LB3) application on a new LoopBack 4 (LB4) project and how to move the middleware from the LB3 application to a common location so that both the LB3 and LB4 applications can use them. Besides, there is also a <a href="https://loopback.io/doc/en/lb4/Importing-LB3-models.html" target="_blank" rel="noopener noreferrer">CLI to import models from LoopBack 3 project</a>. </p><p>  We would like to continue to add and enhance the migration tooling to make your migration experience easier and faster. </p></li><li><p>Feature parity</p><p>This year, we would like to close some of the feature parity gaps that a lot of you are asking for. We also realized that there are existing libraries to support certain functionalities in some cases, we'd like to document our recommendation as well.</p></li><li><p>Integration into IBM API Connect </p><p>With LoopBack 3 being packaged in <a href="https://www.ibm.com/cloud/api-connect" target="_blank" rel="noopener noreferrer">IBM API Connect</a>, it is also a good time for us to have LoopBack 4 integrated into the product. A <a href="https://github.com/strongloop/loopback-next/issues/4115" target="_blank" rel="noopener noreferrer">spike</a> has been done on the integration work and we'll continue to work on this.</p></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="goal2---keep-adopting-latest-technologies-to-stay-relevant">Goal#2 - Keep adopting latest technologies to stay relevant<a class="hash-link" href="#goal2---keep-adopting-latest-technologies-to-stay-relevant" title="Direct link to heading">​</a></h3><p>While enhancing our core code base, we'd like to continue to explore the possibility of using and/or integrating the latest technologies with LoopBack 4, such as:</p><ul><li>messaging and pub/sub event style, e.g. Kafka, MQTT</li><li>cloud native integration</li><li>native support on GraphQL</li><li>modernize the connector infrastructure and code base</li></ul><p>We initiated some investigation in some of the areas last year and would like to continue to adopting the latest technologies in order for LoopBack to stay relevant. </p><h3 class="anchor anchorWithStickyNavbar_mojV" id="goal3-nurture-our-community-and-encourage-more-contributions">Goal#3: Nurture our community and encourage more contributions<a class="hash-link" href="#goal3-nurture-our-community-and-encourage-more-contributions" title="Direct link to heading">​</a></h3><p>We cannot do this alone! Community contributions are vital to us. As our user base gets larger, it is essential to grow the contributor community. It not only accelerates our development, but also helps the community gain deeper LoopBack knowledge.</p><p>We would like to encourage community contributions by making a list of GH issues available to the community that we want to finish in the short term by using the <code>help wanted</code> and <code>2020Qx</code> labels. If you're looking for something to contribute in LoopBack, please check our <a href="https://github.com/strongloop/loopback-next/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22+%222020Q1%22" target="_blank" rel="noopener noreferrer">issue list for 2020Q1</a>. </p><p>If you're new to contributing to LoopBack or in open source project in general, don't worry, we have <a href="https://loopback.io/doc/en/lb4/code-contrib-lb4.html" target="_blank" rel="noopener noreferrer">detailed instructions</a> to guide you through. </p><h2 class="anchor anchorWithStickyNavbar_mojV" id="call-to-action">Call to Action<a class="hash-link" href="#call-to-action" title="Direct link to heading">​</a></h2><p>In 2020, we look forward to helping you and seeing you around! LoopBack's success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here's how you can join us and help the project:</p><ul><li><a href="https://github.com/strongloop/loopback-next/issues" target="_blank" rel="noopener noreferrer">Report issues</a>.</li><li><a href="https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contribute</a> code and documentation.</li><li><a href="https://github.com/strongloop/loopback-next/labels/good%20first%20issue" target="_blank" rel="noopener noreferrer">Open a pull request on one of our "good first issues"</a>.</li><li><a href="https://github.com/strongloop/loopback-next/issues/110" target="_blank" rel="noopener noreferrer">Join</a> our user group.</li></ul>]]></content:encoded>
            <category>Community</category>
        </item>
        <item>
            <title><![CDATA[LoopBack 3 has entered Maintenance LTS]]></title>
            <link>https://loopbackio.github.io/lb3-entered-maintenance-mode</link>
            <guid>lb3-entered-maintenance-mode</guid>
            <pubDate>Wed, 19 Feb 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>Almost a year ago, we announced <a href="https://strongloop.com/strongblog/lb3-extended-lts/" target="_blank" rel="noopener noreferrer">Extended Long Term Support for LoopBack 3</a>, extending Active LTS to the end of November 2019. As the saying goes, all good things must come to an end, and so LoopBack version 3 has entered Maintenance LTS in December 2019.</p><p>What does this change means for LoopBack 3 users? Quoting from our <a href="https://loopback.io/doc/en/contrib/Long-term-support.html" target="_blank" rel="noopener noreferrer">Long Term Support policy</a>:</p><blockquote><p>Once a release moves into Maintenance LTS mode, only critical bugs, critical security fixes, and documentation updates will be permitted.</p><p>Specifically, adding support for new major Node.js versions is not permitted.</p></blockquote><p>Let's quickly clarify that Node.js 12 is the latest major Node.js version supported by LoopBack 3.</p><p>Now back to the first rule, which limits the allowed updates to critical problems only. This rule has two goals:</p><ul><li>Maximize the stability of LTS versions by reducing possibilities of changes that may introduce undesired bugs or unintended breaking changes.</li><li>Minimize our effort spent on maintaining old versions, so that we can invest more into the current version (LoopBack 4 and beyond).</li></ul><p>There is a catch though: because LoopBack 4 is fundamentally incompatible with LoopBack 3, there are bugs that exists in LoopBack 3 only. The usual approach, where bugs are fixed in the Current version and back-ported to LTS versions, cannot be applied. As a result, we are tracking several community-contributed pull requests fixing issues specific to LoopBack 3.</p><p>We feel it would be counter-productive to reject those in-progress pull requests now, after several rounds of reviews and adjustments, just because LoopBack 3 transitioned from Active to Maintenance LTS. We don't want to throw away effort invested by developers contributing those fixes and thus we decided an exceptional situation deserves an exception to be made.</p><p><strong>Until June 2020, we will keep reviewing pull requests fixing non-critical bugs in LoopBack 3 and if we evaluate the risk of breaking something else as low, then we will accept the fix.</strong></p><p>At the end of June, we will evaluate the impact of this new rule and decide if we want to extend its duration further.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="affected-packages">Affected packages<a class="hash-link" href="#affected-packages" title="Direct link to heading">​</a></h2><p>The following packages are considered as part of LoopBack 3 and are moving to
Maintenance LTS:</p><ul><li><a href="https://www.npmjs.com/package/generator-loopback" target="_blank" rel="noopener noreferrer">generator-loopback</a></li><li><a href="https://www.npmjs.com/package/grunt-loopback-sdk-angular" target="_blank" rel="noopener noreferrer">grunt-loopback-sdk-angular</a></li><li><a href="https://www.npmjs.com/package/gulp-loopback-sdk-angular" target="_blank" rel="noopener noreferrer">gulp-loopback-sdk-angular</a></li><li><a href="https://www.npmjs.com/package/loopback" target="_blank" rel="noopener noreferrer">loopback</a></li><li><a href="https://www.npmjs.com/package/loopback-boot" target="_blank" rel="noopener noreferrer">loopback-boot</a></li><li><a href="https://www.npmjs.com/package/loopback-cli" target="_blank" rel="noopener noreferrer">loopback-cli</a></li><li><a href="https://www.npmjs.com/package/loopback-component-explorer" target="_blank" rel="noopener noreferrer">loopback-component-explorer</a></li><li><a href="https://www.npmjs.com/package/loopback-component-passport" target="_blank" rel="noopener noreferrer">loopback-component-passport</a></li><li><a href="https://www.npmjs.com/package/loopback-component-push" target="_blank" rel="noopener noreferrer">loopback-component-push</a></li><li><a href="https://www.npmjs.com/package/loopback-component-storage" target="_blank" rel="noopener noreferrer">loopback-component-storage</a></li><li><a href="https://www.npmjs.com/package/loopback-context" target="_blank" rel="noopener noreferrer">loopback-context</a></li><li><a href="https://www.npmjs.com/package/loopback-datasource-juggler" target="_blank" rel="noopener noreferrer">loopback-datasource-juggler</a> (version 3.x)</li><li><a href="https://www.npmjs.com/package/loopback-filters" target="_blank" rel="noopener noreferrer">loopback-filters</a></li><li><a href="https://www.npmjs.com/package/loopback-phase" target="_blank" rel="noopener noreferrer">loopback-phase</a></li><li><a href="https://www.npmjs.com/package/loopback-sandbox" target="_blank" rel="noopener noreferrer">loopback-sandbox</a></li><li><a href="https://www.npmjs.com/package/loopback-sdk-angular" target="_blank" rel="noopener noreferrer">loopback-sdk-angular</a></li><li><a href="https://www.npmjs.com/package/loopback-sdk-angular-cli" target="_blank" rel="noopener noreferrer">loopback-sdk-angular-cli</a></li><li><a href="https://www.npmjs.com/package/loopback-soap" target="_blank" rel="noopener noreferrer">loopback-soap</a></li><li><a href="https://www.npmjs.com/package/loopback-swagger" target="_blank" rel="noopener noreferrer">loopback-swagger</a></li><li><a href="https://www.npmjs.com/package/loopback-workspace" target="_blank" rel="noopener noreferrer">loopback-workspace</a></li><li><a href="https://www.npmjs.com/package/strong-remoting" target="_blank" rel="noopener noreferrer">strong-remoting</a></li></ul><p>Please note that connectors are compatible with both LoopBack version 3 and version 4, therefore they are staying actively developed.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="call-to-action">Call to Action<a class="hash-link" href="#call-to-action" title="Direct link to heading">​</a></h2><p>We urge all LoopBack 3 users to migrate their applications to LoopBack 4 as soon as possible. We are providing <a href="https://loopback.io/doc/en/lb4/migration-overview.html" target="_blank" rel="noopener noreferrer">Migration guide</a> and automated tooling to help with the transition.</p><p>If you are building a new project, then we strongly recommend to use LoopBack 4 from the beginning.</p><p>LoopBack's success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here's how you can join us and help the project:</p><ul><li><a href="https://github.com/strongloop/loopback-next/issues" target="_blank" rel="noopener noreferrer">Report issues</a>.</li><li><a href="https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contribute</a> code and documentation.</li><li><a href="https://github.com/strongloop/loopback-next/labels/good%20first%20issue" target="_blank" rel="noopener noreferrer">Open a pull request on one of our "good first issues"</a>.</li><li><a href="https://github.com/strongloop/loopback-next/issues/110" target="_blank" rel="noopener noreferrer">Join</a> our user group.</li></ul>]]></content:encoded>
            <category>LoopBack 3</category>
        </item>
        <item>
            <title><![CDATA[LoopBack 4 January 2020 Milestone Update]]></title>
            <link>https://loopbackio.github.io/january-2020-milestone</link>
            <guid>january-2020-milestone</guid>
            <pubDate>Wed, 05 Feb 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>It's a <a href="https://en.wikipedia.org/wiki/Leap_year" target="_blank" rel="noopener noreferrer">Leap Year</a> this year, and we continue to make leaps in LoopBack 4.</p><p>With New Year's resolutions in mind, we quickly got started on several items.</p><p>Check out the sections below for the progress we made in each area:</p><ul><li><a href="#loopback-4-shopping-example-front-end">LoopBack 4 Shopping Example Front-end</a></li><li><a href="#migration-guide">Migration Guide</a></li><li><a href="#improved-developer-experience">Improved Developer Experience</a></li><li><a href="#improved-performance-of-context">Improved Performance Of Context</a></li><li><a href="#apic-and-loopback-integration">APIC and LoopBack Integration</a></li><li><a href="#community-contributions">Community Contributions</a></li><li><a href="#miscellaneous">Miscellaneous</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="loopback-4-shopping-example-front-end">LoopBack 4 Shopping Example Front-end<a class="hash-link" href="#loopback-4-shopping-example-front-end" title="Direct link to heading">​</a></h2><p>The LoopBack 4 example app now has a website - Shoppy.</p><p><img src="/assets/images/shoppy-6f79d50bb89c9dcc9cea50405f0169cf.png" width="2560" height="1304"></p><p>Check out <a href="https://github.com/strongloop/loopback4-example-shopping/" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback4-example-shopping/</a> and start the app; Shoppy is available at <a href="http://localhost:3000/shoppy.html" target="_blank" rel="noopener noreferrer">http://localhost:3000/shoppy.html</a>.</p><p>This website serves as an example for integrating LoopBack 4 APIs to a front-end and as a basis for you to experiment with various LoopBack 4 features.</p><p>The authorization portion has also been revamped to make it easier to follow.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="migration-guide">Migration Guide<a class="hash-link" href="#migration-guide" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="migrating-boot-scripts">Migrating Boot Scripts<a class="hash-link" href="#migrating-boot-scripts" title="Direct link to heading">​</a></h3><p>In LoopBack 3, predefined boot scripts are organized in the <code>/server/boot</code> directory, and are executed right before the server starts to perform some custom application initialization. The same functionality can also be achieved in LoopBack 4 application by adding observers.
Having the observers created, you can access the application and artifacts like models, datasources by dependency injection or retrieving from the context. Moreover, specifying the order of observers is also supported. For the 2 pre-defined LoopBack 3 boot scripts (<code>/server/boot/root.js</code> and <code>/server/boot/authentication.js</code>), please do not create corresponding observers for them. In LoopBack 4, the router is automatically registered in the rest server and the authentication system is enabled by applying the authentication component. See <a href="https://loopback.io/doc/en/lb4/migration-boot-scripts.html" target="_blank" rel="noopener noreferrer">Migrating boot scripts</a> for more details.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="migrating-remoting-hooks">Migrating Remoting Hooks<a class="hash-link" href="#migrating-remoting-hooks" title="Direct link to heading">​</a></h3><p>In LoopBack 3, a remote hook enables you to execute a function before or after a remote method is called by a client. There are three kinds of hooks: global, model, and method. LoopBack 4 provides the interceptors feature to enable application developers to implement similar functionality.
See <a href="https://loopback.io/doc/en/lb4/migration-models-remoting-hooks.html" target="_blank" rel="noopener noreferrer">Migrating remoting hooks</a> for more details.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="migrating-custom-model-methods">Migrating Custom Model Methods<a class="hash-link" href="#migrating-custom-model-methods" title="Direct link to heading">​</a></h3><p> In LoopBack 3, developers could customize model methods in various ways:</p><ul><li><p>configure which endpoints are public</p></li><li><p>customize the model method, but not the endpoint</p></li><li><p>add a new model method and a new endpoint</p><p>The first could be done by modifying some settings in <code>server/model-config.json</code> or calling the <code>disableRemoteMethodByName( methodName )</code> on the model. The second was accomplished by overriding a default model method inside the model script file. The third was accomplished by adding a new model method and a new remote method definition inside the model script file.</p><p>In LoopBack 4,</p></li><li><p>data-access APIs (model methods) are implemented by repositories that are decoupled from models.</p></li><li><p>REST APIs (remote methods) are implemented by controllers that are decoupled from models.</p></li></ul><p>Migrating the LoopBack 3 model method customizations to LoopBack 4 is very straightforward.
See <a href="https://loopback.io/doc/en/lb4/migration-models-methods.html" target="_blank" rel="noopener noreferrer">Migrating custom model methods</a> for more details.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="spike-for-authentication--authorization-migration-guide">Spike for Authentication &amp; Authorization Migration Guide<a class="hash-link" href="#spike-for-authentication--authorization-migration-guide" title="Direct link to heading">​</a></h3><p>A spike was completed which outlined the remaining tasks required for authentication and authorization migration details between LB3 and LB4.
Please see <a href="https://github.com/strongloop/loopback-next/pull/4440" target="_blank" rel="noopener noreferrer">PR #4440</a> for details.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="improved-developer-experience">Improved Developer Experience<a class="hash-link" href="#improved-developer-experience" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="cli-improvements">CLI Improvements<a class="hash-link" href="#cli-improvements" title="Direct link to heading">​</a></h3><p>The Command Line Interface (CLI) is one of the most convenient tools of LoopBack. With a few commands and basic information, it allows you to create a LoopBack application in a short time. We made some improvements in the following CLI commands to make them more intuitive and flexible (especially the <code>relation</code> one):</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="lb4-relation"><code>lb4 relation</code><a class="hash-link" href="#lb4-relation" title="Direct link to heading">​</a></h4><p>Alright, we admit that our <code>lb4 relation</code> command wasn't entirely user-friendly -- it generated partial code even when you forced it to stop; it didn't handle customized names even when it looked like it would; it didn't support the <code>HasOne</code> relation. We improved on some of these issues. As you can see in the newly updated <a href="https://loopback.io/doc/en/lb4/Relation-generator.html" target="_blank" rel="noopener noreferrer">Relation Generator</a> page, it now takes customized foreign keys and relation names with more descriptive prompt messages. Need an example? We updated the <a href="https://loopback.io/doc/en/lb4/todo-list-tutorial-relations.html" target="_blank" rel="noopener noreferrer">TodoList Example</a> with the latest CLI capabilities.</p><p>Even though the CLI is a handy tool and has a lot of functionality, it still has limitations. For instance, users can customize foreign key names, relation names, source key names, and even the database column names in relations. The newly released CLI changes currently supports some of these, but not all of them. For the latest details on defining relations, you can always check the <a href="https://loopback.io/doc/en/lb4/Relations.html" target="_blank" rel="noopener noreferrer">Relations</a> page.</p><p>As for defining a <code>HasOne</code> relation through the CLI, one of our community users <a href="https://github.com/lokesh1197" target="_blank" rel="noopener noreferrer"><code>@Lokesh1197</code></a> has provided this new capability via <a href="https://github.com/strongloop/loopback-next/pull/4171" target="_blank" rel="noopener noreferrer">PR #4171</a>. See <a href="https://loopback.io/doc/en/lb4/hasOne-relation.html" target="_blank" rel="noopener noreferrer">hasOne Relation</a> and <a href="https://loopback.io/doc/en/lb4/Relation-generator.html" target="_blank" rel="noopener noreferrer">Relation generator</a> for updated documentation.</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="lb4-openapi"><code>lb4 openapi</code><a class="hash-link" href="#lb4-openapi" title="Direct link to heading">​</a></h4><p>LoopBack 4 uses <code>index.ts</code> files to export different kinds of artifacts. The <code>lb4 openapi</code> command wasn't generating/updating this file. We noticed this recently and fixed it immediately. Phew! Don't forgot to install the latest <code>@loopback/cli</code> to get the patch!</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="warning-for-strict-model-usage">Warning for strict model usage<a class="hash-link" href="#warning-for-strict-model-usage" title="Direct link to heading">​</a></h3><p>If you are/used to be an LB3 user, you're probably familiar with the <code>strict</code> mode. It allows you to create models that permit both well-defined and also arbitrary extra properties. LB4 has this nice feature as well. However, it is applicable to <strong>NoSQL</strong> databases only. If you applied this setting to SQL databases, it would get silently discarded and this made it difficult for developers to troubleshoot unexpected behavior.</p><p>Now, users will receive a warning when they try to set a model to <code>{strict: false}</code> mode while they are using a SQL datasource in an LB4 application. We updated the <a href="https://loopback.io/doc/en/lb4/Model.html#supported-entries-of-settings" target="_blank" rel="noopener noreferrer">Supported Entries of Settings</a> table of the <code>Model</code> page to clarify this potential issue.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="improved-performance-of-context">Improved Performance Of Context<a class="hash-link" href="#improved-performance-of-context" title="Direct link to heading">​</a></h2><p>We addressed some context-related performance degredation bugs that recently came in. It turns out that matching all bindings by a filter function can be expensive. <a href="https://github.com/strongloop/loopback-next/pull/4377" target="_blank" rel="noopener noreferrer">PR #4377</a> addresses these bugs and improves performance for one of the primary usages of the context - find bindings by tags.</p><p>Performance was improved by:</p><ul><li>making a binding to be an EventEmitter (emitting events when binding scope/tags/value are changed)</li><li>setting up event listeners in the context to react to binding events to maintain an index of bindings by tag</li><li>optimizing Context.findByTag to leverage binding index if possible</li><li>changing interceptor to find matching global interceptors by tag</li><li>simple benchmark testing shows over 15% gain for hello-world</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="apic-and-loopback-integration">APIC and LoopBack Integration<a class="hash-link" href="#apic-and-loopback-integration" title="Direct link to heading">​</a></h2><p>We started to investigate the steps required, if needed, on importing OpenAPI specs generated from a LoopBack 4 application into IBM API Connect v2018. There are additional extended configurations and APIC product files that are needed in order to import the API successfully. As the next step, we will be testing all endpoints of our example shopping application with API Connect, and documenting the steps. For details on the spike, see <a href="https://github.com/strongloop/loopback-next/issues/4115" target="_blank" rel="noopener noreferrer">https://github.com/strongloop/loopback-next/issues/4115</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="community-contributions">Community Contributions<a class="hash-link" href="#community-contributions" title="Direct link to heading">​</a></h2><ul><li><a href="https://github.com/lokesh1197" target="_blank" rel="noopener noreferrer"><code>@Lokesh1197</code></a> updated our relation CLI with the ability to define a <code>HasOne</code> relation via <a href="https://github.com/strongloop/loopback-next/pull/4171" target="_blank" rel="noopener noreferrer">PR #4171</a>. See <a href="https://loopback.io/doc/en/lb4/hasOne-relation.html" target="_blank" rel="noopener noreferrer">hasOne Relation</a> and <a href="https://loopback.io/doc/en/lb4/Relation-generator.html" target="_blank" rel="noopener noreferrer">Relation generator</a> for updated documentation.</li><li><a href="https://github.com/achrinza" target="_blank" rel="noopener noreferrer"><code>@achrinza</code></a> has made several small improvements/clarifications in our documentation.</li><li><a href="https://github.com/dougal83" target="_blank" rel="noopener noreferrer"><code>@dougal83</code></a> added the title property to filter schemas (filter, where, scope) in preparation for openapi schema consolidation. See <a href="https://github.com/strongloop/loopback-next/pull/4355" target="_blank" rel="noopener noreferrer">PR#4355</a> for more details.</li></ul><p>A big 'Thank you!' to all our contributors! :)</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="miscellaneous">Miscellaneous<a class="hash-link" href="#miscellaneous" title="Direct link to heading">​</a></h2><ul><li>We improved the Transaction interface in loopback-connector by adding an <code>isActive()</code> method. This allows you to determine if the connection object on the transaction is present or not. Suppose you have a transaction instance called <code>tx</code>, you can call <code>tx.isActive()</code> to check the activeness of its connection without throwing an error (if an error happens). See <a href="https://github.com/strongloop/loopback-next/pull/4474" target="_blank" rel="noopener noreferrer">PR #4474</a> and <a href="https://github.com/strongloop/loopback-next/pull/4537" target="_blank" rel="noopener noreferrer">PR #4537</a>, and <a href="https://loopback.io/doc/en/lb4/Using-database-transactions.html" target="_blank" rel="noopener noreferrer">Using database transactions</a> for details.</li><li>Updated Todo and TodoList Tutorials. The Todo and TodoList tutorials and examples are a great place to start learning about LoopBack 4. As our CLI prompts and generated artifacts have changed and improved over time, we recently started noticing that our documentation and code snippets were slightly out-of-date, and there was a bug as well. We decided it was time to update these fun tutorials and examples. <a href="https://github.com/strongloop/loopback-next/pull/4412" target="_blank" rel="noopener noreferrer">PR #4412</a> addressed these issues. Please see <a href="https://loopback.io/doc/en/lb4/todo-tutorial.html" target="_blank" rel="noopener noreferrer">Todo tutorial</a>,<a href="https://loopback.io/doc/en/lb4/todo-list-tutorial.html" target="_blank" rel="noopener noreferrer">TodoList tutorial</a>, <a href="https://github.com/strongloop/loopback-next/tree/master/examples/todo" target="_blank" rel="noopener noreferrer">Todo Example</a>, and <a href="https://github.com/strongloop/loopback-next/tree/master/examples/todo-list" target="_blank" rel="noopener noreferrer">TodoList Example</a> for the latest and greatest.</li><li>Fixed problem where CLI commands generate artifacts with lint problems. See <a href="https://github.com/strongloop/loopback-next/pull/4431" target="_blank" rel="noopener noreferrer">PR #4431</a> for details.</li><li>Improved <code>@loopback/authorization</code>'s README.md document to include detailed steps of implementing a basic RBAC system. See <a href="https://github.com/strongloop/loopback-next/pull/4405" target="_blank" rel="noopener noreferrer">PR #4205</a> for details.</li><li>Updated <code>strong-docs</code>'s dependencies to use the latest TypeScript 3.7. See <a href="https://github.com/strongloop/strong-docs/pull/128" target="_blank" rel="noopener noreferrer">PR #128</a> for details.</li><li>Added alias support for header language 'zh-cn' and 'zh-tw' in <code>strong-globalize</code>. See <a href="https://github.com/strongloop/strong-globalize/pull/151" target="_blank" rel="noopener noreferrer">PR #151</a> and <a href="https://github.com/strongloop/strong-globalize/pull/153" target="_blank" rel="noopener noreferrer">PR #153</a> for details.</li><li>Fixed problem with complex objects for query params in api explorer. See <a href="https://github.com/strongloop/loopback-next/pull/4347" target="_blank" rel="noopener noreferrer">PR#4347</a> for details.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="whats-next">What's Next?<a class="hash-link" href="#whats-next" title="Direct link to heading">​</a></h2><p>If you're interested in what we're working on next, you can check out the <a href="https://github.com/strongloop/loopback-next/issues/4543" target="_blank" rel="noopener noreferrer">February Milestone</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="call-to-action">Call to Action<a class="hash-link" href="#call-to-action" title="Direct link to heading">​</a></h2><p>In 2020, we look forward to helping you and seeing you around! LoopBack's success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here's how you can join us and help the project:</p><ul><li><a href="https://github.com/strongloop/loopback-next/issues" target="_blank" rel="noopener noreferrer">Report issues</a>.</li><li><a href="https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contribute</a> code and documentation.</li><li><a href="https://github.com/strongloop/loopback-next/labels/good%20first%20issue" target="_blank" rel="noopener noreferrer">Open a pull request on one of our "good first issues"</a>.</li><li><a href="https://github.com/strongloop/loopback-next/issues/110" target="_blank" rel="noopener noreferrer">Join</a> our user group.</li></ul>]]></content:encoded>
            <category>Milestone update</category>
        </item>
        <item>
            <title><![CDATA[LoopBack 4 2019 Q4 Overview]]></title>
            <link>https://loopbackio.github.io/loopback4-2019-q4-overview</link>
            <guid>loopback4-2019-q4-overview</guid>
            <pubDate>Wed, 22 Jan 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>Happy New Year! The number of LoopBack 4 downloads in 2019 increased more than double than that in 2018. Thank you for your continuous support in using and contributing to LoopBack. We cannot do this alone and we really appreciate all the contributions from the community. In December, we were happy to have 3 community members join us as maintainers: <a href="https://github.com/derdeka" target="_blank" rel="noopener noreferrer">@derdeka</a>, <a href="https://github.com/dougal83" target="_blank" rel="noopener noreferrer">dougal83</a> and <a href="https://github.com/achrinza" target="_blank" rel="noopener noreferrer">achrinza</a>!</p><p>As year 2020 commences, let us summarize our development activities in the last quarter of 2019.</p><ul><li><a href="#migration-guide">Migration Guide</a>: created the outline for general runtime migration and added details on migrating Express middleware and model relations.</li><li><a href="#going-cloud-native">Going cloud native</a>: added extensions for observability and deployment documentation</li><li><a href="#authentication-and-authorization">Authentication and authorization</a>: enhanced the documentation and enabled token based authentication in API Explorer</li><li><a href="#inclusion-of-related-models">Inclusion of Related Models</a>: completed MVP and ability to allow custom scope.</li><li><a href="#partition-key-with-cloudant-and-couchdb">Partition Key with Cloudant and CouchDB</a>: added support for partitioned database</li><li><a href="#creating-rest-api-from-model-classes">Creating REST API from Model Classes</a>: added the ability to generate controller from Model and Repository classes</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="migration-guide">Migration Guide<a class="hash-link" href="#migration-guide" title="Direct link to heading">​</a></h2><p>Enriching the <a href="https://github.com/strongloop/loopback-next/issues/453" target="_blank" rel="noopener noreferrer">Migration Guide from LB3</a> story is our focus of this quarter and will continue to be the focus. Adding on top of the comparison between the concepts in LoopBack 3 and that in LoopBack 4, we created the skeleton on the areas that need more explanation in the migration. You can find it on our site: <a href="https://loopback.io/doc/en/lb4/migration-overview.html" target="_blank" rel="noopener noreferrer">Migration Guide</a></p><p>In Q4, we added pages for migrating: <a href="https://loopback.io/doc/en/lb4/migration-models-core.html" target="_blank" rel="noopener noreferrer">Model</a>, <a href="https://loopback.io/doc/en/lb4/migration-datasources.html" target="_blank" rel="noopener noreferrer">Datasource</a>, <a href="https://loopback.io/doc/en/lb4/migration-models-relations.html" target="_blank" rel="noopener noreferrer">Model Relation</a>, <a href="https://loopback.io/doc/en/lb4/migration-express-middleware.html" target="_blank" rel="noopener noreferrer">Express Middleware</a>, etc. If there are other topics you'd like to see in the migration guide, please let us know on <a href="https://github.com/strongloop/loopback-next/issues/453" target="_blank" rel="noopener noreferrer">GitHub</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="going-cloud-native">Going Cloud Native<a class="hash-link" href="#going-cloud-native" title="Direct link to heading">​</a></h2><p>In the past few months, we made significant amount of enhancement in the cloud native area. Not only we added the extensions for logging, health check, tracing and metrics, we also created the deployment to Kubernetes tutorial in our shopping example application. For details, take a look at the <a href="https://strongloop.com/strongblog/going-cloud-native-with-loopback-4/" target="_blank" rel="noopener noreferrer">blog post</a> from <a href="https://strongloop.com/authors/Raymond_Feng/" target="_blank" rel="noopener noreferrer">Raymond</a>.</p><p>Besides, the Node.js LoopBack stack provides a powerful solution to build microservices in TypeScript with LoopBack. Appsody is an open source project that makes creating cloud native applications simple. It has many cool features which are pre-configured with cloud native capabilities for Kubernetes and Knative deployments. In our detailed <a href="https://loopback.io/doc/en/lb4/Appsody-LoopBack.html" target="_blank" rel="noopener noreferrer">Appsody with LoopBack Tutorial</a> on developing and deploying LoopBack applications, we would like to show you the possibility and potential of how these kinds of tools can work well with LoopBack of building microservices.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="authentication-and-authorization">Authentication and Authorization<a class="hash-link" href="#authentication-and-authorization" title="Direct link to heading">​</a></h2><p>We added the support for authentication and authorization in LoopBack 4. Check out the <a href="https://loopback.io/doc/en/lb4/Loopback-component-authentication.html" target="_blank" rel="noopener noreferrer">Authentication page</a> and the <a href="https://loopback.io/doc/en/lb4/Loopback-component-authorization.html" target="_blank" rel="noopener noreferrer">Authorization page</a> for the latest features. Want to try out a real-world example? We updated the <a href="https://github.com/strongloop/loopback4-example-shopping" target="_blank" rel="noopener noreferrer">shopping example application</a> to use the authentication and authorization systems to help you get familiar with it.</p><p>Also, we made some progress on the story <em>allow users to have token-based authentication in API Explorer</em> in Q4. Starting with <a href="https://github.com/strongloop/loopback-next/issues/2027" target="_blank" rel="noopener noreferrer">a spike</a> as the blueprint, we now added an extension point for the OpenAPI enhancers as the first brick in the wall. Check out the <a href="https://loopback.io/doc/en/lb4/Extending-OpenAPI-specification.html" target="_blank" rel="noopener noreferrer">"Extending OpenAPI Specification"</a> page for details. As always, we'd love to get any help from you. Here are some follow-up stories if you're interested in contributing:</p><ul><li><a href="https://github.com/strongloop/loopback-next/issues/4380" target="_blank" rel="noopener noreferrer">Add OpenAPI enhancer service in @loopback/rest</a></li><li><a href="https://github.com/strongloop/loopback-next/issues/4385" target="_blank" rel="noopener noreferrer">Ordering the enhancers by group name for OpenAPI spec enhancer service </a></li><li><a href="https://github.com/strongloop/loopback-next/issues/4386" target="_blank" rel="noopener noreferrer">Add bearer auth scheme as the default security scheme</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="inclusion-of-related-models">Inclusion of Related Models<a class="hash-link" href="#inclusion-of-related-models" title="Direct link to heading">​</a></h2><p>We finished the Inclusion of Related Models <a href="https://github.com/strongloop/loopback-next/issues/1352" target="_blank" rel="noopener noreferrer">MVP</a> in Q4! This addition not only simplifies querying data and reduces database calls in LoopBack 4, but it closes one feature gap between LoopBack 3 and LoopBack 4 as well.</p><p>In the past few months, we released a bunch of features such as <a href="https://loopback.io/doc/en/lb4/HasMany-relation.html#query-multiple-relations" target="_blank" rel="noopener noreferrer">custom scope for inclusion</a>, and we <a href="https://github.com/strongloop/loopback-next/issues/3451" target="_blank" rel="noopener noreferrer">added inclusion resolvers to lb4 relation CLI</a>, etc. We enhanced the <a href="https://loopback.io/doc/en/lb4/HasMany-relation.html#querying-related-models" target="_blank" rel="noopener noreferrer">documentation</a> with examples and usages along with <a href="https://strongloop.com/strongblog/inclusion-of-related-models/" target="_blank" rel="noopener noreferrer">a blog post</a> to show how you can query data over different relations easily. Still, there are some limitations and unfinished tasks. Check <a href="https://github.com/strongloop/loopback-next/issues/3585" target="_blank" rel="noopener noreferrer">Post MVP</a> if you'd like to contribute.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="partition-key-with-cloudant-and-couchdb">Partition Key with Cloudant and CouchDB<a class="hash-link" href="#partition-key-with-cloudant-and-couchdb" title="Direct link to heading">​</a></h2><p>Speaking of better performance and manageability of databases, the database that supports partitioning is one of the ideal choices. Are you considering to use databases that have the feature such as Cloudant and CouchDB with LoopBack? We now support such features in the corresponding connectors. It not only makes the query less computationally, but also reduces cost for LoopBack users using the Cloudant service on IBM Cloud. We have prepared a tutorial and documentation to help you get started! See the details and examples on the usage in <a href="https://github.com/strongloop/loopback-connector-cloudant/blob/master/doc/partitioned-db.md" target="_blank" rel="noopener noreferrer">Partition Databases</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="creating-rest-api-from-model">Creating REST API from Model<a class="hash-link" href="#creating-rest-api-from-model" title="Direct link to heading">​</a></h2><p>As LoopBack 4 provides more scalability and extensibility, we ask users to create artifacts such as Model, Datasource, Repository, and Controller to start building their applications. Compared to LoopBack 3, it adds complexity and extra steps to create APIs. This story aims to improve the developer experience for those who may not need that extra flexibility.</p><p>You might wonder how simple it would be. In the <a href="https://github.com/strongloop/loopback-next/pull/4235" target="_blank" rel="noopener noreferrer">spike</a>, if you already have the database (we use MySQL in the spike) and tables set up, you can create basic CRUD APIs just through the API Explorer. For example, all you need to do is to make a POST request with a valid MySQL connection string and a list of existing tables,</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string-property property" style="color:#36acaa">"connectionString"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"mysql://root@localhost/test"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string-property property" style="color:#36acaa">"tableNames"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"Coffeeshop"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>then the new endpoints will be created for you.</p><p>Implementations are on the way! Feel free to try out the spike and join the discussion on GitHub :D</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="whats-next">What's Next?<a class="hash-link" href="#whats-next" title="Direct link to heading">​</a></h2><p>If you have been following us, you probably realize that we now start our planning of the milestones and roadmaps with a pull request. We think it is useful to our users to get to know our plans and possibly provide inputs in our planning stage. See our <a href="https://github.com/strongloop/loopback-next/blob/master/docs/ROADMAP.md#2020-goals-and-focus" target="_blank" rel="noopener noreferrer">2020 Goals and Focus</a> and <a href="https://github.com/strongloop/loopback-next/blob/master/docs/ROADMAP.md#q1-2020-roadmap" target="_blank" rel="noopener noreferrer">Q1 roadmap</a>. There is also the <a href="https://github.com/strongloop/loopback-next/issues/4376" target="_blank" rel="noopener noreferrer">Janurary milestone</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="previous-milestone-blogs">Previous Milestone Blogs<a class="hash-link" href="#previous-milestone-blogs" title="Direct link to heading">​</a></h2><p>Check out our previously published monthly milestone blog posts in Q4 for more details:</p><ul><li><a href="https://strongloop.com/strongblog/october-2019-milestone/" target="_blank" rel="noopener noreferrer">October milestone blog</a></li><li><a href="https://strongloop.com/strongblog/november-2019-milestone/" target="_blank" rel="noopener noreferrer">November milestone blog</a></li><li><a href="https://strongloop.com/strongblog/december-2019-milestone/" target="_blank" rel="noopener noreferrer">December milestone blog</a></li></ul><p>If you want to see a 2019 summary, don't forget to check out <a href="https://strongloop.com/strongblog/loopback-2019-review/" target="_blank" rel="noopener noreferrer">this blog</a>!</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="call-for-action">Call for Action<a class="hash-link" href="#call-for-action" title="Direct link to heading">​</a></h2><p>LoopBack's success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:</p><ul><li><a href="https://github.com/strongloop/loopback-next/issues" target="_blank" rel="noopener noreferrer">Reporting issues</a>.</li><li><a href="https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contributing</a>
code and documentation.</li><li><a href="https://github.com/strongloop/loopback-next/labels/good%20first%20issue" target="_blank" rel="noopener noreferrer">Opening a pull request on one of our "good first issues"</a>.</li></ul>]]></content:encoded>
            <category>Quarterly update</category>
        </item>
        <item>
            <title><![CDATA[LoopBack 4 December 2019 Milestone Update]]></title>
            <link>https://loopbackio.github.io/december-2019-milestone</link>
            <guid>december-2019-milestone</guid>
            <pubDate>Wed, 08 Jan 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Originally published on strongloop.com]]></description>
            <content:encoded><![CDATA[<p><em>Originally published on <a href="https://strongloop.com" target="_blank" rel="noopener noreferrer">strongloop.com</a></em></p><p>It's 2️⃣0️⃣2️⃣0️⃣!</p><p>Happy New Year! Is the snow dancing outside of your window or is the sunshine bringing warmth and glow to the grass around you? No matter where you are, the LoopBack team is thankful for you being with us through 2019! It means a lot to us that you choose LoopBack for your applications and projects.</p><p>We're also excited to have <a href="https://github.com/derdeka" target="_blank" rel="noopener noreferrer">Denny</a>, <a href="https://github.com/dougal83" target="_blank" rel="noopener noreferrer">Douglas</a>, and <a href="https://github.com/achrinza" target="_blank" rel="noopener noreferrer">Rifa</a> as LoopBack maintainers! They've been actively helpful in our community. We appreciate all the contributions and great work. Welcome to the team!</p><p>Even though this past December was a short month due to the holidays, the list of the accomplished tasks is not short! Check out the sections below for the progress we made in each area:</p><ul><li><a href="#from-model-definition-to-rest-api">From Model Definition to REST API</a>: build a LB4 app with just models!</li><li><a href="#inclusion-of-related-models">Inclusion of Related Models</a>: enable custom scope for inclusion.</li><li><a href="#authentication">Authentication</a>: new added user profile factory and StrategyAdapter.</li><li><a href="#allowing-interceptor-to-be-invoked-based-on-the-source">@loopback/context Improvement</a>: invoke interceptors based on their callers.</li><li><a href="#improving-application-life-cycle-states">Application Life Cycle</a>: application states and the shutdown hooks.</li><li><a href="#openapi-enhancer-service">OpenAPI Enhancer Service</a>: contribute OpenAPI spec pieces from extensions.</li><li><a href="#improving-juggler-and-connectors">Improving Juggler and Connectors</a>: new property settings.</li><li><a href="#new-eslint-rules">New ESLint Rules</a>: applied new <code>@typescript-eslint</code> rules.</li><li><a href="#documentation-improvements">Documentation Improvements</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="from-model-definition-to-rest-api">From Model Definition to REST API<a class="hash-link" href="#from-model-definition-to-rest-api" title="Direct link to heading">​</a></h2><p>Initially, LoopBack 4 required all artifacts (Model, Repository, and Controller classes) to be defined in TypeScript source files. Recently, we started to work on a declarative approach, where the Repository and Controller classes can be created dynamically at runtime (see <a href="https://github.com/strongloop/loopback-next/tree/master/packages/rest-crud" target="_blank" rel="noopener noreferrer"><code>@loopback/rest-crud</code></a> package).</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="discovering-models-and-building-rest-apis-at-runtime">Discovering Models and Building REST APIs at Runtime<a class="hash-link" href="#discovering-models-and-building-rest-apis-at-runtime" title="Direct link to heading">​</a></h3><p>This month, we pushed this concept one step further and implemented a proof of concept showing how to dynamically build CRUD REST API for any SQL database table:</p><ol><li>Discover model definition from a database, build <code>ModelDefinition</code> object from the discovered schema</li><li>Define a model class from a <code>ModelDefinition</code> object</li><li>Define a CRUD repository class for the given model</li><li>Define a CRUD REST API controller class for the given model &amp; repository</li></ol><p>The demo application can be found in the pull request <a href="https://github.com/strongloop/loopback-next/pull/4235" target="_blank" rel="noopener noreferrer">loopback-next #4235</a>.</p><p>To make this scenario possible, we needed to make few improvements:</p><ul><li><a href="https://github.com/strongloop/loopback-datasource-juggler/pull/1807" target="_blank" rel="noopener noreferrer">loopback-datasource-juggler #1807</a> fixes TypeScript typings in <code>loopback-datasource-juggler</code> to make DataSource APIs like <code>discoverSchema</code> easier to consume using <code>await</code> keyword.</li><li><a href="https://github.com/strongloop/loopback-next/pull/4266" target="_blank" rel="noopener noreferrer">loopback-next #4266</a> adds a new API <code>defineModelClass</code> that builds a Model class constructor using the given base model (e.g. <code>Entity</code>) and the given <code>ModelDefinition</code>.</li></ul><p>As part of the experiment, we have again encountered the limitation of our REST layer when controllers registered after startup are not picked up. This feature is discussed in <a href="https://github.com/strongloop/loopback-next/issues/433" target="_blank" rel="noopener noreferrer">loopback-next #433</a>. Feel free to chime in and perhaps contribute a pull request if this use case is important for your projects.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="model-api-builder-package">Model API Builder Package<a class="hash-link" href="#model-api-builder-package" title="Direct link to heading">​</a></h3><p>We introduced a new package <code>@loopback/model-api-builder</code> for building APIs from models. This package allows users to build repositories and controllers based on their models through their defined extensions. We also added <code>ModelApiBooter</code> that leverages Model API builders contributed via <code>ExtensionPoint</code>/<code>Extension</code> to implement the actual API building. See <a href="https://github.com/strongloop/loopback-next/tree/master/packages/model-api-builder" target="_blank" rel="noopener noreferrer">README</a> file for details.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="inclusion-of-related-models">Inclusion of Related Models<a class="hash-link" href="#inclusion-of-related-models" title="Direct link to heading">​</a></h2><p>We managed to finish the Inclusion of Related Models <a href="https://github.com/strongloop/loopback-next/issues/1352" target="_blank" rel="noopener noreferrer">MVP</a> in 2019! Check out the <a href="https://github.com/strongloop/loopback-next/issues/3585" target="_blank" rel="noopener noreferrer">Post MVP</a> if you'd like to contribute.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="enabling-inclusion-with-custom-scope">Enabling inclusion with custom scope<a class="hash-link" href="#enabling-inclusion-with-custom-scope" title="Direct link to heading">​</a></h3><p>Traversing data through different relations is a common use case in real world. Take a nested relation as an example, a <code>Customer</code> might be interested in the <code>Shipment</code> status of their <code>Order</code>:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token maybe-class-name">Customer</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'where\'s my order at'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  orders</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'order 1'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      shipment</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        shipment_id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">123</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'order 2'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      shipment</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        shipment_id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">999</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>In <a href="https://github.com/strongloop/loopback-next/pull/4263" target="_blank" rel="noopener noreferrer">PR #4263</a>, we enabled such traversal by allowing users to customize the <code>scope</code> field for their query filter. The above example can be achieved by the following query:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">customerRepo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">find</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  include</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      relation</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'orders'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      scope</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        include</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">relation</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'shipment'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>More use cases and examples are added to the page <a href="https://loopback.io/doc/en/lb4/HasMany-relation.html#query-multiple-relations" target="_blank" rel="noopener noreferrer">Query Multiple Relations</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="handling-navigational-properties-with-crud-operations">Handling navigational properties with CRUD operations<a class="hash-link" href="#handling-navigational-properties-with-crud-operations" title="Direct link to heading">​</a></h3><p>It's convenient to traverse related models with relations. However, when it comes to operations such as creation and updating, navigational properties might cause some unexpected problems. In <a href="https://github.com/strongloop/loopback-next/pull/4148" target="_blank" rel="noopener noreferrer">PR #4148</a>, we decided to reject CRUD operations that contain any navigational properties. For example, the request to create a <code>Customer</code> with its <code>Address</code> will be rejected:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">customerRepo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'customer'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  address</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      street</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'nav property'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      city</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'should not be included'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="authentication">Authentication<a class="hash-link" href="#authentication" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="user-profile-factory-interface">User Profile Factory Interface<a class="hash-link" href="#user-profile-factory-interface" title="Direct link to heading">​</a></h3><p>We've added a <em>convenience</em> function interface named <a href="https://github.com/strongloop/loopback-next/blob/0630194539ba7971ca6c6579ebb9d986e6340a41/packages/authentication/src/types.ts#L34-L36" target="_blank" rel="noopener noreferrer"><code>UserProfileFactory&lt;U&gt;</code></a> to <code>@loopback/authentication</code>. Implement this interface with your own custom user profile factory function to convert your specific user model into a <a href="https://github.com/strongloop/loopback-next/blob/9e40e43bd1c9fe71155087341b0fc590ee9d67e3/packages/security/src/types.ts#L37-L42" target="_blank" rel="noopener noreferrer">UserProfile</a> model (used by both <code>@loopback/authentication</code> and <code>@loopback/authorization</code>).</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="strategyadapter-improvements">StrategyAdapter Improvements<a class="hash-link" href="#strategyadapter-improvements" title="Direct link to heading">​</a></h3><p>The <code>StrategyAdapter</code> in <code>@loopback/authentication-passport</code> now takes in an additional argument <code>userProfileFactory</code> in its constructor. This argument is initialized with a default implementation of the <code>UserProfileFactory&lt;U&gt;</code> interface, mentioned above, and simply returns your specific user model as a user profile model. It is recommended that you implement your own user profile factory function to map a specific/minimal set of properties from your custom user model to the user profile model. Please see the <a href="https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-passport" target="_blank" rel="noopener noreferrer">updated documentation</a> for more details.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="allowing-interceptor-to-be-invoked-based-on-the-source">Allowing Interceptor to Be Invoked Based on the Source<a class="hash-link" href="#allowing-interceptor-to-be-invoked-based-on-the-source" title="Direct link to heading">​</a></h2><p>Some interceptors want to check the caller to decide if its logic should be applied. For example, an http access logger only cares about invocations from the rest layer to the first controller. In <a href="https://github.com/strongloop/loopback-next/pull/4168" target="_blank" rel="noopener noreferrer">PR #4168</a>, we added an option <code>source</code>, which can check the caller that invokes a method with interceptors. Check out the <a href="https://loopback.io/doc/en/lb4/Interceptors.html#source-for-an-invocation" target="_blank" rel="noopener noreferrer">Interceptors page</a> for relative documentation and examples.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="improving-application-life-cycle-states">Improving Application Life Cycle States<a class="hash-link" href="#improving-application-life-cycle-states" title="Direct link to heading">​</a></h2><p>It’s often desirable for various types of artifacts to participate in the life cycles and perform related operations. In <a href="https://github.com/strongloop/loopback-next/pull/4145" target="_blank" rel="noopener noreferrer">PR #4145</a>, we improved the the check for application states and also add the shutdown hooks which allows graceful shutdown when the application is running inside a managed container such as Kubernetes Pods. Please check the related documentation and examples on the site <a href="https://loopback.io/doc/en/lb4/Life-cycle.html#application-states" target="_blank" rel="noopener noreferrer">Life cycle events and observers</a> to help you understand more about the LoopBack 4 application life cycle.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="openapi-enhancer-service">OpenAPI Enhancer Service<a class="hash-link" href="#openapi-enhancer-service" title="Direct link to heading">​</a></h2><p>We've added a new extension point <code>OASEnhancerService</code> to allow the OpenAPI specification (short for OAS) contributions to a rest application. The feature originated from the need to add security schemes and policies to a LoopBack application's OAS. Now you can modify your application's OAS by creating and registering OAS enhancers.</p><p>A typical OAS enhancer implements interface <code>OASEnhancer</code> which has a string type <code>name</code> field and a function <code>modifySpec()</code>. For example, to modify the <code>info</code> field of an OAS, you can create an <code>InfoSpecEnhancer</code> as follows:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports">bind</span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/core'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"></span><br></span><span class="token-line" style="color:#393A34"><span class="token imports">  mergeOpenAPISpec</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"></span><br></span><span class="token-line" style="color:#393A34"><span class="token imports">  asSpecEnhancer</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"></span><br></span><span class="token-line" style="color:#393A34"><span class="token imports">  </span><span class="token imports maybe-class-name">OASEnhancer</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"></span><br></span><span class="token-line" style="color:#393A34"><span class="token imports">  </span><span class="token imports maybe-class-name">OpenApiSpec</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"></span><br></span><span class="token-line" style="color:#393A34"><span class="token imports"></span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@loopback/openapi-v3'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">bind</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">asSpecEnhancer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">InfoSpecEnhancer</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">implements</span><span class="token plain"> </span><span class="token class-name maybe-class-name">OASEnhancer</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// give your enhancer a proper name</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'info'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// the function to modify your OpenAPI specification and return a new one</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">modifySpec</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">spec</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">OpenApiSpec</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">OpenApiSpec</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">InfoPatchSpec</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      info</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">title</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'LoopBack Test Application'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> version</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1.0.1'</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> mergedSpec </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">mergeOpenAPISpec</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">spec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token maybe-class-name">InfoPatchSpec</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> mergedSpec</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Then bind it to your application by <code>this.add(createBindingFromClass(InfoSpecEnhancer))</code>.</p><p>The OAS enhancer service organizes all the registered enhancers, and is able to apply one or all of them. You can check <a href="https://loopback.io/doc/en/lb4/Extending-OpenAPI-specification.html" target="_blank" rel="noopener noreferrer">"Extending OpenAPI specification"</a> documentation to learn more about creating and registering OAS enhancers, adding OAS enhancer service and applying its enhancers.</p><p>We will allow users to have token-based authentication in API Explorer in the near future. Please check our future milestone blogs.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="improving-juggler-and-connectors">Improving Juggler and Connectors<a class="hash-link" href="#improving-juggler-and-connectors" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="improving-performance---persistdefaultvalues-model-property-setting">Improving Performance - persistDefaultValues Model Property Setting<a class="hash-link" href="#improving-performance---persistdefaultvalues-model-property-setting" title="Direct link to heading">​</a></h3><p>We have added a new model-property property <code>persistDefaultValues</code>, which prevents a property value that matches the default from being written to the database when it set to <code>false</code>.</p><p>This is particularly useful when you have a model with a lot of properties or sub-properties whose values may be the default value, and these models run into thousands or maybe millions. Setting <code>persistDefaultValues</code> to <code>false</code> can drastically reduce the write time and size of the database. This setting is applicable to LB4 and LB3. Check the document on our site: <a href="https://loopback.io/doc/en/lb3/Model-definition-JSON-file.html#general-property-properties" target="_blank" rel="noopener noreferrer">Property</a>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="allowing-string-type-attribute-to-be-auto-generated-in-postgresql">Allowing String Type Attribute to Be Auto-generated in PostgreSQL<a class="hash-link" href="#allowing-string-type-attribute-to-be-auto-generated-in-postgresql" title="Direct link to heading">​</a></h3><p><a href="https://loopback.io/doc/en/lb4/Database-migrations.html" target="_blank" rel="noopener noreferrer">Auto-migration</a> is a convenient tool to help you create relational database schemas based on definitions of your models. Typically, auto-migration would use the database's <em>default type</em> as the primary key type. For example, the default type of MySQL is integer, and the default type of MongoDB is string. We've added a field <code>useDefaultIdType</code> before that allows you to use other types than the default type when doing auto-migration. For example, for MySQL, the following setting allows you to have a string type primary key in tables:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">property</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'string'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  useDefaultIdType</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// generated: true -&gt; can not be set</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>However, sometimes users want to have auto-generate primary key with non-default type. For instance, a common use case is having <code>uuid</code> as the primary key in MySQL or PostgreSQL. We enable the auto-generated <code>uuid</code> with auto-migration for PostgreSQL. In short, the following setting enables auto-generated <code>uuid</code>:</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token decorator at operator" style="color:#393A34">@</span><span class="token decorator function" style="color:#d73a49">property</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'string'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  generated</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  useDefaultIdType</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// this is needed if this property is id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  postgresql</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dataType</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'uuid'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">id</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">String</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>By default, when the user wants to auto-generate string type properties in PostgreSQL, we use <code>uuid</code> and the function <code>uuid_generate_v4()</code>. It is possible to use other extensions and functions. Please check on the site for more details: <a href="https://loopback.io/doc/en/lb3/PostgreSQL-connector.html#discovery-and-auto-migration" target="_blank" rel="noopener noreferrer">PostgreSQL connector</a>.</p><p>This feature will be added to MySQL in the near future.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="new-eslint-rules">New ESLint Rules<a class="hash-link" href="#new-eslint-rules" title="Direct link to heading">​</a></h2><p>We have enabled several new <code>@typescript-eslint</code> rules to detect more kinds of potential programming errors. These new rules will trigger a semver-major release of the package <code>@loopback/eslint-config</code>. Be prepared to handle new violations after upgrading.</p><p>List of new checks:</p><ul><li><a href="https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/return-await.md" target="_blank" rel="noopener noreferrer"><code>return-await</code></a></li><li><a href="https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-extra-non-null-assertion.md" target="_blank" rel="noopener noreferrer"><code>no-extra-non-null-assertion</code></a></li><li><a href="https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.md" target="_blank" rel="noopener noreferrer"><code>prefer-nullish-coalescing</code></a></li><li><a href="https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-optional-chain.md" target="_blank" rel="noopener noreferrer"><code>prefer-optional-chain</code></a></li></ul><p>As part of this effort, we migrated our code base to use <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#nullish-coalescing" target="_blank" rel="noopener noreferrer">nullish coalescing</a> and <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#optional-chaining" target="_blank" rel="noopener noreferrer">optional chaining</a> operators.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="documentation-improvements">Documentation Improvements<a class="hash-link" href="#documentation-improvements" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="appsody--loopback-4-tutorial">Appsody / LoopBack 4 Tutorial<a class="hash-link" href="#appsody--loopback-4-tutorial" title="Direct link to heading">​</a></h3><p><a href="https://appsody.dev/" target="_blank" rel="noopener noreferrer">Appsody</a> is an open source project that makes creating cloud native applications simple. It provides application stacks for open source runtimes and frameworks, which are pre-configured with cloud native capabilities for Kubernetes and Knative deployments.</p><p>In August, LoopBack was added as one of the application stacks in Appsody to provide a powerful solution to build open APIs and Microservices in TypeScript. The name of the stack is <a href="https://github.com/appsody/stacks/tree/master/incubator/nodejs-loopback" target="_blank" rel="noopener noreferrer">nodejs-loopback</a>.</p><p>Please refer to our tutorial <a href="https://loopback.io/doc/en/lb4/Appsody-LoopBack.html" target="_blank" rel="noopener noreferrer">Developing and Deploying LoopBack Applications with Appsody</a> for detailed instructions on how to use the Appsody CLI to:</p><ul><li>scaffold, run, stop, debug, and test a LoopBack 4 application locally</li><li>build and deploy the application to Kubernetes on the IBM Cloud</li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="migrating-middleware-from-lb3-to-lb4">Migrating Middleware from LB3 to LB4<a class="hash-link" href="#migrating-middleware-from-lb3-to-lb4" title="Direct link to heading">​</a></h3><p>We enhanced the documentation and updated the tutorial of migrating LB3 application on a new LB4 app. By mounting the LB3 middleware with a base Express application, the middleware can be shared by both LB3 and LB4 apps. For example, you can use REST APIs in your LB3 app with a new LB4 application, which will be helpful if you are a LB3 user and ready to move to LoopBack 4. Check out <a href="https://loopback.io/doc/en/lb4/migration-express-middleware.html" target="_blank" rel="noopener noreferrer">Migrating Express middleware</a> for the steps and examples.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="migrating-datasources-from-lb3-to-lb4">Migrating DataSources from LB3 to LB4<a class="hash-link" href="#migrating-datasources-from-lb3-to-lb4" title="Direct link to heading">​</a></h3><p>To improve the documentation for migration from LB3 to LB4, we also added steps for migrating LB3 datasources into a LB4 project. LB3 datasources are compatible with LB4, so the datasource configuration remains the same between both. See <a href="https://loopback.io/doc/en/lb4/migration-datasources.html" target="_blank" rel="noopener noreferrer">Migrating Datasources</a> for steps on how to migrate your datasources.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="customizing-source-key-for-relations">Customizing Source Key for Relations<a class="hash-link" href="#customizing-source-key-for-relations" title="Direct link to heading">​</a></h3><p>Typically, the primary key is used as the source key in relations (i.e joining two tables). In LB4, we use <code>keyFrom</code> and <code>keyTo</code> to define the source key and foreign key respectively. If you would like to use a non-id property as your source key, setting <code>keyFrom</code> would allow you to do so. Check the <a href="https://loopback.io/doc/en/lb4/HasMany-relation.html#relation-metadata" target="_blank" rel="noopener noreferrer">Relation Metadata</a> section for details.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="other">Other<a class="hash-link" href="#other" title="Direct link to heading">​</a></h3><ul><li><p>We've added some links and refactored the <a href="https://loopback.io/doc/en/lb4/Using-components.html" target="_blank" rel="noopener noreferrer">Using Components</a> page to make the site better navigation.</p></li><li><p>We've updated the <a href="https://loopback.io/doc/en/lb4/Loopback-component-authorization.html" target="_blank" rel="noopener noreferrer">Authorization Component</a> page detailedly to match the latest code base.</p></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="user-feedback-sessions">User Feedback Sessions<a class="hash-link" href="#user-feedback-sessions" title="Direct link to heading">​</a></h2><p>Interested in joining a user feedback session? We love to hear your input and how you are using LoopBack. If you'd like to take part or have suggestions, please join our discussion in the <a href="https://github.com/strongloop/loopback-next/issues/4264" target="_blank" rel="noopener noreferrer">GitHub issue</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="whats-next">What's Next?<a class="hash-link" href="#whats-next" title="Direct link to heading">​</a></h2><p>If you're interested in what we're working on next, you can check out the <a href="https://github.com/strongloop/loopback-next/pull/4376" target="_blank" rel="noopener noreferrer">January Milestone</a>.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="call-to-action">Call to Action<a class="hash-link" href="#call-to-action" title="Direct link to heading">​</a></h2><p>In 2020, we look forward to helping you and seeing you around! LoopBack's success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here's how you can join us and help the project:</p><ul><li><a href="https://github.com/strongloop/loopback-next/issues" target="_blank" rel="noopener noreferrer">Report issues</a>.</li><li><a href="https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">Contribute</a> code and documentation.</li><li><a href="https://github.com/strongloop/loopback-next/labels/good%20first%20issue" target="_blank" rel="noopener noreferrer">Open a pull request on one of our "good first issues"</a>.</li><li><a href="https://github.com/strongloop/loopback-next/issues/110" target="_blank" rel="noopener noreferrer">Join</a> our user group.</li></ul>]]></content:encoded>
            <category>Milestone update</category>
        </item>
    </channel>
</rss>