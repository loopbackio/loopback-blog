"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[9450],{6029:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"november-2020-milestone","metadata":{"permalink":"/november-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-12-08-november-milestone.md","source":"@site/blog/2020/2020-12-08-november-milestone.md","title":"LoopBack 4 November 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-12-08T00:00:00.000Z","formattedDate":"December 8, 2020","tags":[{"label":"Milestone update","permalink":"/tags/milestone-update"}],"readingTime":2.68,"truncated":true,"authors":[{"name":"Janny Hou","title":"LoopBack Maintainer","url":"https://github.com/jannyhou","imageURL":"https://avatars2.githubusercontent.com/u/12554153","key":"jannyhou"}],"frontMatter":{"slug":"november-2020-milestone","title":"LoopBack 4 November 2020 Milestone Update","date":"2020-12-08T00:00:00.000Z","authors":"jannyhou","tags":["Milestone update"]},"nextItem":{"title":"LoopBack 4 October 2020 Milestone Update","permalink":"/october-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nHope you had a wonderful Thanksgiving for those who celebrate it! In November, LoopBack team focused on improving the context module and documentation, as well as bug fixes. The Toronto squad participated in the [CASCONxEVOKE](https://www-01.ibm.com/ibm/cas/cascon/) conference. Instead of a physical booth, we held a virtual one online. We welcomed [@nflaig](https://github.com/nflaig) as the new maintainer of [`loopback-next`](https://github.com/strongloop/loopback-next).\\n\\nRead more to know about the highlighted improvements:\\n\\n\x3c!--truncate--\x3e\\n\\n## Context\\n\\n- A new phase `init()` was added to the application life cycle events. It is used when a component need to contribute bindings asynchronously. For example:\\n\\n  ```ts\\n  export class MyComponent implements Component, LifeCycleObserver {\\n    // ...\\n    async init() {\\n      // Contribute bindings via `init`\\n      // This cannot be done via constructor since it\'s synchronous.\\n      const val = await readFromConfig();\\n      this.app.bind(\'abc\').to(val);\\n      this.status = \'initialized\';\\n      this.initialized = true;\\n    }\\n  }\\n  ```\\n  You can check the [Component](https://loopback.io/doc/en/lb4/Component.html#component-life-cycle) page to learn about its usage.\\n\\n- `toInjectable()` was introduced as a shortcut to decorate a common/provider/dynamic-value-factory class and automatically creating binding for them. For example:\\n  ```ts\\n  @injectable({scope: BindingScope.SINGLETON})\\n  class MyController {\\n    constructor(@inject(\'my-options\') private options: MyOptions) {\\n      // ...\\n    }\\n  }\\n\\n  binding.toInjectable(MyController);\\n  ```\\n  The decorator\'s usage is well documented on page [Binding](https://loopback.io/doc/en/lb4/Binding.html#an-injectable-class).\\n\\n- PR [#6701](https://github.com/strongloop/loopback-next/pull/6701) updated test cases to reflect how the design types of array/undefined/complex properties are retrieved.\\n\\n- Method injection is allowed for the lifecycle methods in PR [#6740](https://github.com/strongloop/loopback-next/pull/6740). For example:\\n\\n  ```ts\\n  class MyObserverWithMethodInjection implements LifeCycleObserver {\\n    status = \'not-initialized\';\\n    init(@inject(\'prefix\') prefix: string) {\\n      this.status = `${prefix}:initialized`;\\n    }\\n    start(@inject(\'prefix\') prefix: string) {\\n      this.status = `${prefix}:started`;\\n    }\\n    stop(@inject(\'prefix\') prefix: string) {\\n      this.status = `${prefix}:stopped`;\\n    }\\n  }\\n  ```\\n\\n- In some cases, your Express middleware wants to access LoopBack\'s RequestContext to resolve certain bindings. This can be done via `MIDDLEWARE_CONTEXT` property of the Express request object, which is set up by LoopBack when the `RequestContext` is instantiated. For example:\\n\\n  ```ts\\n  import {MIDDLEWARE_CONTEXT, RequestContext} from \'@loopback/rest\';\\n  function expressHandler(req, res, next) {\\n    const reqCtx = (req as any)[MIDDLEWARE_CONTEXT];\\n    // Now you have access to the LoopBack RequestContext\\n  }\\n  ```\\n\\n## Documentation\\n\\n- The guide for calling REST APIs and SOAP services were separated to make the steps involved clearer. You can check the overview page [Accessing services](https://loopback.io/doc/en/lb4/Accessing-services.html) and its sub-topics [Calling SOAP web services](https://loopback.io/doc/en/lb4/Calling-soap-web-services.html) and [Calling REST APIs](https://loopback.io/doc/en/lb4/Calling-rest-apis.html) for details.\\n\\n- For troubleshooting, we added steps for creating breakpoints in vscode in the [documentation](https://loopback.io/doc/en/lb4/Troubleshooting.html#creating-breakpoints). You can find more details in PR [#6743](https://github.com/strongloop/loopback-next/pull/6743). \\n\\n## REST\\n\\n- Matching a URL or hostname against a regular expression that contains an unescaped dot as part of the hostname might match more hostnames than expected. PR [#6813](https://github.com/strongloop/loopback-next/pull/6813) updated the regular expression of hostnames accordingly.\\n\\n## Repository\\n\\n- [#6755](https://github.com/strongloop/loopback-next/pull/6755) threw 400 `BadRequestError` for invalid inclusion relation name by rejecting the request with statusCode as 400.\\n\\n## Examples\\n\\n- PR [#6598](https://github.com/strongloop/loopback-next/pull/6598) updated artifacts of the [todo-list](https://github.com/strongloop/loopback-next/tree/master/examples/todo-list) example to the latest style generated by the LoopBack CLI.\\n\\n## Enriching LoopBack and its Community - You are Invited!\\n\\nAs mentioned in our [recent blog post](https://strongloop.com/strongblog/2020-community-contribution/), your contribution is important to make LoopBack a sustainable open source project. \\n\\nHere is what you can do:\\n- [Join LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Look for first-contribution-friendly issues](https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\\n- Give us feedback and join our discussion in [our GitHub repo](https://github.com/strongloop/loopback-next)\\n\\nLet\'s make LoopBack a better framework together!"},{"id":"october-2020-milestone","metadata":{"permalink":"/october-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-11-05-october-milestone.md","source":"@site/blog/2020/2020-11-05-october-milestone.md","title":"LoopBack 4 October 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-11-05T00:00:00.000Z","formattedDate":"November 5, 2020","tags":[{"label":"Milestone update","permalink":"/tags/milestone-update"}],"readingTime":2.9,"truncated":true,"authors":[{"name":"Janny Hou","title":"LoopBack Maintainer","url":"https://github.com/jannyhou","imageURL":"https://avatars2.githubusercontent.com/u/12554153","key":"jannyhou"}],"frontMatter":{"title":"LoopBack 4 October 2020 Milestone Update","date":"2020-11-05T00:00:00.000Z","authors":"jannyhou","slug":"october-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 4 November 2020 Milestone Update","permalink":"/november-2020-milestone"},"nextItem":{"title":"Community Q&A Monthly Digest - Oct 2020","permalink":"/2020-oct-slack-qa"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nIn October, we were excited to see an increasing number of community contributions as people joined the [Hacktoberfest](https://strongloop.com/strongblog/2020-hacktoberfest/) event. This month we had pretty balanced improvements in each area of the framework, including context, health check, OpenAPI specification and documentations. Keep reading to learn about the recently added features!\\n\\n\x3c!--truncate--\x3e\\n\\nWe welcomed [@mrmodise](https://github.com/mrmodise) as the maintainer of [`loopback4-shopping-example`](https://github.com/strongloop/loopback4-example-shopping). And we\'d like to thank everyone [@nflaig](https://github.com/nflaig), [@MattiaPrimavera](https://github.com/MattiaPrimavera), [@mdbetancourt](https://github.com/mdbetancourt), [@mrmodise](https://github.com/mrmodise), [@frbuceta](https://github.com/frbuceta), [@HrithikMittal](https://github.com/HrithikMittal), [@simlt](https://github.com/simlt), [@hectorleiva](https://github.com/hectorleiva), [@pktippa](https://github.com/pktippa), [@VergilSkye](https://github.com/VergilSkye), [@kerolloz](https://github.com/kerolloz), [@arondn2](https://github.com/arondn2), [@mayank-SFIN571](https://github.com/mayank-SFIN571) for your contributions in October!\\n\\nHere are the highlighted improvements:\\n\\n## Context\\n\\n- A set of fine-grained scopes `APPLICATION`, `SERVER` and `REQUEST` has been introduced to allow better\\nscoping of binding resolutions. The limitation of the previous scopes is explained in section [choose the right scope](https://loopback.io/doc/en/lb4/Binding.html#choose-the-right-scope), and section [resolve a binding value by key and scope within a context hierarchy](https://loopback.io/doc/en/lb4/Binding.html#resolve-a-binding-value-by-key-and-scope-within-a-context-hierarchy) explains how different scopes determine the binding resolutions.\\n\\n## REST\\n\\n- Allowed array query parameter for a single value, like `{tags: \'hello\'}` where parameter `tags` is a string array. See PR [#6542](https://github.com/strongloop/loopback-next/pull/6542).\\n\\n- Supported property level configuration for hidden fields, like `@property({type: \'string\', hidden: true}) password: string`. This is the shortcut for specifying the hidden properties in model settings. See PR [#6484](https://github.com/strongloop/loopback-next/pull/6484).\\n\\n- `save()` method throwing error due to missing `idName` is fixed in PR [#6640](https://github.com/strongloop/loopback-next/pull/6640).\\n\\n- `modifySpec()` turns to an async function to allow async spec updates. See PR [#6655](https://github.com/strongloop/loopback-next/pull/6655).\\n\\n## Build\\n\\n- A force clean rebuild was added to the pre-start script for the LoopBack 4 examples. You can run `npm start` after removing artifacts without manually cleaning the `/dist` files. See PR [#6588](https://github.com/strongloop/loopback-next/pull/6588).\\n\\n- Turned on `exit` for mocha tests for the created LoopBack applications. See PR [#6475](https://github.com/strongloop/loopback-next/pull/6475).\\n\\n## Extensions\\n\\n- Module [@loopback/socketio](https://github.com/strongloop/loopback-next/tree/master/extensions/socketio) was added to use socket.io to expose controllers as WebSocket friendly endpoints.\\n\\n- Enable/disable the metrics endpoints in explorer when mounting the metric and health extensions. See PR [#6646](https://github.com/strongloop/loopback-next/pull/6646) and PR [#6645](https://github.com/strongloop/loopback-next/pull/6645).\\n\\n- Only add `MetricsObserver`, `MetricsPushObserver` and expose `/metrics` endpoints when they are enabled. See PR [#6644](https://github.com/strongloop/loopback-next/pull/6644).\\n\\n- The health check for applications running in container now returns a more accurate HTTP status code based on the state. For example, checking `/health` for application in states \'STARTING\', \'STOPPING\' or \'STOPPED\' returns 503. You can find more details in PR [#6648](https://github.com/strongloop/loopback-next/pull/6648).\\n\\n## Documentation Restructure\\n\\n- LoopBack 4 targets both API developers and extension developers, while the current website doesn\'t distinguish them clearly. This month we restructured the sidebar to classify the documentation into two parts: \\"Building LoopBack Applications\\" and \\"Extending LoopBack Framework\\". You can check [https://loopback.io/doc/en/lb4/Customizing-server-configuration.html](https://loopback.io/doc/en/lb4/Customizing-server-configuration.html) to view the new layout.\\n\\n- The instructions for implementing HTTP redirects and mounting an Express router are extracted into a standalone page under \\"How-to guides\\". You can check [https://loopback.io/doc/en/lb4/Customizing-routes.html](https://loopback.io/doc/en/lb4/Customizing-routes.html) to view the content.\\n\\n- Moved server recipes to how-to guides [Customizing-server-configuration](https://loopback.io/doc/en/lb4/Customizing-server-configuration.html). See PR [#6663](https://github.com/strongloop/loopback-next/pull/6663).\\n\\n## Examples\\n\\nTwo examples were added last month:\\n\\n- Example [webpack](https://github.com/strongloop/loopback-next/tree/master/examples/webpack) was added to demo LoopBack running inside the browser as client-side JavaScript application.\\n\\n- Example [socketio](https://github.com/strongloop/loopback-next/tree/master/examples/socketio) gives a basic implementation of socketio with LoopBack 4.\\n\\nYou can also download the examples by using the `lb4 example` command.\\n\\n## Enriching LoopBack and its Community - You are Invited!\\n\\nAs mentioned in our [recent blog post](https://strongloop.com/strongblog/2020-community-contribution/), your contribution is important to make LoopBack a sustainable open source project. \\n\\nHere is what you can do:\\n- [Join LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Look for first-contribution-friendly issues](https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\\n- Give us feedback and join our discussion in [our GitHub repo](https://github.com/strongloop/loopback-next)\\n\\nLet\'s make LoopBack a better framework together!"},{"id":"2020-oct-slack-qa","metadata":{"permalink":"/2020-oct-slack-qa","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-10-28-oct-slack-qanda.md","source":"@site/blog/2020/2020-10-28-oct-slack-qanda.md","title":"Community Q&A Monthly Digest - Oct 2020","description":"Originally published on strongloop.com","date":"2020-10-28T00:00:00.000Z","formattedDate":"October 28, 2020","tags":[{"label":"Community","permalink":"/tags/community"},{"label":"Slack","permalink":"/tags/slack"},{"label":"Q&A","permalink":"/tags/q-a"}],"readingTime":3.415,"truncated":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Community Q&A Monthly Digest - Oct 2020","date":"2020-10-28T00:00:00.000Z","authors":"dhmlau","slug":"2020-oct-slack-qa","tags":["Community","Slack","Q&A"]},"prevItem":{"title":"LoopBack 4 October 2020 Milestone Update","permalink":"/october-2020-milestone"},"nextItem":{"title":"LoopBack 4 2020 Q3 Overview","permalink":"/loopback-4-2020-q3-overview"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nIt\'s been 6 months since we created the [Slack channel](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw) for LoopBack community. Thanks to your support, over 500 members had joined and new members are joining almost everyday! Let\'s take a look at the October edition of the \u201cCommunity Q&A Monthly Digest\u201d, capturing some of the Q&A in this forum. \\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n**Question:** How to get the raw request in LoopBack 4 in a function without changing the parsing for the entire app?\\n\\n**Answer:** \\nIt\'s possible to get the raw request body with `x-parser`: [https://loopback.io/doc/en/lb4/Parsing-requests.html#extend-request-body-parsing](https://loopback.io/doc/en/lb4/Parsing-requests.html#extend-request-body-parsing). \\n-- _Answered by @Rifa Achrinza_\\n\\n--- \\n\\n**Question:** Is there any solution for tracking database migration, for example, migrations has been already run and possible rollback of migration? \\n\\n**Answer:**\\nI created a module which tracks migrations and executes scripts based on the db version compared to the app version, see [https://www.npmjs.com/package/loopback4-migration](https://www.npmjs.com/package/loopback4-migration). \\n--_Answered by @nflaig_\\n\\n\\nIdeally, LoopBack generates the DDL for users to review, and then it\u2019s up to the users to run it or not. It\'s a feature to be implemented, see [https://github.com/strongloop/loopback-next/issues/4757](https://github.com/strongloop/loopback-next/issues/4757).\\n--_Answered by @Diana Lau_\\n\\n\\n--- \\n\\n**Question:** I want to check whether a specified `categoryId` exists in a Mongo datasource, how can I do that? For example,\\n\\n```json\\n{\\"categories\\" : [\\n    {\\n        \\"categoryId\\" : \\"e759c15e-3552-4557-aa6b-c1396674c7e6\\",\\n        \\"name\\" : \\"test\\"\\n    },\\n    {\\n        \\"categoryId\\" : \\"e759c15e-3552-4557-aa6b-c1396674c7e5\\",\\n        \\"name\\" : \\"test1\\"\\n    }\\n]}\\n```\\n\\nI tried `await this.usersRepository.find({\'categories.categoryId\': \'e759c15e-3552-4557-aa6b-c1396674c7e5\'});` but getting an error message below:\\n```\\n> { \'categories.categoryId\': string; }\' is not assignable to parameter of type \'Filter<Users>\'. Object literal may only specify known properties, and \'\'categories.categoryId\'\' does not exist in type \'Filter<Users>\'\\n```\\n\\n**Answer:** \\nThe object you pass into `.find()` needs to be a `Filter` object. Make sure you `import { Filter } from \'@loopback/repository\';`, then you can: \\n```ts\\nconst existingCategoryFilter: Filter = {\\n  //...filter properties in here...\\n};\\nlet existingCategories = await this.categoryRepository.find(existingCategoryFilter);\\n```\\n-- Answered by @Jackson Hyde\\n\\nTo add on what @Jackson Hyde has mentioned, due to limitations on TypeScript types, nested objects are not included in the typings. Hence, you\'ll also need to override TypeScript\'s check by adding `// @ts-ignore` just before the repository function.\\n-- Answered by @Rifa Achrinza\\n\\n--- \\n\\n**Question:** I want to implement JWT refresh token in LoopBack 4. Can you suggest any good tutorial?\\n\\n**Answer:** You can follow this [https://loopback.io/doc/en/lb4/JWT-authentication-extension.html](https://loopback.io/doc/en/lb4/JWT-authentication-extension.html). \\n--_Answered by @Pratik Jaiswal_\\n\\n--- \\n\\n\\n**Question:** I used LoopBack CLI to create a \\"SHIPPING\\" model but it tries to do lowercase \\"Shipping\\" in the SQL with the quotes. An error occurred in the SQL statement because it is case sensitive with the quotes around it. How can I fix this? I\'m on LoopBack 4 and using the `loopback-connector-ibmi`.\\n\\n**Answer:**\\nDid u try to give the name in your model?\\n```ts\\n@model({name: \'member_membership\'})\\nexport class MemberMembership extends Entity {\\n    //...\\n}\\n```\\nSo `member_membership` is the table in the database.\\n-- Answered by @Mohammed\\n\\nThe `name` property customizes the model name, which is default to the class name if not provided. The model name is then used as the default for table name unless you further customize it for specific databases.\\n-- Answered by @Raymond Feng\\n\\n\\n--- \\n**Question:** I have a CORS issue with `passport-login` example when trying to establish connection with Google using Angular Frontend. I keep getting CORS error:\\n> Access to XMLHttpRequest at \'https://accounts.google.com/o/oauth2/v2/auth?...\' (redirected from \'http://localhost:3000/api/auth/thirdparty/google\') from origin \'http://localhost:4200\' has been blocked by CORS policy: Response to preflight request doesn\'t pass access control check: No \'Access-Control-Allow-Origin\' header is present on the requested resource.\\"\\n\\nBut the application is working fine with jade.\\n\\n**Answer:**\\nIn your login component you could do something like:\\n```ts\\nOAUTH2_LINK_GOOGLE = this.api_url+\'/api/auth/thirdparty/google?redirect_uri=\' + this.redir_url\\n  onGoogleSignIn() {\\n    window.location.href = this.OAUTH2_LINK_GOOGLE;\\n  }\\n```\\nBind the Google link to the above in the HTML code.\\n\\n-- Answered by @marg330\\n\\n---\\n\\n\\n## Enriching LoopBack and its Community - You are Invited!\\n\\nAs mentioned in our [recent blog post](https://strongloop.com/strongblog/2020-community-contribution/), your contribution is important to make LoopBack a sustainable open source project. \\n\\nHere is what you can do:\\n- [Join LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Look for first-contribution-friendly issues](https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\\n- Give us feedback and join our discussion in [our GitHub repo](https://github.com/strongloop/loopback-next)\\n\\nLet\'s make LoopBack a better framework together!"},{"id":"loopback-4-2020-q3-overview","metadata":{"permalink":"/loopback-4-2020-q3-overview","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-10-14-loopback-q3-overview.md","source":"@site/blog/2020/2020-10-14-loopback-q3-overview.md","title":"LoopBack 4 2020 Q3 Overview","description":"Originally published on strongloop.com","date":"2020-10-21T00:00:00.000Z","formattedDate":"October 21, 2020","tags":[{"label":"Quarterly update","permalink":"/tags/quarterly-update"}],"readingTime":2.94,"truncated":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"slug":"loopback-4-2020-q3-overview","title":"LoopBack 4 2020 Q3 Overview","date":"2020-10-21T00:00:00.000Z","authors":"dhmlau","tags":["Quarterly update"]},"prevItem":{"title":"Community Q&A Monthly Digest - Oct 2020","permalink":"/2020-oct-slack-qa"},"nextItem":{"title":"LoopBack 3 End-of-Life","permalink":"/2020-lb3-eol"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nFall is the season of the harvest. We\'re glad to see the good progress that we\'ve made in the past 3 months, together with the contributions from the community. In September, there is record high percentage (25.6%) of the merged PRs which are coming from the community. Thank you all!\\n\\nIf you haven\'t heard of [Hacktoberfest](https://hacktoberfest.digitalocean.com/) happening this month, check out the details in our [previous blog on Hacktoberfest](https://strongloop.com/strongblog/2020-hacktoberfest/). There\'s still time to join. For those who participated, we appreciated your contributions. \\n\\nLet\'s take a look some of the highlights in the last quarter by you and the LoopBack team.\\n\\n\x3c!--truncate--\x3e\\n\\n## Integrate with TypeORM, TypeGraphQL and MessagePack\\n\\nOne of our strategies to add value to LoopBack is to leverage third-party libraries and integrate with them. We created the following extensions:\\n\\n- [`@loopback/typeorm`](https://www.npmjs.com/package/@loopback/typeorm): enables [TypeORM](https://typeorm.io/) support in LoopBack\\n- [`@loopback/graphql`](https://www.npmjs.com/package/@loopback/graphql): integrates with [TypeGraphQL](https://typegraphql.com/) for creating GraphQL API https://loopback.io/doc/en/lb4/GraphQL.html\\n- [`@loopback/rest-msgpack`](https://www.npmjs.com/package/@loopback/rest-msgpack): adds support to allow receive [MessagePack](https://msgpack.org/index.html) requests and transparently convert it to a regular JavaScript object. It provides a BodyParser implementation and a component to register it. \\n\\n\\n## Reorganize and Enhance Documentation\\n\\nTo better organize our content and easier for navigation/discovery, we reorganized our content based on [four quadrants](https://documentation.divio.com): tutorials, how-to guides, concepts and reference guides. To find out more how our documentation is organized, see [this documentation page](https://loopback.io/doc/en/lb4/#how-is-our-documentation-organized).\\n\\nBesides the ongoing [refactoring work](https://github.com/strongloop/loopback-next/issues/5783), we enriched the content and clarified on some of the topics that are frequently asked by you. For example, we:\\n- [cleaned up the documentation about LoopBack extension](https://loopback.io/doc/en/lb4/Extending-LoopBack-4.html) so that your extension creation experience would be easier and smoother. We\'ll continue to make some more improvement in this area as well. \\n- enhanced the content for [authentication](https://loopback.io/doc/en/lb4/Authentication-overview.html) and [authorization](https://loopback.io/doc/en/lb4/Authorization-overview.html) to include basic concepts, usage and examples. \\n- added a section on [accessing multiple models inside a transaction](https://loopback.io/doc/en/lb4/Using-database-transactions.html#accessing-multiple-models-inside-one-transaction)\\n\\n## Other Key Feature Highlights\\n\\nThere were many features, fixes and enhancements in the past few months, and here are some highlights:\\n- completed the [HasManyThrough relation](https://loopback.io/doc/en/lb4/HasManyThrough-relation.html)\\n- [improved REST experience](https://strongloop.com/strongblog/august-2020-milestone/#improving-rest-experience) by adding a [middleware based sequence](https://loopback.io/doc/en/lb4/REST-middleware-sequence.html)\\n- added [support for applying multiple authentication strategies to one endpoint](https://loopback.io/doc/en/lb4/Authentication-component-decorator.html)\\n- implemented the [refresh token service](https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt#endpoints-with-refresh-token) in the `@loopback/authentication-jwt` extension\\n- added the [support of OpenAPI parameter AJV validation](https://github.com/strongloop/loopback-next/pull/6285) on simple types and [AJV formats for OpenAPI spec data type formats](https://github.com/strongloop/loopback-next/pull/6262).\\n\\n## Encourage Community Contributions\\n\\nIn a [recent blog post](https://strongloop.com/strongblog/2020-community-contribution/), we shared our views on encouraging more community contributions to match with our growing user community. The [switch to Developer Certificate of Origin (DCO)](https://loopback.io/doc/en/contrib/code-contrib.html#developer-certificate-of-origin-dco) as the contribution method is a change we made to make your contribution process easier. We also created a [community extension documentation page](https://loopback.io/doc/en/lb4/Community-extensions.html) to showcase LoopBack extensions built by the community. \\n\\nIn addition, we are pleased to have [@nabdelgadir](https://github.com/nabdelgadir) and [@madaky](https://github.com/madaky) to be one of our community maintainers. We appreciate the great work you\u2019ve done and welcome to the team.\\n\\n## Previous Milestone Blogs\\n\\nThere are many more accomplishments that cannot be captured in this blog, make sure you check out our previously published monthly milestone blog posts in Q3 for more details:\\n- [July summary](https://strongloop.com/strongblog/july-2020-milestone)\\n- [August summary](https://strongloop.com/strongblog/august-2020-milestone)\\n- [Sept summary](https://strongloop.com/strongblog/september-2020-milestone/)\\n\\n## Enriching LoopBack and its Community - You are Invited!\\n\\nYour contribution is important to make LoopBack a sustainable open source project. \\n\\nHere is what you can do:\\n- [Join LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Look for first-contribution-friendly issues](https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\\n- Give us feedback and join our discussion in [our GitHub repo](https://github.com/strongloop/loopback-next)\\n- Limited time only: [Join the Hacktoberfest](https://strongloop.com/strongblog/2020-hacktoberfest/) in the month of October\\n\\nLet\'s make LoopBack a better framework together!"},{"id":"2020-lb3-eol","metadata":{"permalink":"/2020-lb3-eol","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-10-07-lb3-eol.md","source":"@site/blog/2020/2020-10-07-lb3-eol.md","title":"LoopBack 3 End-of-Life","description":"Originally published on strongloop.com","date":"2020-10-14T00:00:00.000Z","formattedDate":"October 14, 2020","tags":[{"label":"LoopBack 3","permalink":"/tags/loop-back-3"}],"readingTime":2.055,"truncated":true,"authors":[{"name":"Raymond Feng","title":"LoopBack Maintainer","url":"https://github.com/raymondfeng","imageURL":"https://avatars0.githubusercontent.com/u/540892","key":"raymondfeng"},{"name":"Miroslav Bajto\u0161","title":"LoopBack Maintainer","url":"http://github.com/bajtos","imageURL":"https://avatars.githubusercontent.com/u/1140553","key":"bajtos"},{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"LoopBack 3 End-of-Life","date":"2020-10-14T00:00:00.000Z","authors":["raymondfeng","bajtos","dhmlau"],"slug":"2020-lb3-eol","tags":["LoopBack 3"]},"prevItem":{"title":"LoopBack 4 2020 Q3 Overview","permalink":"/loopback-4-2020-q3-overview"},"nextItem":{"title":"LoopBack 4 September 2020 Milestone Update","permalink":"/september-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nLoopBack 3 is [approaching its end-of-life](https://loopback.io/doc/en/contrib/Long-term-support.html) at the end of the year for community support. For LoopBack 3 users, we hope the [migration guide](https://loopback.io/doc/en/lb4/migration-overview.html) helps you migrate your applications to version 4. \\n\\n\x3c!--truncate--\x3e\\n\\nAt the same time, we understand you might still be using LoopBack 3 and/or in the process of migrating to LoopBack 4. For the next few months after the EOL date, we\'ll try to support the community in the following ways:\\n\\n- **Helping the community to migrate**: we will continue to help with questions on [GitHub](https://github.com/strongloop/loopback) and [Slack](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw), but it will be on a best-effort basis.\\n- **Security vulnerabilities**: Critical security fixes will be applied as needed by [IBM API Connect](https://www.ibm.com/cloud/api-connect).\\n- **New features**: No features will be accepted.\\n- **Bugs**: We are not going to actively fix any bugs reported by the community users. For critical bugs, maintainers will review and assess the risks of community-submitted PRs. If you\u2019re planning to submit a fix, it\u2019s the best to open a GitHub issue to discuss with the maintainers before proceeding.\\n\\nPlease note that the December 2020 end-of-life date is applicable to community support. If you are using LoopBack as part of the [IBM API Connect](https://www.ibm.com/cloud/api-connect) v5 or v2018 product, check with the product announcement for its end-of-support schedule.\\n\\n## What Should I Do If I\'m Still Using LoopBack 3?\\n\\nIf you already have LoopBack 3 applications running in production, it is highly recommended for you to review the [Understanding the differences between LoopBack 3 and LoopBack 4 page](https://loopback.io/doc/en/lb4/Understanding-the-differences.html) as mentioned in [one of our older blog posts](https://strongloop.com/strongblog/lb3-extended-lts/). There is also the [migration guide](https://loopback.io/doc/en/lb4/migration-overview.html) helping you to migrate your LoopBack 3 applications incrementally.\\n\\n## What If I Cannot Migrate to LoopBack 4 Any Time Soon?\\n\\nYour LoopBack 3 applications will continue to work even after LoopBack 3 reaches end of life. There will be _very_ minimal, if any, changes going into the codebase. In the case of addressing security vulnerabilities, you might need to fork the corresponding GitHub repos and apply security fixes. See [this blog](https://strongloop.com/strongblog/lb3-entered-maintenance-mode/) for the list of Node.js packages reaching end-of-life along with `loopback` repo. \\n\\n## Enriching LoopBack and its Community - You are Invited!\\n\\nYour contribution is important to make LoopBack a sustainable open source project. Here is what you can do:\\n- [Join LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Look for first-contribution-friendly issues](https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\\n- Give us feedback and join our discussion in [our GitHub repo](https://github.com/strongloop/loopback-next)\\n\\nLet\'s make LoopBack a better framework together!"},{"id":"september-2020-milestone","metadata":{"permalink":"/september-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-10-07-september-milestone.md","source":"@site/blog/2020/2020-10-07-september-milestone.md","title":"LoopBack 4 September 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-10-07T00:00:00.000Z","formattedDate":"October 7, 2020","tags":[{"label":"Milestone update","permalink":"/tags/milestone-update"}],"readingTime":3.23,"truncated":true,"authors":[{"name":"Yaapa Hage","title":"LoopBack Maintainer","url":"https://github.com/hacksparrow","imageURL":"https://avatars2.githubusercontent.com/u/950112","key":"hacksparrow"}],"frontMatter":{"title":"LoopBack 4 September 2020 Milestone Update","date":"2020-10-07T00:00:00.000Z","authors":"hacksparrow","slug":"september-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 3 End-of-Life","permalink":"/2020-lb3-eol"},"nextItem":{"title":"LoopBack is participating in Hacktoberfest 2020","permalink":"/2020-hacktoberfest"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nWe bring another month of new features, fixes, and improvements in documentation and developer experience in LoopBack. Make sure to update your compatible projects with `lb4 update` if you want to update the underlying libraries to their latest versions.\\n\\nAlso, as part of our long-term effort to encourage more community contributions, we are participating in this year\u2019s [Hacktoberfest](https://hacktoberfest.digitalocean.com/). You can read more about the event and participation details at our [Hacktoberfest blogpost](https://strongloop.com/strongblog/2020-hacktoberfest/). \\n\\n\x3c!--truncate--\x3e\\n\\n## Documentation Enhancements\\n\\nThere has been a continuous effort to improve our documentation. Below are some highlights for this month:\\n\\n- A new documentation page, [Accessing HTTP request and response objects](https://loopback.io/doc/en/lb4/Accessing-http-request-response.html), was added explaining the various ways and places to access the request and response objects.\\n- We are working on a series of troubleshooting guides for LoopBack. This month we completed the [basic guide](https://loopback.io/doc/en/lb4/Troubleshooting.html) and [Debugging tests with Mocha](https://loopback.io/doc/en/lb4/Debugging-tests-with-mocha.html). [A few more areas](https://github.com/strongloop/loopback-next/issues/5701#issuecomment-700955686) that can be added to the guide.\\n- We added an [example app](https://github.com/strongloop/loopback-next/tree/master/examples/binding-resolution) demonstrating LoopBack 4\'s context binding resolution and dependency injection within a context hierarchy.\\n\\n## New Experimental Features\\n\\n- We have created a [GraphQL extension](https://github.com/strongloop/loopback-next/tree/master/extensions/graphql) that provides integration with GraphQL using [type-graphql](https://typegraphql.com/). Check out the [GraphQL example app](https://github.com/strongloop/loopback-next/tree/master/examples/graphql) for a sample app.\\n- We added support for parsing [MessagePack](https://msgpack.org/index.html) bodies. For usage, refer to the [documentation](https://github.com/strongloop/loopback-next/tree/master/bodyparsers/rest-msgpack).\\n\\n## Investigation on Better Handling of ObjectID in MongoDB\\n\\nWe spent a good amount of time to improve the experience of using `ObjectID` with LoopBack. We have identified the direction we want to take and the tasks to work on. You can learn more about the spike in issue [3456](https://github.com/strongloop/loopback-next/issues/3456).\\n\\n\\n## Fixes and Improvements\\n\\n- [added `.onStart()` and `.onStop()` methods of the `Application`](https://github.com/strongloop/loopback-next/pull/6230), so that they can be used to register observers as plain functions for the start and stop life-cycle events.\\n- [enhanced the `lb4 update` command](https://github.com/strongloop/loopback-next/pull/6398) to be runnable against any projects that use `@loopback/*` dependencies in `dependencies` or `devDependencies`, or `peerDependencies`; not just LoopBack 4 projects.\\n- [included the application build when running `migrate` and `openapi-spec` scripts](https://github.com/strongloop/loopback-next/pull/6390).\\n- added `@injectable`, so that `@injectable` can be used instead of `@bind`, which is in tune with other frameworks using Dependency Injection. `@bind` is not removed from the framework, so apps using `@bind` will not be affected.\\n- made the `keepAliveTimeout`, `headersTimeout`, `maxConnections`, `maxHeadersCount`, and `timeout` properties of the underlying [HTTP server](https://nodejs.org/dist/latest-v14.x/docs/api/http.html#http_class_http_server) instance [configurable by specifying them in the application config object](https://github.com/strongloop/loopback-next/pull/6267).\\n- [updated the generated application directory name during application scaffolding](https://github.com/strongloop/loopback-next/pull/6429) when application names involve numbers\\n- added [the ability to boot dynamic value provider classes and classes with `@inject`](https://github.com/strongloop/loopback-next/pull/6315).\\n- removed the `extension-` prefix from the affected extensions for their names to be consistent with other extension modules.\\n- [improved the overall experience of graphql configuration and subscriptions](https://github.com/strongloop/loopback-next/pull/6313) in LoopBack. \\n- added the [support of OpenAPI parameter AJV validation](https://github.com/strongloop/loopback-next/pull/6285) on simple types and [AJV formats for OpenAPI spec data type formats](https://github.com/strongloop/loopback-next/pull/6262).\\n- [updated the REST middleware](https://github.com/strongloop/loopback-next/pull/6284) so that it can now cached by the use of singleton binding scope.\\n- added Twitter example in the [Passport login example app](https://github.com/strongloop/loopback-next/tree/master/examples/passport-login).\\n\\n## Community Contributions\\n\\nShout out to [Rifa Achrinza](https://github.com/achrinza) for explaining the differences between weak and strong relations in PR [6404](https://github.com/strongloop/loopback-next/pull/6404), [MessagePack PR](https://github.com/strongloop/loopback-next/pull/6155), and his numerous other PRs.\\n\\nOpening issues are community contributions too, so thanks to all those who help LoopBack become better by reporting bugs and usability issue. We try to address popular issues with higher priority, so continue to let us know the problems you face on [GitHub](https://github.com/strongloop/loopback-next/issues) or [Slack](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw).\\n\\n## Enriching LoopBack and its Community - You are Invited!\\n\\nAs mentioned in our [recent blog post](https://strongloop.com/strongblog/2020-community-contribution/), your contribution is important to make LoopBack a sustainable open source project. \\n\\nHere is what you can do:\\n- [Join LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Look for first-contribution-friendly issues](https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\\n- Give us feedback and join our discussion in [our GitHub repo](https://github.com/strongloop/loopback-next)\\n\\nLet\'s make LoopBack a better framework together!"},{"id":"2020-hacktoberfest","metadata":{"permalink":"/2020-hacktoberfest","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-09-29-hacktoberfest.md","source":"@site/blog/2020/2020-09-29-hacktoberfest.md","title":"LoopBack is participating in Hacktoberfest 2020","description":"Originally published on strongloop.com","date":"2020-09-29T00:00:00.000Z","formattedDate":"September 29, 2020","tags":[{"label":"hacktoberfest","permalink":"/tags/hacktoberfest"}],"readingTime":1.96,"truncated":true,"authors":[{"name":"Miroslav Bajto\u0161","title":"LoopBack Maintainer","url":"http://github.com/bajtos","imageURL":"https://avatars.githubusercontent.com/u/1140553","key":"bajtos"}],"frontMatter":{"title":"LoopBack is participating in Hacktoberfest 2020","date":"2020-09-29T00:00:00.000Z","authors":"bajtos","slug":"2020-hacktoberfest","tags":["hacktoberfest"]},"prevItem":{"title":"LoopBack 4 September 2020 Milestone Update","permalink":"/september-2020-milestone"},"nextItem":{"title":"Community Q&A Monthly Digest - Sept 2020","permalink":"/2020-sept-slack-qa"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nAs part of our long-term effort to [encourange more community\\ncontributions](../2020-community-contribution/),\\nLoopBack is going to participate in this year\'s\\n[Hacktoberfest](https://hacktoberfest.digitalocean.com).\\n\\n\x3c!--truncate--\x3e\\n\\n## What is Hacktoberfest?\\n\\nHacktoberfest is an annual event encouraging participation in the open source community, open to everyone. Whether you\u2019re new to development, a student, or a long-time contributor, you can help drive the growth of open source and make positive impact on an ever-growing community. All backgrounds and skills levels are encouraged to complete the challenge.\\n\\nYou can learn more about Hacktoberfest values at [https://hacktoberfest.digitalocean.com/details#values](https://hacktoberfest.digitalocean.com/details#values).\\n\\nParticipants completing the challenge (contributing at least 4 valid pull requests) will earn a limited edition T-shirt.\\n\\n_Please note that any prizes are subject to conditions set by Hacktoberfest. IBM and the LoopBack team are not involved and not responsible in any way._\\n\\n## How to participate\\n\\nJoining the effort is simple. Just pick any problem that is itching you and send a pull request to fix it. You can also choose one of LoopBack\'s issues labelled as [Hacktoberfest](https://github.com/issues?q=is%3Aopen+is%3Aissue+user%3Astrongloop+label%3AHacktoberfest) or [good first issue](https://github.com/issues?q=is%3Aopen+is%3Aissue+user%3Astrongloop+label%3A%22good+first+issue%22) if you need inspiration.\\n\\nMake sure to familiarize yourself with Hacktoberfest\'s [Participation rules](https://hacktoberfest.digitalocean.com/details#rules) and [Quality standards](https://hacktoberfest.digitalocean.com/details#quality); and also LoopBack\'s [Contributing guide](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md).\\n\\nAre you new to open source? No problem, we have you covered! Check out Hacktoberfest\'s [Beginners](https://hacktoberfest.digitalocean.com/details#beginners) guides and LoopBack\'s guide on [submitting a pull request to LoopBack 4](https://loopback.io/doc/en/lb4/submitting_a_pr.html).\\n\\nFor the entire month of October, LoopBack\'s maintainers team will be giving extra priority to pull request reviews and helping new contributors along their journey to the first accepted contribution.\\n\\n## Focus areas\\n\\nWe are primarily looking for quick wins with long term impact: small enhancements improving your day-to-day experience while using LoopBack.\\n\\nAs you may know, we have introduced a new documentation system in June to better organize the content and make it easier to find the information you need (see [New Documentation Structure](../june-2020-milestone/#new-documentation-structure) and [Alignment Along Abstraction Levels](../june-2020-milestone/#alignment-along-abstraction-levels)). The reorganization is still in progress and we would love to get some help. In particular, extracting recipes from \\"Concepts\\" explanations into proper \\"How-to guides\\" is an easy way how to quickly score valuable pull requests. See the GitHub issue [loopback-next#5783](https://github.com/strongloop/loopback-next/issues/5783) for the list of docs pages to rework.\\n\\nHaving said that, all improvements are welcome!\\n\\n## Closing thoughts\\n\\nWe are looking forward to receive and eventually land your pull requests. Let\'s make LoopBack a better framework together!"},{"id":"2020-sept-slack-qa","metadata":{"permalink":"/2020-sept-slack-qa","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-09-16-sept-slack-qanda.md","source":"@site/blog/2020/2020-09-16-sept-slack-qanda.md","title":"Community Q&A Monthly Digest - Sept 2020","description":"Originally published on strongloop.com","date":"2020-09-16T00:00:00.000Z","formattedDate":"September 16, 2020","tags":[{"label":"Community","permalink":"/tags/community"},{"label":"Slack","permalink":"/tags/slack"},{"label":"Q&A","permalink":"/tags/q-a"}],"readingTime":2.9,"truncated":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Community Q&A Monthly Digest - Sept 2020","date":"2020-09-16T00:00:00.000Z","authors":"dhmlau","slug":"2020-sept-slack-qa","tags":["Community","Slack","Q&A"]},"prevItem":{"title":"LoopBack is participating in Hacktoberfest 2020","permalink":"/2020-hacktoberfest"},"nextItem":{"title":"LoopBack 4 August 2020 Milestone Update","permalink":"/august-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nWelcome back to the September edition of the \\"Community Q&A Monthly Digest\\", in which we are curating some of the Q&A that we think it might be helpful to you. Thank you for posting your questions and helping your fellow LoopBack users. \\n\\nThe [LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw) is a platform where LoopBack users are helping each other out. If you haven\'t joined already, sign up today!\\n\\nLet\'s take a look at some of the questions and answers from the community.\\n\\n\x3c!--truncate--\x3e\\n\\n**Question:** Is it possible to use auto-generate timestamp property in a model?\\n\\n**Answer:** To set the property to the current datetime upon Model Create, you can:\\n```ts\\n@property({\\ntype: \'date\',\\ndefaultFn: \'now\',\\n})\\ntimestamp?: string;\\n```\\n\\n---\\n\\n**Question:** Does LoopBack has any built-in cache? Or should we implement that to make response even faster?\\n\\n**Answer:**\\nWe currently don\u2019t but there are some example implementations for your reference:\\n- [caching interceptor](https://github.com/strongloop/loopback-next/tree/master/packages/rest/src/__tests__/acceptance/caching-interceptor)\\n- [caching service](https://github.com/strongloop/loopback-next/blob/master/examples/greeting-app/src/caching-service.ts)\\n\\n--- \\n\\n**Question:** I want to perform schema migration but the order of tables is important beacause there are some relation and foreign key between them. How can I set the order of tables to be migrated?\\n\\n**Answer:** Within `migrate.ts`, `app.migrateSchema` accepts a `model` array. So it can be updated as such:\\n```ts\\nawait app.migrateSchema(Object.assign(<SchemaMigrationOptions>{\\nmodels: [/* Add model names here */]\\n}, existingSchema));\\n```\\nLike with any auto-migration, please do take a backup of the database before running the migration.\\n\\n---\\n\\n**Question:** I wanted to implement an API like the `file-transfer` example on the docs but with more endpoints with different storage directories. How is that possible?\\n\\n**Answer:** You can have different endpoints backed by different methods using `post /<url>` decoration as you see at [https://github.com/strongloop/loopback-next/blob/master/examples/file-transfer/src/controllers/file-upload.controller.ts#L28](https://github.com/strongloop/loopback-next/blob/master/examples/file-transfer/src/controllers/file-upload.controller.ts#L28). If you want to calculate the file path per request, you can instantiate a new upload service instance instead of using the injected one.\\n\\n---\\n\\n**Questions:** I work with LoopBack in a k8 cluster, when i try to implement JWT authentication, all users get the same token, and the data in that token is not equal to that user. Is there any way to fix it besides saving the token in a database? \\n\\n**Answer:** Typically JWT tokens are generated using a combination of a secret and some sort of UUID of the user. When they successfully authenticate, a token is generated and returned. When you need to verify the token, you decode it using the secret, giving you the UUID of the user. This means that you don\u2019t actually have to save a token at all. Here\u2019s how we are generating tokens for our users.\\n\\n```ts\\nconst userInfoForToken = {\\nid: userProfile.id,\\nname: userProfile.name,\\nroles: userProfile.roles,\\n};\\n// Generate a JSON Web Token\\nlet token: string;\\ntry {\\ntoken = await signAsync(userInfoForToken, this.jwtSecret, {\\nexpiresIn: Number(this.jwtExpiresIn),\\n});\\n} catch (error) {\\nthrow new HttpErrors.Unauthorized(`Error encoding token : ${error}`);\\n}\\n```\\nIn this context, `signAsync` is a `promisify`\u2019d version of `jsonwebtoken.sign()`.\\n\\n--- \\n\\n**Question:** I want to use the LoopBack app cli-command programmatically. Is this possible?\\n\\n**Answer:**\\nYou can try to `require(\'@loopback/cli/lib/cli\')`. See [https://github.com/strongloop/loopback-next/blob/master/packages/cli/lib/cli.js](https://github.com/strongloop/loopback-next/blob/master/packages/cli/lib/cli.js). `cli.js` has logic to create yeoman env and register generators.\\n\\n---\\n\\n\\n## Enriching LoopBack and its Community - You are Invited!\\n\\nAs mentioned in our [recent blog post](https://strongloop.com/strongblog/2020-community-contribution/), your contribution is important to make LoopBack a sustainable open source project. \\n\\nHere is what you can do:\\n- [Join LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Look for first-contribution-friendly issues](https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\\n- Give us feedback and join our discussion in [our GitHub repo](https://github.com/strongloop/loopback-next)\\n\\nLet\'s make LoopBack a better framework together!"},{"id":"august-2020-milestone","metadata":{"permalink":"/august-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-09-02-august-milestone.md","source":"@site/blog/2020/2020-09-02-august-milestone.md","title":"LoopBack 4 August 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-09-02T00:00:00.000Z","formattedDate":"September 2, 2020","tags":[{"label":"Milestone update","permalink":"/tags/milestone-update"}],"readingTime":4.92,"truncated":true,"authors":[{"name":"Janny Hou","title":"LoopBack Maintainer","url":"https://github.com/jannyhou","imageURL":"https://avatars2.githubusercontent.com/u/12554153","key":"jannyhou"}],"frontMatter":{"title":"LoopBack 4 August 2020 Milestone Update","date":"2020-09-02T00:00:00.000Z","authors":"jannyhou","slug":"august-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"Community Q&A Monthly Digest - Sept 2020","permalink":"/2020-sept-slack-qa"},"nextItem":{"title":"Enriching LoopBack and its Community - You are Invited!","permalink":"/2020-community-contribution"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nOur focus in August is the documentation restructure. The layout of several main sections are reorganized for easier navigation. Another significant improvement is about the request handling. More flexible approaches of adding LoopBack style middleware and express middleware are introduced in `@loopback/rest`.\\n\\nWe would like to appreciate [Agnes Lin](https://github.com/agnes512)\'s great contributions during her internship. There has been so much fun and pleasure working with her! She will be continue helping us part time. Good luck with your school.\\n\\nKeep reading to learn about the improved documentation and recently added features!\\n\\n\x3c!--truncate--\x3e\\n\\n## Documentation Enhancements\\n\\n### Reorganizing the Concepts List\\n\\nThe fundamental concepts were listed in section \\"Behind the Scene\\" sorted by the publish date. To have a concise name and a more organized layout for users to search, we renamed the section to be \\"Concepts\\" and restructured the documentations into the following sub-sections:\\n\\n- Crafting LoopBack 4\\n- Core\\n- REST APIs\\n- Data Access\\n\\nYou can visit the more organized contents in [https://loopback.io/doc/en/lb4/Concepts.html](https://loopback.io/doc/en/lb4/Concepts.html).\\n\\n### Reorganizing How-to Guide List\\n\\nThe \\"How-to Guide\\" is also reorganized by topics. The existing tutorials are classified into the following sections for users to search quickly:\\n\\n- Building REST APIs\\n- Creating Other Forms of APIS\\n- Accessing Databases\\n- Accessing Services\\n- Validating Data\\n- Securing Applications\\n- Deploying Applications\\n- Troubleshooting\\n\\nYou can visit the more organized contents in [https://loopback.io/doc/en/lb4/](https://loopback.io/doc/en/lb4/).\\n\\n### Adding Property Types\\n\\nWe added documentation for LoopBack 4 types including the syntax of model property definition in page [https://loopback.io/doc/en/lb4/LoopBack-types.html](https://loopback.io/doc/en/lb4/LoopBack-types.html).\\n\\n### Adding Application Layout\\n\\nWe added project layout for LoopBack 4 applications in page [https://loopback.io/doc/en/lb4/Loopback-application-layout.html](https://loopback.io/doc/en/lb4/Loopback-application-layout.html), users can find each file\'s meaning and responsibility in the application scaffolded by `lb4 app`.\\n\\n### Cleaning up Extensions\\n\\nWe are seeing more users creating extensions and it\'s a good time to make the extension creation experience easier and smoother. Therefore the extension generator and related documentations are updated to align with the latest code base. You can check the latest material in:\\n\\n- [Concept Component](https://loopback.io/doc/en/lb4/Component.html)\\n- [Creating Components](https://loopback.io/doc/en/lb4/Creating-components.html)\\n\\nAnd run `lb4 extension` to create extensions with the new component template.\\n\\n### Renaming Legacy Juggler\\n\\nThe term \\"legacy juggler bridge\\" might give the wrong impression to users that the `loopback-datasource-juggler` won\'t be supported or not working well because of the \\"legacy\\" word. So we removed the misleading word \\"legacy\\" across the documentations and CLI prompts.\\n\\n`loopback-datasource-juggler` is still well maintained and we have a plan to modernize it. Feel free to join the discussion in [issue #5956](https://github.com/strongloop/loopback-next/issues/5956) if you are interested.\\n\\n## Investigation\\n\\n### Restructuring Connector Reference\\n\\nThe current connector contents are mixed with how-to guides, references and tutorials. The spike story [5961](https://github.com/strongloop/loopback-next/issues/5961) came up with a better plan to reorganize them into the four quadrants layout:\\n\\n- Connector concepts, its role in the framework and its relations to other artifacts will go to section \\"Concepts/Datasources\\".\\n- Datasource level configurations and features like migration/discovery will go to section \\"How-to Guides/Configuring DataSource\\".\\n- All the other connector specific tutorials will go to section \\"Tutorials/Connect to back-end tutorial\\".\\n\\n## Improving REST Experience\\n\\n### REST Middleware\\n\\nA big feature took place in `@loopback/rest` to support more flexible ways to add express middleware for handling requests. PR [#5366](https://github.com/strongloop/loopback-next/pull/5366) added a middleware based sequence and wrapped existing actions as middleware. The new usage is documented in the following pages:\\n\\n- Concept [Middleware](https://loopback.io/doc/en/lb4/Middleware.html) in LoopBack 4.\\n- [Middleware-based Sequence for REST Server](https://loopback.io/doc/en/lb4/REST-middleware-sequence.html)\\n\\n### Optimizing Middleware Based Sequence\\n\\nPR [#6062](https://github.com/strongloop/loopback-next/pull/6062) optimized middleware based sequence and its middleware providers to be singletons:\\n\\n- MiddlewareSequence is now a singleton and it caches a list of middleware.\\n- Built-in middleware providers are now singletons.\\n- Validating sorted middleware groups is supported. Error will be reported if a middleware is unreachable.\\n\\n### Improving Serviceability of @loopback/rest\\n\\nThere are several improvements made for easier debugging and error tracing in `@loopback/rest` module:\\n\\n- PR [#6159](https://github.com/strongloop/loopback-next/pull/6159) added more debug information for request parsing, routing, and method invocation. The debugging keywords are `loopback:rest:find-route`, `loopback:rest:invoke-method`, and `loopback:rest:parse-param`.\\n\\n- The route description is improved in PR [#6188](https://github.com/strongloop/loopback-next/pull/6168) to include the verb and the path.\\n\\n- PR [#6171](https://github.com/strongloop/loopback-next/pull/6171) added HTTP server options and status information in the debug string. The debugging keyword is `loopback:http-server`.\\n\\n## Switching to DCO\\n\\nTo [make your contribution process simpler](https://strongloop.com/strongblog/switching-to-dco/), we have changed the contribution method from CLA to DCO for `loopback-next` and most of the connector repositories. Be sure to sign off your commits using the `-s` flag or adding `Signed-off-By: Name<Email>` in the commit message. For more details, see [https://loopback.io/doc/en/contrib/code-contrib.html](https://loopback.io/doc/en/contrib/code-contrib.html#developer-certificate-of-origin-dco).\\n\\n## Miscellaneous\\n\\n- PR [#6172](https://github.com/strongloop/loopback-next/pull/6172) makes sure the REST options are passed to http-server.\\n\\n- PR [#6105](https://github.com/strongloop/loopback-next/pull/6105) Reworked the validation code to use exiting `RestHttpErrors.invalidData` error. This way the error object includes the parameter name in the error message & properties and has a machine-readable code property.\\n\\n## Community Contributions\\n\\nThank you for the contribution coming from the community. Here are some of the contributions that we\'d like highlight:\\n\\n- Thanks to [Nico Flaig](https://github.com/nflaig)\'s [contribution](https://github.com/strongloop/loopback-next/pull/5735)! Now `@loopback/authenticate` supports applying multiple authentication strategies to one endpoint. The new syntax of decorator is:\\n  ```ts\\n  @authenticate(\\n    strategyOne | strategyOneWithOptions, \\n    strategyTwo | strategyTwoWithOptions\\n  )\\n  myFunction() {}\\n  ```\\n  The new syntax is well documented in page [Authentication Decorator](https://loopback.io/doc/en/lb4/Authentication-component-decorator.html).\\n\\n- We appreciate [Madaky](https://github.com/madaky)\'s feature PR [#5589](https://github.com/strongloop/loopback-next/pull/5589) which adds the token refresh service in extension `@loopback/authentication-jwt`. You can check the [new guide](https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt#endpoints-with-refresh-token) to try it.\\n\\n- Many thanks to [Rifa Achrinza](https://github.com/achrinza)\'s contribution in PR [6153](https://github.com/strongloop/loopback-next/pull/6153). The order filter now supports string value as the shortcut in addition to the existing array value. You can specify an order filter as `{order: \'name DESC\'}`.\\n\\n## Enriching LoopBack and its Community - You are Invited!\\n\\nAs mentioned in our [recent blog post](https://strongloop.com/strongblog/2020-community-contribution/), your contribution is important to make LoopBack a sustainable open source project. \\n\\nHere is what you can do:\\n- [Join LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Look for first-contribution-friendly issues](https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\\n- Give us feedback and join our discussion in [our GitHub repo](https://github.com/strongloop/loopback-next)\\n\\nLet\'s make LoopBack a better framework together!"},{"id":"2020-community-contribution","metadata":{"permalink":"/2020-community-contribution","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-08-27-community.md","source":"@site/blog/2020/2020-08-27-community.md","title":"Enriching LoopBack and its Community - You are Invited!","description":"Originally published on strongloop.com","date":"2020-08-27T00:00:00.000Z","formattedDate":"August 27, 2020","tags":[{"label":"Community","permalink":"/tags/community"}],"readingTime":5.32,"truncated":true,"authors":[{"name":"Raymond Feng","title":"LoopBack Maintainer","url":"https://github.com/raymondfeng","imageURL":"https://avatars0.githubusercontent.com/u/540892","key":"raymondfeng"},{"name":"Miroslav Bajto\u0161","title":"LoopBack Maintainer","url":"http://github.com/bajtos","imageURL":"https://avatars.githubusercontent.com/u/1140553","key":"bajtos"},{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Enriching LoopBack and its Community - You are Invited!","date":"2020-08-27T00:00:00.000Z","authors":["raymondfeng","bajtos","dhmlau"],"slug":"2020-community-contribution","tags":["Community"]},"prevItem":{"title":"LoopBack 4 August 2020 Milestone Update","permalink":"/august-2020-milestone"},"nextItem":{"title":"Community Q&A Monthly Digest - July 2020","permalink":"/2020-jul-slack-qa"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nAlmost two years ago, [LoopBack 4 was released and announced](https://strongloop.com/strongblog/loopback-4-ga) at Node+JS Interactive event. Thanks to your support, we now have over 110k downloads per month on npmjs.com and over 3000 GitHub stars on the [loopback-next repo](https://github.com/strongloop/loopback-next). Recently, we created the [LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw) to provide a platform for the community and us helping each other. We are glad to see an increasing engagement in that front as well!\\n\\nWith the core of the framework maturing and contributions shifting to the LoopBack extensions, we think LoopBack has entered a new stage and it\'s time to revisit our approach to planning work, delivering features, fixing bugs, and improving documentation.\\n\\n\x3c!--truncate--\x3e\\n\\n## A Short History of LoopBack 4\\n\\nAs we started the rewrite of LoopBack from ground up back in early 2017 (see the [kick-off post](https://strongloop.com/strongblog/announcing-loopback-next/)), it quickly became clear the scope is huge and we must be very disciplined in planning and scoping features if we want to reach a meaningful release in a reasonable time. We were working in short iterations, burning through a backlog of tasks we identified as required for the initial release. Eventually we published the first [Developer Preview](https://strongloop.com/strongblog/loopback-4-developer-preview-release) in November 2017, followed by more preview releases, until we finally released [LoopBack 4 GA](https://strongloop.com/strongblog/loopback-4-ga) in October 2018. Keeping a tight control over backlog prioritization and milestone planning allowed us to achieve this great milestone.\\n\\nSuch a tight planning worked great while it was mostly the IBM core team working on the project. On the flip side, this process made it sometimes difficult to juggle our time between working on our roadmap vs helping community contributors; and often created the impression that the core team will eventually implement all missing features, given enough time, and community contributions are not really necessary. This was acceptable while the framework offered only a limited subset of features needed to build real applications, because there were only few early adopters to support and it was indeed the core team that was contributing most of the improvements.\\n\\nAs more and more users discover and try LoopBack, they may find feature gaps, identify bugs, or even come up great ideas. If the perception is that somebody else (the core team) will eventually implement those features, then there are little incentives for users to step up and join the project as contributors. As a result, the number of maintainers is not keeping up with the growing number of users, leading to ever-increasing load on existing maintainers and eventually maintainers burning out or leaving the project. (You can read more on this topic in [Healthy Open Source](https://medium.com/the-node-js-collection/healthy-open-source-967fa8be7951) and [Sustaining and growing LoopBack as a successful open source project](https://medium.com/loopback/sustaining-loopback-project-b67fd59673e4)).\\n\\nMany of us has experienced this ourselves in the past, when LoopBack 3 got to the stage where the maintainers were overwhelmed with the amount of incoming issues and pull requests. We feel it\'s time to turn the ship around and make sure we don\'t repeat the same mistakes in LoopBack 4. As LoopBack 4 user base grows, it is essential to grow our contributor community joining forces to enhance the framework together.\\n\\n## Encourage More Community Contributions\\n\\nWe have been always actively looking for new ways to attract more contributions from our community and grow contributors into maintainers.\\n\\nTo make it easy for our users to find easy-to-implement improvements to contribute, we are adding `good first issue` and `help wanted` labels on GitHub issues, and listing items we\'d like to see progress in our roadmaps and milestones.\\n\\nIn addition, we recently made [an announcement](https://strongloop.com/strongblog/switching-to-dco/) about switching the contribution method to Developer Certificate of Origin (DCO) from Contributor License Agreement (CLA). We hope this will make the contribution process easier for you.\\n\\nGoing forward, we would like to focus more on enabling more of you to contribute by mentoring and coaching them to complete their PRs and providing technical guidance on their work if needed. We would also like to create more examples and starter code for experimental features, and invite the community to enhance those features collectively.\\n\\nTo further encourage community contributions, we are going to open our planning process too and start building the roadmap together with our community, based on what tasks individual contributors would like to work on.\\n\\n## Inspire More Community Extensions\\n\\nOne of the strengths of LoopBack 4 is its extensibility. You can create extensions to extend the programming model and integration capability of the LoopBack 4 framework.\\n\\nWe created a number of extensions, for example, the recently published [TypeORM](https://github.com/strongloop/loopback-next/tree/master/extensions/typeorm) and [pooling service](https://github.com/strongloop/loopback-next/tree/master/extensions/pooling) extensions. These can be served as references to inspire you to build extensions to fit your needs. \\n\\nMoreover, we\'ll be working on [cleaning up the extension template and documentation](https://github.com/strongloop/loopback-next/issues/5336), so that the developer experience of building an extension is smoother.\\n\\nAt the same time, we\'re happy to see more extensions built by the community, see the [community extensions page](https://loopback.io/doc/en/lb4/Community-extensions.html). Let\'s build this list together by submitting a PR to include your extensions!\\n\\n## Potential Work under Our Radar\\n\\nWe have been investigating a few areas that can further improve LoopBack 4 based on our visions, even more importantly community feedbacks. There are some ideas for inspiration.\\n\\nModernizing the juggler has been under our radar. We would like to position LoopBack as the composition layer that brings API/microservice stories together. It will include built-in capabilities such as REST API and Data/Service access as well as integration with other frameworks. We\'re planning to publish a blog to cover that. Stay tuned.\\n\\nBelow are areas that we\'ve done some initial investigation/implementation and would like to invite you to join us to build a more complete story. It includes continuing to improve our documentation and building more education materials. Likewise, we\'ll be publishing blog posts to share our plans and visions in the following areas:\\n\\n- [Multi-tenancy](https://github.com/strongloop/loopback-next/tree/master/examples/multi-tenancy)\\n- [Web socket](https://github.com/raymondfeng/loopback4-example-websocket)\\n- [Kafka integration](https://github.com/strongloop/loopback4-example-kafka)\\n- [GraphQL](https://github.com/strongloop/loopback-next/pull/5545)\\n- [gRPC](https://github.com/strongloop/loopback-next/pull/6134)\\n\\n\\n## Conclusion\\n\\nYour contribution is important to make LoopBack a sustainable open source project. We hope our plans to adopt DCO, improve the extension development experience and focus on enabling contributors would make your contribution experience smoother and better. We are also planning on sharing our views on a few technologies. \\n\\nHere is what you can do:\\n- [Join LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Look for first-contribution-friendly issues](https://github.com/strongloop/loopback-next/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\\n- Give us feedback and join our discussion in [our GitHub repo](https://github.com/strongloop/loopback-next)\\n\\nLet\'s make LoopBack a better framework together!"},{"id":"2020-jul-slack-qa","metadata":{"permalink":"/2020-jul-slack-qa","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-08-19-july-slack-qanda.md","source":"@site/blog/2020/2020-08-19-july-slack-qanda.md","title":"Community Q&A Monthly Digest - July 2020","description":"Originally published on strongloop.com","date":"2020-08-19T00:00:00.000Z","formattedDate":"August 19, 2020","tags":[{"label":"Community","permalink":"/tags/community"},{"label":"Slack","permalink":"/tags/slack"},{"label":"Q&A","permalink":"/tags/q-a"}],"readingTime":2.5,"truncated":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Community Q&A Monthly Digest - July 2020","date":"2020-08-19T00:00:00.000Z","authors":"dhmlau","slug":"2020-jul-slack-qa","tags":["Community","Slack","Q&A"]},"prevItem":{"title":"Enriching LoopBack and its Community - You are Invited!","permalink":"/2020-community-contribution"},"nextItem":{"title":"LoopBack 4 July 2020 Milestone Update","permalink":"/july-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nWelcome to the July edition of the \\"Community Q&A Monthly Digest\\", curating some of the Q&A that we think it might be helpful to you. Let\'s take a look.\\n\\n\x3c!--truncate--\x3e\\n\\n--- \\n**Question**: Is there a built-in support in LB4 for database retries if the db responds with 429 for example? Or is it possible to overwrite a single method to implement this for all db operations similiar to how entityToData can be overwriten if data should be added to all create/update operations.\\n\\n**Answer**: It\'s better to intercept execution errors inside the datasource, not at repository level. I created a small example to demonstrate the approach. In a real app, I would extract the code into a mixin that can be applied on any DataSource class.\\nhttps://gist.github.com/bajtos/2379d7c6df31e477aaa3a3f6ea87886c\\n\\n--- \\n\\n**Question**: Is it possible to connect my API to a webhook, so that when an event is triggered, it notifies my API? What documentation could I read about doing this?\\n\\n**Answer**: A webhook is just another HTTP request. Depending on the architecture of the lb4 app, this request can be done in a Service, an Interceptor, or a Controller, using either the built-in Node.js API or third-party HTTP request modules such as Axios.\\nBesides that, no special configuration is needed for web hooks.\xa0\\n\\n---\\n\\n**Question**: How to implement\xa0`findOrCreate`\xa0instead\xa0`await exists`\xa0+\xa0`await create`?\\n\\n**Answer**: You can extend\xa0`DefaultCrudRepository`\xa0with\xa0`findOrCreate`\xa0\u2019s implementation.\\nThen your repositories extend the custom one. Similar to\xa0how `AccountRepository` extends `MyDefaultCrudRepository` in the tutorial [https://loopback.io/doc/en/lb4/Repositories.html#define-repositories](https://loopback.io/doc/en/lb4/Repositories.html#define-repositories).\\n\\n---\\n\\n**Question**: I started using Loopback 4. How to redirect home screen of LB4 to angular 8 running on some other port?\\n\\n**Answer**: It should be possible to replace the `.static` function in the app class with `.redirect`: [https://loopback.io/doc/en/lb4/apidocs.rest.restapplication.redirect.html](https://loopback.io/doc/en/lb4/apidocs.rest.restapplication.redirect.html).\\n\\n---\\n\\n**Question**: The compiler throws the error `error TS2322: Type \'string\' is not assignable to type PredicateComparison<..>` when I tried some repository CRUD methods. Is it a bug or anything wrong with my setup?\\n\\n**Answer**: It is a type issue. For [repository CRUD methods](https://loopback.io/doc/en/lb4/apidocs.repository.defaultcrudrepository.html#methods), they may take in `Filter` or `Where` type parameters. For those cases, you will need to specify the type of it, for example:\\n\\n```ts\\nconst userCount = await this.userRepository.count({tags: \'admin\'} as Where<User>);\\nconst vipUser = await this.userRepository.find({where:{tags: \'vip\'}} as Filter<User>);\\n```\\n\\n---\\n\\n**Question**: We have a project which includes multi-tenancy based multi-database pattern (We have Common DB which stores Client Informations (Users, DB configs etc), and each clients has own database). How can I perform switching datasource dynamically with the multi-tenancy based project?\\n\\n**Answer**: You can check out [the multi-tenancy example](https://github.com/strongloop/loopback-next/tree/master/examples/multi-tenancy) and [the GH issue](https://github.com/strongloop/loopback-next/issues/5056) that discusses about multi-tenancy and dynamic schema selection. You can create datasources at runtime. Meanwhile, if the number of dbs is limited, you can define them upfront and reuse them, see [Creating a datasource at runtime](https://loopback.io/doc/en/lb4/DataSources.html#creating-a-datasource-at-runtime). Then the tenant strategy can inject a repository talking to your common DB to load configs per logged in user.\\n\\n---\\n\\n## Interested to Join our Slack Workspace?\\nSimply click [this invitation link](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw) to join. You can also find more channel details here: [https://github.com/strongloop/loopback-next/issues/5048](https://github.com/strongloop/loopback-next/issues/5048)."},{"id":"july-2020-milestone","metadata":{"permalink":"/july-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-08-05-july-milestone.md","source":"@site/blog/2020/2020-08-05-july-milestone.md","title":"LoopBack 4 July 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-08-05T00:00:00.000Z","formattedDate":"August 5, 2020","tags":[{"label":"Milestone update","permalink":"/tags/milestone-update"}],"readingTime":5.975,"truncated":true,"authors":[{"name":"Agnes Lin","title":"LoopBack Maintainer","url":"https://github.com/agnes512","imageURL":"https://avatars3.githubusercontent.com/u/50331796","key":"agnes512"}],"frontMatter":{"title":"LoopBack 4 July 2020 Milestone Update","date":"2020-08-05T00:00:00.000Z","authors":"agnes512","slug":"july-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"Community Q&A Monthly Digest - July 2020","permalink":"/2020-jul-slack-qa"},"nextItem":{"title":"Making Your Contribution Process Simpler - Switching from CLA to DCO","permalink":"/switching-to-dco"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nWe can\'t believe that it is already August! Let\'s check out the work we did in July:\\n\\n- [HasManyThrough Relation](#hasmanythrough-relation)\\n- [Documentation Enhancements](#documentation-enhancements)\\n- [Reorganize Code and Docs Along Abstraction Levels](#reorganize-code-and-docs-along-abstraction-levels)\\n- [Bug Fixes](#bug-fixes)\\n- [Community Contribution](#community-contribution)\\n\\n\x3c!--truncate--\x3e\\n\\n## HasManyThrough Relation\\n\\nA `HasManyThrough` relation sets up a many-to-many connection through another model. A real-world example is a doctor has many patients through appointments. The relation can be defined with `@hasMany` decorator as:\\n\\n```ts\\n  //...\\n  @hasMany(() => Patient, {through: {model: () => Appointment}})\\n  patients: Patient[];\\n```\\n\\nWe finished most of implementation in June, and we added `HasManyThrough` to the relation CLI and also related documentation so that users could learn it better. Please make sure you have `@loopback/repository` with version 2.10.0 or higher installed.\\n\\n### Documentation\\n\\nThe [`hasManyThrough` Relation](https://loopback.io/doc/en/lb4/HasManyThrough-relation.html) page is being added under [Relations](https://loopback.io/doc/en/lb4/Relations.html) page. We introduced the use cases, definitions, and examples of how you can customize the relation to meet your requirements. Nevertheless, as mentioned in the docs, because it is an experimental feature, there are some missing functionalities such as [`inclusionResolver`](https://github.com/strongloop/loopback-next/issues/5946). Feel free to join discussions on GitHub or even contribute :D\\n\\n### CLI Command\\n\\nCommand line interfaces (CLI) is a convenient tool to help you create artifacts quickly. We added `hasManyThrough` relation to `lb4 relation` command. With a few prompts, you can define a `hasManyThrough` relation easily:\\n\\n```sh\\n$ lb4 relation\\n? Please select the relation type hasManyThrough\\n? Please select source model Doctor\\n? Please select target model Patient\\n? Please select through model Appointment\\n? Foreign key name that references the source model to define on the through model\\n doctorId\\n? Foreign key name that references the target model to define on the through model\\n patientId\\n? Source property name for the relation getter (will be the relation name)\\n patients\\n```\\n\\nDon\'t forget to install the latest `@loopback/cli` to try it out!\\n\\n## Documentation Enhancements\\n\\nOne of our recent targets is to upgrade the documentation system. As you can see on the site, we reorganized most of the items in sidebar. In the overview page, the section [How is our documentation organized](https://loopback.io/doc/en/lb4/index.html#how-is-our-documentation-organized) introduces how you can find documentation in the four quadrants.\\n\\nBesides improving the structure, here are some documentation enhancements we\'d like to share:\\n\\n### Apply JWT Authentication Component to Shopping Example\\n\\nThe [`@loopback/authentication-jwt`](https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt) component was created to make adding JWT authentication to your application earlier. We\'ve applied it to the [shopping example](https://github.com/strongloop/loopback4-example-shopping). To find out more, see the [JWT authentication extension documentation page](https://loopback.io/doc/en/lb4/JWT-authentication-extension.html).\\n\\n### How to Access Multiple Models in a Single Transaction\\n\\nA _transaction_ is a sequence of data operations performed as a single logical\\nunit of work. LoopBack 4 has many relational database connectors support such logic requirements. We added a section [Accessing multiple models inside one transaction](https://loopback.io/doc/en/lb4/Using-database-transactions.html#accessing-multiple-models-inside-one-transaction) to show how it can be achieved.\\n\\n### Custom AJV Validation\\n\\nWe realized that the current AJV Validation documentation is missing a crucial information piece on how to enable custom validation and error messages. Please check out the section [Custom validation rules and error messages](https://loopback.io/doc/en/lb4/Model.html#custom-validation-rules-and-error-messages) and [Validation example](https://github.com/strongloop/loopback-next/tree/master/examples/validation-app) for details.\\n\\n## Reorganize Code and Docs Along Abstraction Levels\\n\\nAs LoopBack 4 is growing larger, we decide to hide some low-level tools from users so that the framework looks neat and friendly. In July, we hid module [`@loopback/openapi-v3`](https://github.com/strongloop/loopback-next/tree/master/packages/openapi-v3) as it can be loaded from [`@loopback/rest`](https://github.com/strongloop/loopback-next/tree/master/packages/rest).\\n\\nWe removed `@loopback/openapi-v3` from dependencies and also our CLI template dependencies. If you check the page [Extending OpenAPI Specification](https://loopback.io/doc/en/lb4/Extending-OpenAPI-specification.html) or other related pages, you will notice it is now hidden and replaced by `@loopback/rest`.\\n\\n## Execute Raw NoSQL Queries\\n\\nIf you have a SQL database as back-end service, you can execute raw queries using the `execute` method that we have in `Repository`, and it works great. Unfortunately, `execute` does not work for NoSQL connectors such as MongoDB as they require more than just a `command` string and `args` array.\\n\\nIn July, we started working on how we can improve LB4 API and MongoDB connector API to make it easy to execute raw MongoDB commands. We added a `DataSource.execute` method to the Juggler, and leveraged it to support different `execute` styles. We also added support for non-SQL variants of `Repository.execute()` in the `loopback/repository` module. More works will be done in August. You can check the progress in story [Execute raw NoSQL queries](https://github.com/strongloop/loopback-next/issues/3342) on GitHub if you\'re interested.\\n\\n## Bug Fixes\\n\\nThere was a story that a boy woke up in one morning and found himself transformed into a gigantic bug. We don\'t want that to happen, so we fixed a few bugs in July:\\n\\n### Unable to Perform Nested Filters\\n\\nAs we added the support for coercing query object with schema last month, it exposed a bug that the nested scope filters don\'t have the correct constraints. It is being fixed and released in `@loopback/rest@5.2.1`. Now you can include nested navigational properties using filter like:\\n\\n```ts\\n{\\n  include: [\\n    {\\n      relation: \\"orders\\",\\n      scope: {\\n        // nested relation\\n        include: [\\n          {\\n            relation: \\"someOtherRelation\\",\\n          },\\n  ...\\n}\\n```\\n\\n### Query with Dollar Signs in MongoDB Connector\\n\\nIf you\'re using MongoDB, you would be used to have dollar signs ($) in your queries. However, the dollar signs are not needed in LB4 general queries, and that\'s why [loopback-mongodb-connector](https://github.com/strongloop/loopback-connector-mongodb) users get confused usually. To improve the user experience, we made some changes in the connector [loopback-mongodb-connector](https://github.com/strongloop/loopback-connector-mongodb), so that the connector users won\'t get errors even if the queries contain extra dollar signs. The change is released in `@loopback-connector-mongodb@5.3.0`\\n\\n## Community Contribution\\n\\n### New Community Maintainers\\n\\nWe are glad to have [@nabdelgadir](https://github.com/nabdelgadir) and [@madaky](https://github.com/madaky) to be one of our community maintainers. We appreciate your great work you\'ve done and welcome to the team.\\n\\n### Highlights\\n\\n- As LoopBack 4 is designed to be more scalable and extensible, there are numbers of extensions created by the open source community. You may find some interesting and helpful extensions under the [Community extensions](https://loopback.io/doc/en/lb4/Community-extensions.html) page. We are also considering adding example usages of LB4 from the community. Please let us know if you got any great extensions or examples you would like to share with us!\\n- The community user [@zyqVizzzzz](https://github.com/zyqVizzzzz) translated several tutorials for LB4 in Chinese. They can be found in the page [\u6559\u7a0b\uff08Tutorials\uff09](https://loopback.io/doc/zh/lb4/Tutorials). We really appreciate it! If you\'re interested in translating LB4 documentation, the instructions can be found in the page [Translation](https://loopback.io/doc/en/contrib/translation.html).\\n\\nIn order to make your contribution process simpler, we will be gradually changing the contribution method from Contribution License Agreement (CLA) to Developer Certificate of Origin (DCO). Take a look at [this blog](https://strongloop.com/strongblog/switching-to-dco/) to find out what the changes are and what it means to you.\\n\\n## What\'s Next?\\n\\nIf you\'re interested in what we\'re working on next, you can check out the [August Milestone](https://github.com/strongloop/loopback-next/pull/6028).\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"switching-to-dco","metadata":{"permalink":"/switching-to-dco","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-07-29-dco.md","source":"@site/blog/2020/2020-07-29-dco.md","title":"Making Your Contribution Process Simpler - Switching from CLA to DCO","description":"Originally published on strongloop.com","date":"2020-07-29T00:00:00.000Z","formattedDate":"July 29, 2020","tags":[{"label":"Community","permalink":"/tags/community"},{"label":"Contribution","permalink":"/tags/contribution"}],"readingTime":1.615,"truncated":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Making Your Contribution Process Simpler - Switching from CLA to DCO","date":"2020-07-29T00:00:00.000Z","authors":"dhmlau","slug":"switching-to-dco","tags":["Community","Contribution"]},"prevItem":{"title":"LoopBack 4 July 2020 Milestone Update","permalink":"/july-2020-milestone"},"nextItem":{"title":"Community Q&A Monthly Digest - Jun 2020","permalink":"/2020-Jun-slack-qa"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nSince the beginning of the LoopBack project, we have been using the Contributor License Agreement (CLA) as the contribution method. Contributors need to sign each CLA for each LoopBack repository they\'re contributing. To simplify the contribution process and encourage community contributions, we are planning to gradually switch to use [Developer Certificate of Origin (DCO)](https://developercertificate.org/) as the contribution method. \\n\\n\x3c!--truncate--\x3e\\n\\n## What Is Developer Certificate of Origin (DCO)?\\n\\nAs an alternative to CLA, a Developer Ceritifcate of Origin (DCO) is a more lightweight contribution method. According to [Wikipedia](https://en.wikipedia.org/wiki/Developer_Certificate_of_Origin):\\n\\n> Instead a signed legal contract, a DCO is an affirmation that the source code being submitted originated from the developer, or that the developer has permission to submit the code.\\n\\nThe full text of DCO can be found: [https://developercertificate.org/](https://developercertificate.org/). \\n\\n## Why Are We Switching?\\n\\nCommunity contributions are vital to the success of LoopBack. Since DCO simply needs your affirmation that you are the one who is submitting the code, we hope this switch would make the contribution process simpler and thus encourages more contributions from you!\\n\\nIn addition, this change can help us to reduce the infrastructure cost, including the team\'s time and effort, to maintain the CLA server. \\n\\n\\n## What Does It Mean To You?\\n\\nCurrently, the [loopback4-example-shopping](https://github.com/strongloop/loopback4-example-shopping) is already using DCO. \\n\\nTo sign off the commit, you can:\\n```\\ngit commit -s -m \\"feat: my commit message\\"\\n```\\n\\nOver the next little while, we\'ll start the switch for the repositories with the most community contributions, namely [loopback-next](https://github.com/strongloop/loopback-next), [loopback.io](https://github.com/strongloop/loopback.io) and [loopback-datasource-juggler](https://github.com/strongloop/loopback-datasource-juggler), then we\'ll roll it out for the connector repos. \\n\\n## Start Contributing!\\n\\nYou are more than welcome to contribute on something that you find it relevant and interesting to you. If you\'re simply looking for items that we want help, you can look for GitHub issues with [`help wanted`](https://github.com/issues?q=is%3Aopen+is%3Aissue+archived%3Afalse+user%3Astrongloop+label%3A%22help+wanted%22) or [`good first issue`](https://github.com/issues?q=is%3Aopen+is%3Aissue+archived%3Afalse+user%3Astrongloop+label%3A%22good+first+issue%22) labels. \\n\\nMore questions? Feel free to ask in the #loopback-contributors channel of the [LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)."},{"id":"2020-Jun-slack-qa","metadata":{"permalink":"/2020-Jun-slack-qa","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-07-22-jun-slack-qa.md","source":"@site/blog/2020/2020-07-22-jun-slack-qa.md","title":"Community Q&A Monthly Digest - Jun 2020","description":"Originally published on strongloop.com","date":"2020-07-16T00:00:00.000Z","formattedDate":"July 16, 2020","tags":[{"label":"Community","permalink":"/tags/community"},{"label":"Slack","permalink":"/tags/slack"},{"label":"Q&A","permalink":"/tags/q-a"}],"readingTime":2.52,"truncated":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Community Q&A Monthly Digest - Jun 2020","date":"2020-07-16T00:00:00.000Z","authors":"dhmlau","slug":"2020-Jun-slack-qa","tags":["Community","Slack","Q&A"]},"prevItem":{"title":"Making Your Contribution Process Simpler - Switching from CLA to DCO","permalink":"/switching-to-dco"},"nextItem":{"title":"LoopBack 4 2020 Q2 Overview","permalink":"/loopback-4-2020-q2-overview"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nWelcome back to the \\"Community Q&A Monthly Digest\\", in which we highlight some of the questions and answers in [our LoopBack Slack community](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw) here.\\n\\n\x3c!--truncate--\x3e\\n\\n**Question:** Has anyone implemented Casbin on a brand new project? or is there a good tutorial for lb4? I need to have some rbac / roles system in an app.. or what would you suggest to achieve that?\\n\\n**Answer:** We have an access control example uses casbin, see the [access-control-migration example](https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration) and [its tutorial](https://loopback.io/doc/en/lb4/migration-auth-access-control-example.html). The logic on casbin side is only a prototype, the example mainly shows the integration between casbin and LoopBack authorization system.\\n\\n---\\n\\n**Question:** I am new to LoopBack and so far I really like what it has to offer. I was wondering if anyone knows of a good online course to learn LoopBack. I have worked through the basic tutorials found in the documentation, but I find it easier to listen and follow along to videos. \\n\\n**Answer:** Recently one of our community member posts a [YouTube tutorial for LoopBack 4 beginners](https://www.youtube.com/watch?v=cgBCRY169qg). There is another series of educational videos on [a LoopBack introduction](https://www.youtube.com/watch?v=pDGWb-q65qM) and [installation](https://www.youtube.com/watch?v=1U9ZCDlBtjc). \\n\\nFrom our side, there are a few recent videos on our [StrongLoop YouTube channel](https://www.youtube.com/channel/UCR8LLOxVNwSEWLMqoZzQNXw/videos) and we\'re trying to add more. Hope it helps.\\n\\n---\\n\\n**Question:** I am trying to disable the openapi.json from showing in my loopback 4 application and its not working. I was able to disable the explorer. Any ideas?\\n\\n**Answer:** You can use `openApiSpec: {disabled: true}` in `index.ts`. i.e. \\n\\n```ts\\nconst config = {\\n    rest: {\\n      //..\\n      openApiSpec: {\\n        disabled: true\\n        //..\\n      },\\n    },\\n  };\\n```\\n---\\n\\n**Question:** Does Loopback 4 support extracting cookies from the header? Currently I had to integrate Express server to achieve this. \\n\\n**Answer:** You can use express middleware like [http://expressjs.com/en/resources/middleware/cookie-parser.html](http://expressjs.com/en/resources/middleware/cookie-parser.html) see how to use middleware in [https://loopback.io/doc/en/lb4/Express-middleware.html](https://loopback.io/doc/en/lb4/Express-middleware.html).\\n\\n---\\n\\n**Question:** Is there a quick way to generate timestamp? Like at the model level `generated:true`?\\n\\n**Answer:** I recommend to use defaultFn set to one of the following string values:\\n- \\"guid\\": generate a new globally unique identifier (GUID) using the computer MAC address and current time (UUID version 1).\\n- \\"uuid\\": generate a new universally unique identifier (UUID) using the computer MAC address and current time (UUID version 1).\\n- \\"uuidv4\\": generate a new universally unique identifier using the UUID version 4 algorithm.\\n- \\"now\\": use the current date and time as returned by new Date()\\n\\nSee also [https://github.com/strongloop/loopback/issues/292](https://github.com/strongloop/loopback/issues/292) and [https://loopback.io/doc/en/lb4/Model.html#property-decorator](https://loopback.io/doc/en/lb4/Model.html#property-decorator).\\n\\nIt would be great to capture these options in our TypeScript definitions, see [https://github.com/strongloop/loopback-next/blob/ae6427322451c914ae54f44dbb656981e7fbbb81/packages/repository/src/model.ts#L34-L42](https://github.com/strongloop/loopback-next/blob/ae6427322451c914ae54f44dbb656981e7fbbb81/packages/repository/src/model.ts#L34-L42).\\n\\n---\\n\\n**Question:** Can I use MongoDB update operators in LoopBack apps? How can I enable it?\\n\\n**Answer:** Yes, except comparison and logical operators, the mongo connector also supports MongoDB update operators such as `max`, `rename`, etc. You will need to set the flag `allowExtendedOperators` to `true` in the datasource configuration. You can find details and examples at [MongoDB connector - update operators](https://loopback.io/doc/en/lb4/MongoDB-connector.html#update-operators).\\n\\n---\\n\\n\\n## Interested to Join our Slack Workspace?\\nSimply click [this invitation link](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw) to join. You can also find more channel details here: [https://github.com/strongloop/loopback-next/issues/5048](https://github.com/strongloop/loopback-next/issues/5048)."},{"id":"loopback-4-2020-q2-overview","metadata":{"permalink":"/loopback-4-2020-q2-overview","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-07-14-loopback-q2-overview.md","source":"@site/blog/2020/2020-07-14-loopback-q2-overview.md","title":"LoopBack 4 2020 Q2 Overview","description":"Originally published on strongloop.com","date":"2020-07-14T00:00:00.000Z","formattedDate":"July 14, 2020","tags":[{"label":"Quarterly update","permalink":"/tags/quarterly-update"}],"readingTime":7.055,"truncated":true,"authors":[{"name":"Agnes Lin","title":"LoopBack Maintainer","url":"https://github.com/agnes512","imageURL":"https://avatars3.githubusercontent.com/u/50331796","key":"agnes512"}],"frontMatter":{"title":"LoopBack 4 2020 Q2 Overview","date":"2020-07-14T00:00:00.000Z","authors":"agnes512","slug":"loopback-4-2020-q2-overview","tags":["Quarterly update"]},"prevItem":{"title":"Community Q&A Monthly Digest - Jun 2020","permalink":"/2020-Jun-slack-qa"},"nextItem":{"title":"LoopBack 4 June 2020 Milestone Update","permalink":"/june-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nOver the recent months, this global pandemic has affected our lives in different ways; we hope you all stay safe during these difficult times. The LoopBack team has adapted to new ways of working, including virtually and in new settings. Even though it could be challenging sometimes, we are glad that we were able to complete most of our Q2 plan. Thanks to all the support from the team and the community!\\n\\nHere\'s a brief look at the Q2 summary:\\n\\n- [Migration Guide](#migration-guide)\\n- [Enhancing Documentation](#enhancing-documentation)\\n- [Leveraging Authentication System](#leveraging-authentication-system)\\n- [APIC/LB4 Integration](#apic/lb4-integration)\\n- [Other Highlights](#other-highlights)\\n- [Building LoopBack Community](#building-loopBack-community)\\n\\n\x3c!--truncate--\x3e\\n\\n## Migration Guide\\n\\nOne of our main targets in Q2 was to finish the migration guide, and we did it! We accomplished all the items on the [migration plan](https://github.com/strongloop/loopback-next/issues/453). The [Migration guide](https://loopback.io/doc/en/lb4/migration-overview.html) can be found easily on the LB4 home page. We have instructions that helps you migrate various artifacts and also have docs to explain similarities and differences between LB3 and LB4. From request/response infrastructure to datasource setup, from model definitions to the authentication and authorization, we hope the guide is useful for you when migrating your LoopBack 3 applications to LoopBack 4.\\n\\n## Enhancing Documentation\\n\\n### New Documentation Structure\\n\\nThis quarter, one of our targets was to upgrade the documentation system. As we are adding more features and documentation to LoopBack 4, the abundant amount of sidebar entries was overwhelming and difficult to navigate with the old documentation system. We reorganized most of them into the following four parts:\\n\\n- \\"Tutorials\\"\\n- \\"How-to guides\\"\\n- \\"Behind the scenes\\"\\n- \\"References guides\\"\\n\\nFor example, if you\'d like to learn how you can secure your LoopBack 4 application, now you can find it easily under the \\"Tutorials\\" sections instead of searching through the whole path \\"Concept -> Authentication -> Authentication tutorial\\".\\n\\nMoreover, we also started working on reorganizing most of our documentation to focus on framework-level APIs and de-emphasizing the lower-level building blocks to reduce the complexity. For example, we removed `@loopback/express` from framework-level documentation and replaced references to use `@loopback/rest instead`.\\n\\nThis is just the first step of our long journey of improving the documentation system. Please let us know if you have any feedback.\\n\\n### Rewriting your favorite LB3 content to LoopBack 4\\n\\nWe\'ve been using shared content for some topics in both LB3 and LB4, but this might be confusing if the user is not familiar with LB3. To reduce the gap between these two versions, we also rewrote some documentation from LB3 in LB4 style. For example, now you can check usage examples written in LB4 style for the Filters under the page [Working with data](https://loopback.io/doc/en/lb4/Working-with-data.html). What\'s more is that we also created tutorials for connecting to [MySQL](https://loopback.io/doc/en/lb4/Connecting-to-MySQL.html), [Oracle](https://loopback.io/doc/en/lb4/Connecting-to-Oracle.html), [PostgreSQL](https://loopback.io/doc/en/lb4/Connecting-to-PostgreSQL.html), and [MongoDB](https://loopback.io/doc/en/lb4/Connecting-to-MongoDB.html) databases. By following the steps in these tutorials, you\'ll find it easy to connect to databases with LB4 applications.\\n\\n## Leveraging Authentication System\\n\\nThe authentication system has changed a lot since it was being used as an experimental feature. It is now more reliable and flexible. We improved it in the following aspects:\\n\\n### Examples\\n\\nWe added two examples for different authentication strategies:\\n\\n- [TODO example with JWT](https://github.com/strongloop/loopback-next/tree/master/examples/todo-jwt) demos enabling JWT authentication in the Todo application. This is a good example for beginners to follow the authentication system.\\n\\n- [Passport Login example](https://github.com/strongloop/loopback-next/tree/master/examples/passport-login) shows how to use [Passport Strategies](http://www.passportjs.org/docs/) in LoopBack 4. If you are using the loopback-component-passport in LoopBack 3, this example can help you migrate your application to LoopBack 4.\\n\\n### Documentation\\n\\nWe reorganized the authentication documentation to make it more easy to adopt. Instead of throwing all the details to users, now the [authentication docs](https://loopback.io/doc/en/lb4/Authentication-overview.html) starts with a simple high-level explanation, then it walks through users with several examples with different difficulties to show what the system is capable of and how they can be achieved.\\n\\nBesides, as we mentioned above, we also added page [Migrating authentication and authorization](https://loopback.io/doc/en/lb4/migration-auth-overview.html) as part of the migration plan as well.\\n\\n## APIC/LB4 Integration\\n\\n[API Connect](https://developer.ibm.com/apiconnect/) is a complete, intuitive and scalable API platform provided by IBM.\\n\\nIn Q2, we completed the integration of LoopBack 4 with API Connect v10 which was released in June. When a LoopBack application is scaffolded through the APIC toolkit, the LoopBack-generated OpenAPIv3 spec comes with API Connect specific metadata added, thanks to the [LoopBack APIConnect extension](https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect). If you\'re interested, we\'ve been preparing an article on how you can take the APIs created from LoopBack and import them into API Connect for API management. Stay tuned!\\n\\n## Other Highlights\\n\\nHere are some highlights of our work we would like to share!\\n\\n### Supporting TypeORM\\n\\nYou might decide to use an alternative ORM/ODM in your LoopBack 4 application, and LoopBack 4 also has such flexibility as it no longer expects you to provide your data in its own custom Model format for routing purposes, which means you are free to alter your classes to suit these ORMs/ODMs.\\n\\n[TypeORM](https://typeorm.io/#/) is an ORM that can run in NodeJS and others platforms and can be used with TypeScript and JavaScript, which fits LoopBack 4 well. We implemented initial support for TypeORM in LoopBack 4 in the `@loopback/typeorm` package. Please check the [README](https://github.com/strongloop/loopback-next/blob/master/packages/typeorm/README.md) file for the usage and limitations.\\n\\n### Express Middleware\\n\\nLoopBack 4 leverages Express behind the scenes for its REST server implementation. The new [Express Package](https://github.com/strongloop/loopback-next/tree/master/packages/express), has enabled injecting single and multiple express middleware functions as `Interceptor`s into `Controller` invocations and also as a middleware step in the application `Sequence`.\\n\\n### Component Application Booter\\n\\nSometimes it might be the case that we want to break our complex application into multiple smaller LoopBack applications. The component application booter composes these sub applications into the main application. This is helpful for building a scalable micro-services application. See the page [Booting an Application](https://loopback.io/doc/en/lb4/Booting-an-Application.html).\\n\\n### HasManyThrough Relation\\n\\nWith help from the community users, the experimental feature [`HasManyThrough` relation](https://github.com/strongloop/loopback-next/blob/master/packages/repository/src/relations/has-many/has-many-through.repository.ts) is added to LB4. Currently it only has some basic functionalities. The documentation and related CLI will be updated in the near future.\\n\\n### Run Tests in Parallel\\n\\nWe upgraded `mocha` to the new version 8, and it enable parallel execution of Mocha tests. With the option, we can control the number of worker processes and make the testing process more efficient. Details can be found in [Running tests](https://loopback.io/doc/en/lb4/code-contrib-lb4.html#running-tests) section.\\n\\n### Extensions\\n\\nExtensions/Extension points is one of the main features of LB4 to make the application extensible. We added the following two extensions in Q2:\\n\\n- JWT authentication: as the authentication system gets popular and more solid, we extracted the JWT authentication system into a separate extension package as an experimental feature, so that users can quickly mount a component to try out the feature. Check [`authentication-jwt`](https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt) for details.\\n\\n- LoopBack APIConnect extension: the [LoopBack APIConnect extension](https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect) is ready for use. It provides `ApiConnectComponent` that adds an `OASEnhencer` extension to contribute `x-ibm-configuration` to the OpenAPI spec generated by LoopBack applications.\\n\\n## Building LoopBack Community\\n\\nWe\'re happy to see more users/developers join our community. We appreciate all the help! We\'ve opened a public [Slack](https://slack.com/) channel so that developers can ask questions, discuss issues, and share their knowledge to help each other easily.\\n\\nWe also had a several video-calls with LoopBack maintainers. It\'s nice to get to know each other, share the plans & visions and discuss topics by talking together. Let\'s continue building LoopBack a better framework together.\\n\\nWanna join us? Yes! You\'re invited :point_right: [Join LoopBack Channel on Slack](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw).\\n\\n## Previous Milestone Blogs\\n\\nThere are many more accomplishments that cannot be captured in this blog, make sure you check out our previously published monthly milestone blog posts in Q2 for more details:\\n\\n- [April 2020](https://strongloop.com/strongblog/april-2020-milestone/)\\n- [May 2020](https://strongloop.com/strongblog/may-2020-milestone/)\\n- [June 2020](https://strongloop.com/strongblog/june-2020-milestone/)\\n\\n## What\'s Next?\\n\\nWe have published a blog [LoopBack - 2020 Goals and Focus](https://strongloop.com/strongblog/2020-goals/) about our plans this year. Here is a summary of the [Q3 2020 roadmap](https://github.com/strongloop/loopback-next/blob/master/docs/ROADMAP.md#q3-2020-roadmap):\\n\\n- finish migration guide for both general runtime and authentication & authorization\\n- continue with API Connect and LoopBack integration\\n- look into feature parity gaps that are highly requested by users\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"june-2020-milestone","metadata":{"permalink":"/june-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-07-08-june-milestone.md","source":"@site/blog/2020/2020-07-08-june-milestone.md","title":"LoopBack 4 June 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-07-08T00:00:00.000Z","formattedDate":"July 8, 2020","tags":[{"label":"Milestone update","permalink":"/tags/milestone-update"}],"readingTime":7.23,"truncated":true,"authors":[{"name":"Yaapa Hage","title":"LoopBack Maintainer","url":"https://github.com/hacksparrow","imageURL":"https://avatars2.githubusercontent.com/u/950112","key":"hacksparrow"},{"name":"Miroslav Bajto\u0161","title":"LoopBack Maintainer","url":"http://github.com/bajtos","imageURL":"https://avatars.githubusercontent.com/u/1140553","key":"bajtos"}],"frontMatter":{"title":"LoopBack 4 June 2020 Milestone Update","date":"2020-07-08T00:00:00.000Z","authors":["hacksparrow","bajtos"],"slug":"june-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 4 2020 Q2 Overview","permalink":"/loopback-4-2020-q2-overview"},"nextItem":{"title":"Community Q&A Monthly Digest - May 2020","permalink":"/2020-may-slack-qa"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nDocumentation restructuring, TypeORM support, and HasManyThrough were the three main accomplishments in the month of June. Based on the community feedback, documentation improvement remains our number one priority in the coming month. Besides, while welcoming Nathan Chen join as a maintainer of the `strong-globalize` repo, we said farewell to Deepak. \\n\\nHere is what we did in the month June:\\n\\n- [Documentation Improvements](#documentation-improvements)\\n- [HasManyThrough](#hasmanythrough)\\n- [TypeORM Support](#typeormsupport)\\n- [Miscellaneous](#miscellaneous)\\n\\n\x3c!--truncate--\x3e\\n\\n## Documentation Improvements\\n\\n### New Documentation Structure\\n\\nWhen writing documentation for new features, we were often struggling to find the right place to put the content and the right form to frame the information. Recently, we discovered a documentation system based on four different functions. It explains why we were struggling and provides a structure to guide us when writing new content.\\n\\n> Documentation needs to include and be structured around its four different functions: tutorials, how-to guides, technical reference and explanation. Each of them requires a distinct mode of writing. People working with software need these four different kinds of documentation at different times, in different circumstances - so software usually needs them all, and they should all be integrated into your documentation.\\n\\nIn June, we explored how to apply this documentation system to our content and implemented first high-level changes in the way how our content is organized. Check out [loopback-next#5549](https://github.com/strongloop/loopback-next/issues/5549) to find more resources about our new documentation system.\\n\\nIn a series of incremental pull requests, we reworked our documentation structure as follows:\\n\\n- Renamed \\"Usage scenarios\\" to \\"How-to guides\\" to make it clear what kind of content is there.\\n- Placed all explanation-related pages in \\"Behind the scenes\\" section and removed the section \\"Key concepts\\".\\n- Relocated all reference guides to be nested under \\"Reference guides\\". We moved pages like \\"Error handling\\" and \\"Reserved binding keys\\" to references guides to make them easier to find.\\n- Moved pages from \\"Using components\\" to \\"How-to guides\\".\\n- Added support for sidebar sections that are just grouping related pages together but don\'t have a page of their own. This allowed us to remove few section pages that were rather anemic: \\"Access databases\\", \\"Reference guides\\", \\"How-to guides\\".\\n- Reworked the \\"Server\\" page in \\"Behind the scenes\\" because there was a mix of different kinds of content in the page. We extracted some of the guides into new pages nested under \\"How-to guides\\".\\n\\nThe re-organized documentation is already live at [loopback.io](https://loopback.io/doc/en/lb4), take a look and let us know what do you think!\\n\\nNow that the new structure is in place, we are going to gradually review and update existing documentation content to align it with the new system. You can find the list of relevant tasks in [loopback-next#5113](https://github.com/strongloop/loopback-next/issues/5113). As always, your help is welcome!\\n\\n### Alignment Along Abstraction Levels\\n\\nAs we were incrementally adding new features to the framework and extracting building blocks into standalone packages, our documentation ended up describing concepts from different abstraction layers in the same place, mixing information for framework users with references to low-level building blocks. This resulted in a steep learning curve for new users, because there were so many concept and packages to learn about!\\n\\nIn June, we reorganized most of our documentation to focus on framework-level APIs and deemphasize lower-level building blocks. As a result, we updated our developer documentation to describe which packages are considered as building blocks, see [Organization of content](https://loopback.io/doc/en/lb4/code-contrib-lb4.html#organization-of-content). We also:\\n\\n- [updated our packages and documentation pages to use `@loopback/core` instead of `@loopback/context`](https://github.com/strongloop/loopback-next/pull/5625)\\n- [removed `@loopback/metadata` from framework-level documentation and replaced references to use `@loopback/core` instead](https://github.com/strongloop/loopback-next/pull/5696)\\n- [removed `@loopback/express` from framework-level documentation and replaced references to use `@loopback/rest` instead](https://github.com/strongloop/loopback-next/pull/5693)\\n\\nNow we need to update places referring to `@loopback/openapi-v3`, as discussed in [loopback-next5692](https://github.com/strongloop/loopback-next/issues/5692). Want to contribute those changes yourself? Submit a PR today!\\n\\n### Refactoring of Authentication-related Documentation\\n\\nWe refactored the authentication documentation so that it is easier for beginners to follow. As the new entry page, the [authentication overview page](https://loopback.io/doc/en/lb4/Authentication-overview.html) describes a typical scenario for securing APIs and it also helps you understand what \\"authentication\\" means in LoopBack 4. Next you can follow a simple hands-on tutorial [secure your LoopBack 4 application with JWT authentication](https://loopback.io/doc/en/lb4/Authentication-tutorial.html) to start exploring this feature. Then you can gradually learn the authentication system\'s mechanism and how to implement your own authentication strategies.\\n\\n### Adding LoopBack 4 Content to Connector Pages\\n\\nAs the continuation of improving connector documentation, after updating the PostgreSQL connector, we updated the connector page and added three more tutorials for [MySQL](https://loopback.io/doc/en/lb4/Connecting-to-MySQL.html), [Oracle](https://loopback.io/doc/en/lb4/Connecting-to-Oracle.html), and [MongoDB](https://loopback.io/doc/en/lb4/Connecting-to-MongoDB.html) connectors in June. By walking you through the steps of creating a LB4 application and connecting to a certain database, we hope new users find the tutorial helpful to adopt LoopBack 4 better. Besides the basic setup steps, we also added some sections to explain those questions that are being asked a lot from the community. Check out these documentations under [Database connectors](https://loopback.io/doc/en/lb4/Database-connectors.html).\\n\\n## HasManyThrough\\n\\nA `HasManyThrough` relation sets up a many-to-many connection through another model. At the moment, LB4 only supports three basic relations: `HasMany`, `BelongsTo`, and `HasOne`.\\n\\nThanks to the initial work by [`codejamninja`](https://github.com/codejamninja) and [`derdeka`](https://github.com/derdeka), we have a working prototype of the feature.\\n\\nWhile functional, the [PR](https://github.com/strongloop/loopback-next/pull/2359) is pretty huge and some of the parts are up for discussion. As a result, we started to extract the core parts of the implementation into smaller PRs so that it\'s easier for review. In June, we had the basic operations working and tests are added. As the next step, we\'ll be adding documentation.\\n\\nStay tuned with the progress by going to [loopback-next #5835](https://github.com/strongloop/loopback-next/issues/5835).\\n\\n## TypeORM Support\\n\\nWe have implemented initial support for TypeORM in LoopBack. All it takes to enable TypeORM is to compose your app with the `TypeOrmMixin` mixin.\\n\\n```ts\\nimport {BootMixin} from \'@loopback/boot\';\\nimport {RestApplication} from \'@loopback/rest\';\\nimport {TypeOrmMixin} from \'@loopback/typeorm\';\\nexport class MyApplication extends BootMixin(TypeOrmMixin(RestApplication)) {\\n  ...\\n}\\n```\\n\\nFor details about using TypeORM with LoopBack, refer to the `@loopback/typeorm` [doc](https://github.com/strongloop/loopback-next/blob/master/packages/typeorm/README.md).\\n\\nComplete support for TypeORM is a significant amount of work. While the initial work is done, we\'re looking for ways to improve the implementation in the following areas.\\n\\n1. Complete TypeORM to OpenAPI data type conversion (currently only `number`,\\n   `string`, and `boolean` are supported)\\n2. Full JSON/OpenAPI schema for models, including variants like with/without id,\\n   with/without relations, partial, etc.\\n3. Json/OpenAPI schema to describe the supported filter format\\n4. Support for LoopBack-style filters\\n5. Custom repository classes (e.g. to implement bookRepo.findByTitle(title)).\\n6. Database migration\\n\\n## Miscellaneous\\n\\nWe upgraded `mocha` to the new version 8. This version brings support for running tests in parallel (yay!), but also drops support for `--opts` argument and `test/mocha.opts` file. See [Mocha 8.0.0 release notes](https://github.com/mochajs/mocha/releases/tag/v8.0.0) for the full list of breaking changes and instructions on migrating existing projects. Our changes were introduced by [loopback-next#5750](https://github.com/strongloop/loopback-next/pull/5750) and [loopback-next#5710](https://github.com/strongloop/loopback-next/pull/5710); and published in `@loopback/build` version `6.0.0`.\\n\\n[Miroslav](https://strongloop.com/authors/Miroslav_Bajto\u0161) benchmarked the performance of LoopBack and found an opportunity for a quick but significant improvement. By changing the algorithm used in `@loopback/context` to generate unique context instance names, we managed to improve the performance of our REST API layer by 45%! Learn more in the blog post [How We Improved LoopBack REST Performance by 45%](https://strongloop.com/strongblog/2020-improve-looopback-performance-uuid/).\\n\\nA new method `exportOpenApiSpec()` was added to the `RestServer` for generating OpenAPI specs in JSON or YAML format. This method can be called from the project directory by running the `openapi-spec` script.\\n\\nWhen a binding key is not bound,`ResolutionError` now captures more contextual information. Earlier it used to print a long stack trace and was not easy to find out where the failure happened.\\n\\nThe implementation of binding cache was [improved](https://github.com/strongloop/loopback-next/pull/5731) to prevent race conditions and better handle bindings in async conditions.\\n\\n`CoreBindings.APPLICATION_INSTANCE` now has corresponding `@config()` decorator.\\n\\n## July Milestones\\n\\nIn the month of July we will continue focusing on improving the documentation. You can see the whole list on the [July milestone issue](https://github.com/strongloop/loopback-next/issues/5837).\\n\\nThere is also ongoing work to have [native GraphQL support](https://github.com/strongloop/loopback-next/pull/5545) and a [new extension for pooling service](https://github.com/strongloop/loopback-next/pull/5681). Your feedback is welcome.\\n\\n## Welcome and Goodbyes\\n\\nWe\'re pleased to welcome [Nathan Chen](https://github.com/codechennerator) as the maintainer of the [strong-globalize](https://github.com/strongloop/strong-globalize) repo. Thank you Nathan for all the good work you\'ve done. On the other hand, it\'s sad to see [Deepak](https://strongloop.com/authors/Deepak_Rajamohan/) leaving the LoopBack team. We wish him best of luck in his new adventure.\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"2020-may-slack-qa","metadata":{"permalink":"/2020-may-slack-qa","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-06-10-may-slack-qa.md","source":"@site/blog/2020/2020-06-10-may-slack-qa.md","title":"Community Q&A Monthly Digest - May 2020","description":"Originally published on strongloop.com","date":"2020-06-11T00:00:00.000Z","formattedDate":"June 11, 2020","tags":[{"label":"Community","permalink":"/tags/community"},{"label":"Slack","permalink":"/tags/slack"},{"label":"Q&A","permalink":"/tags/q-a"}],"readingTime":2.225,"truncated":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Community Q&A Monthly Digest - May 2020","date":"2020-06-11T00:00:00.000Z","authors":"dhmlau","slug":"2020-may-slack-qa","tags":["Community","Slack","Q&A"]},"prevItem":{"title":"LoopBack 4 June 2020 Milestone Update","permalink":"/june-2020-milestone"},"nextItem":{"title":"How We Improved LoopBack REST Performance by 45%","permalink":"/2020-improve-looopback-performance-uuid"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nSince we made the [LoopBack Slack community](https://loopbackio.slack.com/) available, we are happy to see more and more users are joining. Let\'s see some of the questions and answers that we\'ve highlighted below.\\n\\n\x3c!--truncate--\x3e\\n\\n--- \\n**Question**: In the [Model documentation page](https://loopback.io/doc/en/lb4/Model.html#using-the-juggler-bridge), it says \\"To define a model for use with the juggler bridge, extend your classes from Entity\\". What\'s the juggler bridge?\\n\\n**Answer**: the Juggler bridge is used to bridge the gap between `@loopback/repository` and `loopback-datasource-juggler`. The former is used by LoopBack 4 to help define Models, Repositories, etc. It also allows for cross-datasource relations, etc. as they are enforced at the application level instead of the database.\\n\\nThe latter is the ORM/ODM that builds the queries and interacts with the database. It\'s from LoopBack 3 and is probably the only major component that didn\'t get revamped to keep backwards-compatibility.\\n\\nHence, the Juggler bridge helps bridge the gaps between these Node.js packages.\\n\\n`Entity` is, at it\'s core, a model that has an ID property. Looking at the source code for `Entity`, there\'s quite a bit of boilerplate code added.\\n\\n---\\n\\n**Question:** Is there a way to change the application port to string ? I am trying to deploy the application under Azure web app where the port is a string.\\n\\n**Answer**: Use `port: +(process.env.BILLING_PORT || 3000),`. The `+` converts a string to number. For the pipe, you should use `path` property instead of `port`. See [https://github.com/strongloop/loopback-next/blob/master/packages/http-server/src/__tests__/integration/http-server.integration.ts#L272](https://github.com/strongloop/loopback-next/blob/master/packages/http-server/src/__tests__/integration/http-server.integration.ts#L272).\\n\\n---\\n\\n**Question:** I have a model with a field which is defined as \u201cnumber\u201d. Working with Postgres. How should I define it to have the field as a double and not an integer ?\\n\\n**Answer:** You can specify the dataType field to define a certain type of that column. For type Double, for example,\\n```ts\\n@model()\\nexport class Item extends Entity {\\n  @property({\\n    type: \'number\',\\n    id: true,\\n    generated: false,\\n  })\\n  id?: number;\\n  @property({\\n    type: \'number\',\\n    postgresql: {\\n      dataType: \'double precision\',\\n    },\\n  })\\n  price?: number;\\n....\\n```\\n\\nThen run `npm run build` and then `npm run migrate` commands, the table should have columns:\\n```\\nprice       |                | double precision\\n```\\n\\nBesides the data type, LB4 also allows you to describe tables via the model definition and/or property definition. See [Data Mapping Properties](https://loopback.io/doc/en/lb4/Model.html#data-mapping-properties) for information.\\n\\n---\\n**Question:** Is there client sdk for lb4 for api code generation? I tried with swagger codegen, but the generated code seems doesn\'t work.\\n\\n**Answer:** You should try `lb4 openapi --client`. It generates strongly-typed LoopBack service proxies over openapi spec using TypeScript. We use it to generate SDKs in TS.\\n\\n---\\n\\n## Interested to Join our Slack Workspace?\\nSimply click [this invitation link](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw) to join. You can also find more channel details here: [https://github.com/strongloop/loopback-next/issues/5048](https://github.com/strongloop/loopback-next/issues/5048)."},{"id":"2020-improve-looopback-performance-uuid","metadata":{"permalink":"/2020-improve-looopback-performance-uuid","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-06-09-improve-uuid-performance.md","source":"@site/blog/2020/2020-06-09-improve-uuid-performance.md","title":"How We Improved LoopBack REST Performance by 45%","description":"Originally published on strongloop.com","date":"2020-06-09T00:00:00.000Z","formattedDate":"June 9, 2020","tags":[{"label":"REST","permalink":"/tags/rest"},{"label":"Performance","permalink":"/tags/performance"}],"readingTime":7.13,"truncated":true,"authors":[{"name":"Miroslav Bajto\u0161","title":"LoopBack Maintainer","url":"http://github.com/bajtos","imageURL":"https://avatars.githubusercontent.com/u/1140553","key":"bajtos"}],"frontMatter":{"title":"How We Improved LoopBack REST Performance by 45%","date":"2020-06-09T00:00:00.000Z","authors":"bajtos","slug":"2020-improve-looopback-performance-uuid","tags":["REST","Performance"]},"prevItem":{"title":"Community Q&A Monthly Digest - May 2020","permalink":"/2020-may-slack-qa"},"nextItem":{"title":"LoopBack 4 May 2020 Milestone Update","permalink":"/may-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nRecently, I measured the performance of LoopBack 4 and found an opportunity for an easy but significant improvement in the way how we are building per-request context instances.\\n\\n\x3c!--truncate--\x3e\\n\\nI have been always interested in performance, from high-level design patterns like caching & memoization, to micro-optimizations at language level (anybody remembers [CrankShaftScript](https://stackoverflow.com/a/44765284/69868) from Node.js 0.10 days?), all the way down to Mechanical Sympathy.\\n\\nSince we started rewritting LoopBack from scratch in 2016/17, our primary focus was on features; performance aspects were a bit off the radar. (Not entirely, we were careful to design our HTTP routing layer to avoid the low performance of regexp-matching approach used by Express.) Now that LoopBack 4 is pretty mature, I though it\'s a good time to take a quick look on how fast is our framework.\\n\\nTo quickly get a high-level overview, I installed [Clinic.js](https://clinicjs.org) and benchmarked our [TodoList example application](https://loopback.io/doc/en/lb4/todo-list-tutorial.html). I used the following TodoList query (`filter`) for all benchmarks:\\n\\n```json\\n{\\n  \\"include\\": [\\n    {\\n      \\"relation\\": \\"todos\\"\\n    }\\n  ]\\n}\\n```\\n\\nThe filter value needs to be URL-encoded, producing the following URL to pass to Clinic.js - let\'s save it to a shell variable for later use.\\n\\n```shell\\n$ URL=\\"/todo-lists?filter=%7B%0A%20%20%22include%22%3A%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22relation%22%3A%20%22todos%22%0A%20%20%20%20%7D%0A%20%20%5D%0A%7D\\"\\n```\\n\\n## Clinic.js Doctor\\n\\nThe Doctor component performs an overall diagnosis looking for common anti-patterns. After installing Clinic.js globally, I ran the following command in `examples/todo-list` directory of loopback-next monorepo:\\n\\n```shell\\n$ clinic doctor --debug --autocannon $URL -- node .\\nServer is running at http://127.0.0.1:3000\\nRunning 10s test @ http://localhost:3000/todo-lists?filter=(...)\\n10 connections\\n(...)\\n18k requests in 11.05s, 11.1 MB read\\nAnalysing data\\nGenerated HTML file is file:///(...)/todo-list/.clinic/41598.clinic-doctor.html\\nYou can use this command to upload it:\\nclinic upload .clinic/41598.clinic-doctor\\n```\\n\\nThe report says there were no issue detected, hooray!\\n\\n<img class=\\"aligncenter size-full\\" src=\\"{{site.url}}/blog-assets/2020/06/uuid-clinic-doctor.png\\"/>\\n\\nA closer inspection shows that our process is consuming quite a lot of memory.  We don\'t have any memory leaks, which is most important. However, excessive allocations put more pressure on garbage collector which does impact application\'s performance. Let\'s set the memory usage aside for now and check how much time is the application spending on waiting for asynchronous operations.\\n\\n## Clinic.js Bubbleprof\\n\\nQuoting from [ThoughtWorks Technology Radar](https://www.thoughtworks.com/radar/languages-and-frameworks/clinic-js-bubbleprof):\\n\\n> Clinic.js Bubbleprof represents visually the async operations in Node.js processes, drawing a map of delays in the application\'s flow. We like this tool because it helps developers to easily identify and prioritize what to improve in the code.\\n\\nLet\'s see how the bubbles look like for a LoopBack application!\\n\\n```shell\\n$ clinic bubbleprof --debug --autocannon $URL -- node .\\nWarning: The code is transpiled, bubbleprof does not support source maps yet.\\nServer is running at http://127.0.0.1:3000\\nRunning 10s test @ http://localhost:3000/todo-lists?filter=(...)\\n10 connections\\n(...)\\n2k requests in 10.06s, 1.28 MB read\\nAnalysing data\\nGenerated HTML file is file:///(...)/todo-list/.clinic/42229.clinic-bubbleprof.html\\nYou can use this command to upload it:\\nclinic upload .clinic/42229.clinic-bubbleprof\\n```\\n\\nThere isn\'t much to see in the report, the application spent less than 20ms waiting for async operations. I guess that was kind of expected considering that our example application is using in-memory storage and not communicating with any external service.\\n\\n<img class=\\"aligncenter size-full\\" src=\\"{{site.url}}/blog-assets/2020/06/uuid-clinic-bubbleprof.png\\"/>\\n\\n\\n## Clinic.js Flame\\n\\nThe last item in Clinic.js toolbox is Flame. Quoting from Clinic\'s website:\\n\\n> (...)  flamegraphs are a visualization of profiled software, allowing the most frequent code-paths to be identified quickly and accurately. Clinic.js Flame is specifically for Node.js and is built into Clinic.js. It collects metrics using by CPU sampling, then tracks top-of-the-stack frequency and creates flamegraphs.\\n\\nCan we find anything interesting in the flames? Let\'s see.\\n\\n```shell\\n$ clinic flame --debug --autocannon $URL -- node .\\nServer is running at http://127.0.0.1:3000\\nRunning 10s test @ http://localhost:3000/todo-lists?filter=(...)\\n10 connections\\n15k requests in 10.03s, 9.44 MB read\\nAnalysing data\\nGenerated HTML file is file:///(...)/todo-list/.clinic/42454.clinic-flame.html\\nYou can use this command to upload it:\\nclinic upload .clinic/42454.clinic-flame\\n```\\n\\nThere is a lot of information packaged into a flame graph. Initially, Clinic.js is selecting the hottest frame - the stack that was observed most often while running the application. In our case, the hottest frame is pointing to Node.js internals dealing with writing data to streams.\\n\\n<img class=\\"aligncenter size-full\\" src=\\"{{site.url}}/blog-assets/2020/06/uuid-clinic-flame-1.png\\"/>\\n\\nThere isn\'t much we can do about Node.js streams. Our application is writing HTTP responses so it has to spend some time writing the data. The third hottest frame is `parseQueryStringValues` from the module `qs`, this is again not something we can easily improve. Let\'s remove all components except `dist` in the check-box list at the bottom of the screen to focus on LoopBack code only.\\n\\n<img class=\\"aligncenter size-full\\" src=\\"{{site.url}}/blog-assets/2020/06/uuid-clinic-flame-2.png\\"/>\\n\\nNow the list of hot frames looks much more actionable! Here are the top entries:\\n\\n1. `handle` in `sequence.js` was 11.4% of time on top of stack\\n2. `buildLookupMap` in `relation.helpers.js` was 6.3% of time on top of stack\\n3. `findByForeignKeys` in `relation.helpers.js` was 5.7% of time on top of stack\\n\\nAnd so the list goes on. The entry number 7 caught my attention: the application is spending 1.3% of the time in `generateName` from `context.js`.  That\'s suspicious, why is generating context names so expensive?\\n\\nIt turns out we are generating unique context names to make it easier to debug binding-related issues. Our initial implementation was based on [UUID version 4 (random)](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) algorithm. Universally unique ids are great when you are aggregating debug logs from a mesh of microservices. However, most of the time, context names are just a hidden property of context instances that\'s not surfaced anywhere.  Applications shouldn\'t be paying performance tax for something they don\'t use. Let\'s see if we can find a better solution.\\n\\n## UUID Alternatives\\n\\nWhat other options are there to generate unique ids?\\n\\n- We can use UUID version 1 that\'s based on date-time and MAC address.\\n- If we didn\'t need universally unique values, then a simple counter (perhaps prefixed with the current process id) could be a viable alternative.\\n- Surely somebody else must have encountered this problem before us. Aren\'t there any fast id generators on npmjs.com? Of course there are! The search for [\\"fast unique id\\"](https://www.npmjs.com/search?q=fast%20unique%20id) returned\\n[hyperid](https://www.npmjs.com/package/hyperid) as the best match.\\n\\nLet\'s compare the performance of these alternatives. I wrote a simple benchmark which you can find in this [Gist](https://gist.github.com/bajtos/6343512b171156872d3b701b2c10a682) and measured the following data:\\n\\n|method|ids/second|\\n|-|-:|\\n|numeric counter |`11095k`|\\n|hyperid         |`10234k`|\\n|UUID v1         | `1649k`|\\n|UUID v4         |  `325k`|\\n\\nInitially, I wanted to use a numeric counter because it has the best performance. However, that would mean losing uniqueness of context names.  At the end, I decided to go with `hyperid`. It combines UUID v4 with a counter to achieve almost the same performance as the counter-only algorithm while preserving universal uniqueness of the generated ids.\\n\\nTo better measure the impact on performance, I created a small REST application that does not parse the query string and returns the response data directly, without going through `@loopback/repository`. Replacing `uuid/v4` with `hyperid` improved the performance of my test application from `~2.4k` requests/second to `~3.5k` requests/second on average. The average request latency has improved from `3.8ms` to `2.6ms`.\\n\\nThe pull request [loopback-next#5628](https://github.com/strongloop/loopback-next/pull/5628) improving `generateName` performance has been already landed and will become publicly available in the next framework release.\\n\\n## Summary\\n\\nAs the popular saying goes, performance is not a problem until it becomes a problem. Even if your project is not performance sensitive, it\'s still good to pay attention to how much resources it consumes at runtime.\\n\\n1. Watch for warning signs. Maybe an existing test has suddenly started to fail on a timeout? When that happens, try to take the hard path: investigate the problem, dig deep to find the root cause and fix it.\\n\\n2. Measure, measure, measure. Always create a reproducible benchmark to measure the effect of the changes you are going to make. Performance tuning is full of surprises and not all changes are for better.\\n\\n3. Know the tooling. Node.js is compatible with many tools provided by Chrome\'s Developer Tools, it provides also tracing functionality for a more fine-grained analysis. You can learn more in Node.js documentation, starting from [Debugging - Getting Started](https://nodejs.org/en/docs/guides/debugging-getting-started/), [Easy profiling for Node.js Applications](https://nodejs.org/en/docs/guides/simple-profiling/) and [Flame Graphs](https://nodejs.org/en/docs/guides/diagnostics-flamegraph/).\\n\\n4. Optimize hot paths. A semi-expensive function can become a performance problem when it\'s called for every incoming request.\\n\\n## Call to Action\\n\\nLoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Join the community Slack chat](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue)."},{"id":"may-2020-milestone","metadata":{"permalink":"/may-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-06-03-may-milestone.md","source":"@site/blog/2020/2020-06-03-may-milestone.md","title":"LoopBack 4 May 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-06-04T00:00:00.000Z","formattedDate":"June 4, 2020","tags":[{"label":"Milestone update","permalink":"/tags/milestone-update"}],"readingTime":6.88,"truncated":true,"authors":[{"name":"Janny Hou","title":"LoopBack Maintainer","url":"https://github.com/jannyhou","imageURL":"https://avatars2.githubusercontent.com/u/12554153","key":"jannyhou"}],"frontMatter":{"title":"LoopBack 4 May 2020 Milestone Update","date":"2020-06-04T00:00:00.000Z","authors":"jannyhou","slug":"may-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"How We Improved LoopBack REST Performance by 45%","permalink":"/2020-improve-looopback-performance-uuid"},"nextItem":{"title":"How to reuse custom LoopBack Repository code","permalink":"/2020-share-repository-code"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nThe completion of the migration epic would be the biggest news in May. Now LoopBack 3 users can find the migration guide [here](https://loopback.io/doc/en/lb4/migration-overview.html). Meanwhile, we have feature contributions and bug fixes happened across all the functional areas. \\n\\nThere are more than 20 community PRs merged in May and we really appreciate every community member\'s help. We set up community calls every four weeks to keep in touch with our maintainers. See the latest schedule and recording in [this story](https://github.com/strongloop/loopback-governance/issues/4).\\n\\nKeep reading to learn about what happened in May.\\n\\n\x3c!--truncate--\x3e\\n\\n## Migration Epic\\n\\n### Migrating components\\n\\nThe migration guide for components, which is a powerful way to contribute any artifacts, is the last but most widely covered story in the migration epic. To make the migration guide easier to navigate, we split component-related instructions into several sub-sections as \\"project layout\\", \\"models, entities and repositories\\", \\"current context\\", \\"model mixins\\", \\"REST API endpoints\\". You can check the documentation [migration-extensions-overview](https://loopback.io/doc/en/lb4/migration-extensions-overview.html) and its sub-pages to learn the details.\\n\\n### Migrating LoopBack 3 tests to LoopBack 4\\n\\nWhen a LoopBack 3 application is mounted in a LoopBack 4 project, its endpoints are exposed through the LoopBack 4\'s REST server. To reuse the existing LoopBack 3 tests, you can easily migrate them by following the instructions in [example `lb3-application`](https://github.com/strongloop/loopback-next/tree/master/examples/lb3-application#running-lb3-tests-from-lb4). It covers how to set up clients to test requests and how to test runtime functions.\\n\\n## Features\\n\\n### Preserving prototype for toObject\\n\\nLoopBack CRUD operations invoke `toObject` function internally to return a model instance. `toObject` converts a value to a plain object as DTO (Data transfer object). It returned a JSON representation before, which doesn\'t preserve the prototype of complicated types like `Date`, `ObjectId` but returned the value as a string instead. Now such values\' prototypes are kept, for example:\\n\\n```ts\\nconst DATE = new Date(\'2020-05-01\');\\nconst created = await repo.create({\\n  createdAt: DATE,\\n});\\n// The returned model instance has `createdAt` as type Date\\nexpect(created.toObject()).to.deepEqual({\\n  id: 1,\\n  createdAt: DATE,\\n});\\n```\\n\\n### Express Middleware\\n\\nLookBack 4 leverages Express behind the scenes for its REST server implementation. We decided to not use Express middleware as-is but now we support integrating the middleware in different ways. You can invoke it explicitly in the sequence, or register it to be executed by `InvokeMiddleware` action, or use it as controller interceptors.\\n\\nPage [Express middlware](https://loopback.io/doc/en/lb4/Express-middleware.html) explains all the scenarios and usages. And page [Middleware](https://loopback.io/doc/en/lb4/Middleware.html) provides the general knowledge of LoopBack 4 middleware.\\n\\n### Context Improvements\\n\\n- Function `createBindingFromClass` allow bindings to be created from dynamic value provider classes, for example: \\n  ```ts\\n  @bind({tags: {greeting: \'c\'}})\\n  class DynamicGreetingProvider {\\n    static value(@inject(\'currentUser\') user: string) {\\n      return `Hello, ${this.user}`;\\n    }\\n  }\\n  // toDynamicValue() is used internally\\n  // A tag `{type: \'dynamicValueProvider\'}` is added\\n  const binding = createBindingFromClass(GreetingProvider);\\n  ctx.add(binding);\\n  ```\\n\\n- A provider class can use dependency injection to receive resolution-related\\nmetadata such as context and binding. But the overhead to wrap a factory\\nfunction is not desired for some use cases. [PR#5370](https://github.com/strongloop/loopback-next/pull/5370) introduces a lightweight alternative using toDynamicValue as follows:\\n\\n  ```ts\\n  import {ValueFactory} from \'@loopback/context\';\\n  // The factory function now have access extra metadata about the resolution\\n  const factory: ValueFactory<string> = resolutionCtx => {\\n    return `Hello, ${resolutionCtx.context.name}#${\\n      resolutionCtx.binding.key\\n    } ${resolutionCtx.options.session?.getBindingPath()}`;\\n  };\\n  const b = ctx.bind(\'msg\').toDynamicValue(factory);\\n  ```\\n  A benchmark is added to measure the performance of\\n  different styles of context bindings in package [@loopback/benchmark](https://github.com/strongloop/loopback-next/tree/master/benchmark). You can run `npm run -s benchmark:context` to see the result.\\n\\n- [PR#5378](https://github.com/strongloop/loopback-next/pull/5378) introduced a model booter to automatically bind model classes to the application during boot. You can retrieve and inject model constructors using key `models.<model_name>`. For example:\\n\\n  ```ts\\n  @model()\\n  class MyModel extends Model {}\\n\\n  class MyModelComponent {\\n    models = [MyModel];\\n  }\\n  // you can get MyModel by `models.MyModel`\\n  const modelCtor = myApp.getSync<typeof MyModel>(\'models.MyModel\');\\n  ```\\n\\n### Build Improvements\\n\\n- We upgraded the dependency to TypeScript@3.9.2. Code adjustments including `null` check and type intersection were made to be compatible with the new version. You can check [PR#5041](https://github.com/strongloop/loopback-next/pull/5041/commits) for more details.\\n\\n- Replace eslint rule `no-invalid-this` with TypeScript-aware one: In code accessing `this` variable, eslint-ignore comment for `no-invalid-this` will no longer work. You can either\\nchange those comments to disable `@typescript-eslint/no-invalid-this`,  or better tell TypeScript what is the type of `this` in your function.\\n\\n  A TypeScript example:\\n\\n  ```ts\\n  import {Suite} from \'mocha\';\\n  describe(\'my mocha suite\', function(this: Suite) {\\n    this.timeout(1000);\\n    it(\'is slow\', function(this: Mocha.Context) {\\n      this.timeout(2000);\\n    });\\n  })\\n  ```\\n\\n  A JavaScript example:\\n\\n  ```js\\n  describe(\'my mocha suite\', /** @this {Mocha.Suite} */ function() {\\n    this.timeout(1000);\\n    it(\'is slow\', /** @this {Mocha.Context} */ function() {\\n      this.timeout(2000);\\n    });\\n  })\\n  ```\\n\\n- Remove hand-written index files: We removed the root level dummy index files and changed the entry point of project to be the index file inside `src` folder. An example of the latest layout of a package can be found in the [Todo application](https://github.com/strongloop/loopback-next/tree/master/examples/todo).\\n\\n### Application Booter\\n\\n- You can register a booter to boot a sub-application as:\\n\\n  ```ts\\n  class MainAppWithSubAppBooter extends BootMixin(Application) {\\n    constructor() {\\n      super();\\n      this.projectRoot = __dirname;\\n      // boot a sub-application `app`, its bindings will be added as well\\n      this.applicationBooter(app);\\n    }\\n  }\\n  ```\\n\\n## Documentation and Blog\\n\\n### What LoopBack can offer on top of Express\\n\\nLoopBack is a framework built on top of Express. It comes packed with tools, features, and capabilities that enables rapid API and micro-services development and easy maintenance. Last month we published a blog summarizing the points that make LoopBack a compelling choice for Express developers when it comes to API development. You can read [this blog](https://strongloop.com/strongblog/express-to-loopback/) to see how LoopBack can bring Express to the next level.\\n\\n### Managing LoopBack APIs with IBM APIConnect\\n\\nLoopBack 4 application can integrate with API Connect framework. We\'ve prepared an article on how you can take the APIs created from LoopBack and import them into API Connect for API management. Stay tuned for the published article.\\n\\n\x3c!-- Add more stuff when https://github.com/strongloop/strongloop.com/pull/262 finishes --\x3e\\n\\n### Setting Debug String\\n\\nDocumentation [setting debug string](https://loopback.io/doc/en/lb4/Setting-debug-strings.html) explains the usage of running a LoopBack 4 application with debug string turned on. You can check the documentation above to learn the debug string pattern and the format in each package.\\n\\n### Strong Error Handler\\n\\nAs a dependency of [`@loopback/rest`](https://github.com/strongloop/loopback-next/tree/master/packages/rest), package `strong-error-handler` is an error handler for use in both development (debug) and production environments. You can use it to customize the error rejection in the LoopBack 4 sequence. For its detailed usage, please read the documentation [using string error handler](https://loopback.io/doc/en/lb4/Using-strong-error-handler.html).\\n\\n### Postgresql Connector\\n\\nWe\'ve been sharing the connector documentation with LB3, which might be confusing, especially for new LB4 users. We updated the PostgreSQL connector page and also the tutorial. By walking you through the steps of creating a LB4 application and connecting to the PostgreSQL database, we hope the new tutorial helps new users to pick up LoopBack 4 better.\\n\\nYou can read page [connecting to PostgreSQL](https://loopback.io/doc/en/lb4/Connecting-to-PostgreSQL.html) to follow the tutorial.\\n\\n## Youtube Videos\\n\\nFor creating tutorials, we have more materials than documentations. Last month, one of our core maintainers [Miroslav](https://github.com/bajtos) published two video tutorials on [our StrongLoop YouTube channel](https://www.youtube.com/channel/UCR8LLOxVNwSEWLMqoZzQNXw):\\n\\n- How to reuse LoopBack repository code: [Click to watch the video](https://www.youtube.com/watch?v=s2yDaKiNYCg)\\n- Migrate LoopBack 4 datasource config to TypeScript: [Click to watch the video](https://www.youtube.com/watch?v=S3BKXh7wDYE)\\n\\n## Authentication\\n\\nThere are several documentation and user experience improvements happened this month to make the authentication system more automatic and easy to use:\\n\\n- Added example [`@loopback/todo-jwt`](https://github.com/strongloop/loopback-next/tree/master/examples/todo-jwt) to demo enabling JWT authentication in the Todo application. Its corresponding tutorial [JWT authentication tutorial](https://loopback.io/doc/en/lb4/Authentication-Tutorial.html) is coming soon.\\n\\n- Added security specification enhancer in [@loopback/authentication-jwt](https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt) to automatically bind the JWT scheme and global security specification to application. You don\'t need to manually add them in the application constructor anymore. The updated usage is documented in the [README.md](https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt#usage) file.\\n\\n## June Milestones\\n\\nThis month, we would like to work on the remaining items for the migration guide epic, documentation improvement and more. For more details, take a look at our [June milestone list on GitHub](https://github.com/strongloop/loopback-next/issues/5607).\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"2020-share-repository-code","metadata":{"permalink":"/2020-share-repository-code","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-06-02-share-repository-code.md","source":"@site/blog/2020/2020-06-02-share-repository-code.md","title":"How to reuse custom LoopBack Repository code","description":"Originally published on strongloop.com","date":"2020-06-02T00:00:00.000Z","formattedDate":"June 2, 2020","tags":[{"label":"Feature","permalink":"/tags/feature"},{"label":"Repository","permalink":"/tags/repository"}],"readingTime":6.09,"truncated":true,"authors":[{"name":"Miroslav Bajto\u0161","title":"LoopBack Maintainer","url":"http://github.com/bajtos","imageURL":"https://avatars.githubusercontent.com/u/1140553","key":"bajtos"}],"frontMatter":{"title":"How to reuse custom LoopBack Repository code","date":"2020-06-02T00:00:00.000Z","authors":"bajtos","slug":"2020-share-repository-code","tags":["Feature","Repository"]},"prevItem":{"title":"LoopBack 4 May 2020 Milestone Update","permalink":"/may-2020-milestone"},"nextItem":{"title":"LoopBack - Taking Express to the Next Level","permalink":"/express-to-loopback"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nWhen building a LoopBack 4 application, we often need to tweak or improve the default data access behavior provided by the framework. It\'s usually desirable to apply the same set of customizations for multiple models, possibly across several microservices. In this post, I\'d like to share a few tips and tricks for reusing such repository code.\\n\\n\x3c!--truncate--\x3e\\n\\n## Using a Repository Base Class\\n\\nIn this approach, you insert a new repository class (the Repository Base Class, e.g. `AuditableRepository`) between your model-specific repository class (e.g. `ProductRepository`) and the repository class provided by the framework (typically `DefaultCrudRepository`). The base class will hold any code you want to reuse in multiple model-specific repositories.\\n\\nA week ago, I recorded a screencast showing the concept of Repository base classes in practice, you can watch it here:\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/s2yDaKiNYCg\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nThe first step is to create a new source code file and implement an empty Repository Base Class. It\'s important to use `.repository.base.ts` suffix in the file name, this will allow `lb4 repository` to recognize the file as contributing a base class.\\n\\n```ts\\n// src/repositories/auditing.repository.base.ts\\nimport {\\n  DefaultCrudRepository,\\n  Entity,\\n  juggler,\\n} from \'@loopback/repository\';\\n\\nexport class AuditingRepository<\\n  T extends Entity,\\n  ID,\\n  Relations extends object = {}\\n> extends DefaultCrudRepository<T, ID, Relations> {\\n  // put the shared code here\\n}\\n```\\n\\nYou should also add an entry to `src/repositories/index.ts` file to re-export the new class:\\n\\n```ts\\n// src/repositories/index.ts\\nexport * from \'./auditing.repository.base\';\\n```\\n\\nWhen you run `lb4 repository` command now, it will find our new base class and offer it in the prompts:\\n\\n```\\n$ lb4 repository\\n? Please select the datasource DbDatasource\\n? Select the model(s) you want to generate a repository for Product\\n? Please select the repository base class (Use arrow keys)\\n\u276f DefaultCrudRepository (Legacy juggler bridge)\\n  ----- Custom Repositories -----\\n  AuditingRepository\\n```\\n\\nI will not go into details on implementing custom persistence behavior here, please watch the screencast to learn how to create a repository class that sets the model property `modifiedBy` to the currently authenticated user on every write operation.\\n\\nOnce you have the repository base class implemented, you may want to share it between multiple projects (e.g. microservices). I recommend creating a LoopBack 4 extension providing the base class and packaging the extension as a standalone npm module..\\n\\n1. Create a new LoopBack 4 extension using `lb4 extension`\\n2. Move `src/repositories/auditing.repository.base.ts` file to the extension (you can use the same file name and path, i.e. `src/repositories/auditing.repository.base.ts`)\\n3. In the extension, update `src/repositories/index.ts` and `src/index.ts` to re-export (new) artifacts.\\n4. Publish the extension to your (private) npm registry or add it as a new package to your monorepo.\\n\\nIn order to use the repository base class from the extension in an application project, we have a bit of work to do. At the moment, `lb4 repository` does not scan dependencies in `node_modules` for repository base classes. To make the base class discoverable by LoopBack\'s CLI, you can add a tiny wrapper file to your application into a location discoverable by the CLI. Implementation-wise, the wrapper just re-exports the base class provided by the extension.\\n\\n```ts\\n// src/repositories/auditing.repository.base.ts\\nexport {AuditingRepository} from \'my-extension-name\';\\n```\\n\\nThat\'s it! Now you can easily create new model-specific repositories using `lb4 repository` and select your shared repository as the base class.\\n\\n## Using a Repository Mixin\\n\\nWhile easy to use, Repository Base Classes have few shortcomings too.\\n\\n1. JavaScript does not support multiple inheritance, thus it\'s not possible to combine behavior from multiple repository base classes in the same model-specific repository class.\\n\\n2. Inheritance-based reuse is considered to be an anti-pattern in Object Oriented Design; it\'s recommended to use composition instead (\\"prefer composition over inheritance\\").\\n\\nLet\'s take a look on how to use Mixins to share bits of repository code via composition.\\n\\nInstead of creating a repository base class, we will create a repository mixin using the [mixin class pattern](https://loopback.io/doc/en/lb4/Mixin.html).\\n\\n```ts\\nimport {MixinTarget} from \'@loopback/core\';\\nimport {CrudRepository, Model} from \'@loopback/repository\';\\n\\nexport function AuditingRepositoryMixin<\\n  M extends Model,\\n  R extends MixinTarget<CrudRepository<M>>\\n>(superClass: R) {\\n  return class extends superClass {\\n    // put the shared code here\\n  };\\n}\\n```\\n\\nBecause `lb4 repository` does not support repository mixins yet, you have to edit model repository classes manually to apply your new mixin.\\n\\n```ts\\nimport {Constructor, inject} from \'@loopback/core\';\\nimport {DefaultCrudRepository} from \'@loopback/repository\';\\nimport {DbDataSource} from \'../datasources\';\\nimport {AuditingRepositoryMixin} from \'../mixins/auditing.repository-mixin\';\\nimport {Product, ProductRelations} from \'../models\';\\n\\nexport class ProductRepository extends AuditingRepositoryMixin<\\n  Product,\\n  Constructor<\\n    DefaultCrudRepository<\\n      Product,\\n      typeof Product.prototype.id,\\n      ProductRelations\\n    >\\n  >\\n>(DefaultCrudRepository) {\\n  constructor(@inject(\'datasources.db\') dataSource: DbDataSource) {\\n    super(Product, dataSource);\\n  }\\n}\\n```\\n\\nWe are discussing CLI support for repository mixins in [loopback-next#5565](https://github.com/strongloop/loopback-next/issues/5565), please leave a comment to let us know if you are interested in this feature.\\n\\nMixins are easy to share via LoopBack extensions too:\\n\\n1. Create a new LoopBack 4 extension using `lb4 extension`\\n2. Move `src/mixins/auditing.repository-mixin.ts` file to the extension\\n3. In the extension, update `src/mixins/index.ts` and `src/index.ts` to re-export (new) artifacts.\\n4. Publish the extension to your (private) npm registry or add it as a new package to your monorepo.\\n5. In your application, update `import` statements to import the shared repository mixin from the extension.\\n\\n## Composing mixins together\\n\\nWhen using a repository base class, it\'s easy to apply all project-specific behavior via a single base class. We can build a composite mixin to achieve the same easy of use with mixins too.\\n\\nLet\'s say we already have `AuditingRepositoryMixin` and `TimeStampRepositoryMixin` implemented, and now we want to create `MyProjectRepositoryMixin` that will apply those two mixins, so that repository classes in our project don\'t have to repeat the list of mixins to apply.\\n\\n```ts\\n// src/mixins/my-project.repository-mixin.ts\\nexport function MyProjectRepositoryMixin<\\n  M extends Model,\\n  R extends MixinTarget<CrudRepository<M>>\\n>(superClass: R) {\\n  return AuditingRepositoryMixin(TimeStampRepositoryMixin(superClass));\\n}\\n```\\n\\n\\n## TypeScript limitations\\n\\nNow you may be thinking: can we define a repository base class that would be recognized by `lb4 repository` and would apply all required mixins?  Unfortunately, the answer is NO.\\n\\nConsider the following code:\\n\\n```ts\\n// src/repositories/base.repository.base.ts\\nexport class BaseRepository<\\n  T extends Entity,\\n  ID,\\n  Relations extends object = {}\\n> extends MyProjectRepositoryMixin<\\n  T,\\n  Constructor<DefaultCrudRepository<T, ID, Relations>>\\n>(DefaultCrudRepository) {\\n  // empty class\\n}\\n```\\n\\nTypeScript reports the following error during compilation:\\n\\n```\\nerror TS2562: Base class expressions cannot reference class type parameters.\\n```\\n\\nYou can learn more about this problem and the reasoning for the current compiler behavior in GitHub issue [Mixin does not allow Generic](https://github.com/Microsoft/TypeScript/issues/26154).\\n\\n## Conclusion\\n\\nIn this post, I explained how to extract bits of Repository code into a reusable form and how to share them by creating a new LoopBack extension. We discussed two options: an inheritance-based approach that uses Repository Base Class and a composition-based approach that uses Repository Mixin. Along the way, we discovered a few areas where TypeScript and LoopBack could improve the developer experience.\\n\\nI hope you will find these techniques useful.\\n\\n## Call to Action\\n\\nLoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- Join the discussion in [loopback-next#5565](https://github.com/strongloop/loopback-next/issues/5565) and let us know if you are interested in CLI support for repository mixins.\\n- [Join the community Slack chat](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw)\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue)."},{"id":"express-to-loopback","metadata":{"permalink":"/express-to-loopback","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-05-21-express-to-loopback.md","source":"@site/blog/2020/2020-05-21-express-to-loopback.md","title":"LoopBack - Taking Express to the Next Level","description":"Originally published on strongloop.com","date":"2020-05-27T00:00:00.000Z","formattedDate":"May 27, 2020","tags":[{"label":"Express","permalink":"/tags/express"},{"label":"JavaScript","permalink":"/tags/java-script"}],"readingTime":12.065,"truncated":true,"authors":[{"name":"Yaapa Hage","title":"LoopBack Maintainer","url":"https://github.com/hacksparrow","imageURL":"https://avatars2.githubusercontent.com/u/950112","key":"hacksparrow"}],"frontMatter":{"title":"LoopBack - Taking Express to the Next Level","date":"2020-05-27T00:00:00.000Z","authors":"hacksparrow","slug":"express-to-loopback","tags":["Express","JavaScript"]},"prevItem":{"title":"How to reuse custom LoopBack Repository code","permalink":"/2020-share-repository-code"},"nextItem":{"title":"LoopBack 4 April 2020 Milestone Update","permalink":"/april-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nExpress is the most popular Node.js package for web server development. Its lightweight, extensible, and flexible nature makes it a perfect fit for projects, small and large, from simple websites to complex web frameworks.\\n\\nLoopBack is a framework built on top of Express. It comes packed with tools, features, and capabilities that enables rapid API and microservices development and easy maintenance.\\n\\nIn this post we will explore the points that make LoopBack a compelling choice for Express developers when it comes to API development.\\n\\n\x3c!--truncate--\x3e\\n\\n## Express and LoopBack Are Not Mutually Exclusive\\n\\nFirst off, let\'s make it clear that Express and LoopBack are not mutually exclusive. You can very well use an existing Express app or middleware with LoopBack. This capability enables gradual migration from Express to LoopBack, that way you don\'t have to throw away your existing code and re-write everything from scratch. \\n\\n<img class=\\"aligncenter size-full\\" src=\\"{{site.url}}/blog-assets/2020/05/express-loopback.png\\"/>\\n\\n### Extending an Existing Express Application With LoopBack\\n\\nTo use an existing Express app with LoopBack, you can mount the LoopBack app on your Express app.\\n\\nFor a tutorial on how to do that, refer to \\"[Creating an Express Application with LoopBack REST API](https://loopback.io/doc/en/lb4/express-with-lb4-rest-tutorial.html)\\".\\n\\n### Using Express Middleware With LoopBack\\n\\nLoopBack provides three broads ways for loading Express middleware.\\n\\n#### 1. mountExpressRouter()\\n\\nThe `mountExpressRouter()` method of the [RestApplication](https://loopback.io/doc/en/lb4/apidocs.rest.restapplication.html) and [RestServer](https://loopback.io/doc/en/lb4/apidocs.rest.restserver.html) class mounts an express router or application at a path, and supports OpenAPI specification for describing the endpoints provided by the router. It is the preferred choice for mounting data endpoints, like an existing REST API app.\\n\\nFor more details refer to \\"[Mounting an Express Router](https://loopback.io/doc/en/lb4/Routes.html#mounting-an-express-router)\\".\\n\\n#### 2. invokeMiddleware()\\n\\nExpress middleware can also be plugged into the [Sequence](https://loopback.io/doc/en/lb4/Sequence.html) class using the `invokeMiddleware()` action. This approach is recommended when you are not looking beyond a hard-coded list of middleware, when it comes to flexibility and configurability.\\n\\nRefer to \\"[Use Express middleware within the sequence of actions](https://loopback.io/doc/en/lb4/Express-middleware.html#use-express-middleware-within-the-sequence-of-actions)\\" for more details.\\n\\n#### 3. Middleware as Interceptors\\n\\nExpress middleware can act as interceptors to controller methods at global, class, or method levels. It is not as simple as the previous two methods, but it provides the most configurability.\\n\\nThe following helper methods from the `@loopback/express` package enable Express middleware to be wrapped into LoopBack interceptors.\\n\\n- `toInterceptor` - Wraps an Express handler function to a LoopBack interceptor function\\n- `createInterceptor` - Creates a LoopBack interceptor function from an Express factory function with configuration\\n- `defineInterceptorProvider` - Creates a LoopBack provider class for interceptors from an Express factory function with configuration. This is only necessary that injection and/or change of configuration is needed. The provider class then needs to be bound to the application context hierarchy as a global or local interceptor.\\n\\nRefer to \\"[Middleware](https://loopback.io/doc/en/lb4/Middleware.html)\\" and \\"[Use Express middleware as interceptors for controllers](https://loopback.io/doc/en/lb4/Express-middleware.html#use-express-middleware-as-interceptors-for-controllers)\\" for more information.\\n\\n## What Does LoopBack Offer on Top of Express?\\n\\nExpress is a very extensible but bare-bones web server implementation. What LoopBack offers on top of Express is a set of tools and capabilities that make rapid API and microservices development possible and maintenance easy. REST API and microservices development with Express is possible but after a certain level of complexity, it can become a bug-ridden repetitive exercise for each new project. Using a REST API framework like LoopBack cuts down the development time and reduces maitenance headache.\\n\\nHere are some of the points that makes LoopBack an excellent API development framework for Express developers.\\n\\n### 1. REST API Specialist\\n\\nLoopBack is specially crafted for REST API development. The framework\'s architecture, developer experience, and everything around it are designed primarily with REST API on mind.\\n\\n#### i. Model-View-Controller (MVC) Pattern\\n\\n[MVC](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) is a popular software design pattern that seprates the internal representation of data, implementation of access to this data, and what is presented to the client. This enables clear decoupling of the components that make up the application, which in turn leads to fewer bugs and better management of the development process.\\n\\nLoopBack implements the MVC pattern. The models are defined in model files, controllers provide the REST API interface, and views are JSON objects returned by the controller. This not only allows modular development of the project, but also prevents the codebase from getting messy and unmanageable as the project grows.\\n\\n#### ii. Repository Pattern\\n\\n[Repository pattern](https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design#the-repository-pattern) is an abstraction for data access logic. It is a great way to decouple data access details from models.\\n\\nIn LoopBack, model files define only the shape and properties of models, connection and queries are handled by repositories which are bound to the models.\\n\\n#### iii. OpenAPI\\n\\nLoopBack uses [OpenAPI specification](http://spec.openapis.org/oas/v3.0.3) for describing the data request and response formats. This highly descriptive standard specification greatly reduces the friction involved in the structural aspect of API development and consumption.\\n\\nLoopBack exposes an OpenAPI specification file created out of the controllers in the app, which is essentially the documentation of the whole REST API of the app.\\n\\n#### iv. CRUD\\n\\nWith a [datasource](https://loopback.io/doc/en/lb4/DataSources.html) defined and configured, once a model and its corresponding repository and controller are created, a [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) functionality is automatically available for the model without any additional work.\\n\\nThe auto-generated functionality and implementation can be modified by editing the controller and/or the respository files of the model.\\n\\n#### v. Support for Numerous Databases\\n\\nConfiguring database connectivity and executing queries is one of the most crucial tasks when developing APIs. With the numerous database options available, writing optimal queries, and maybe even switching to a different database altogether can become a very tedious and time-consuming task.\\n\\nLoopBack provides an abstraction for database access using [datasources](https://loopback.io/doc/en/lb4/DataSources.html). All you have to do is select the database you want to use for your app and provide the connectivity details. LoopBack then takes care of making the connection and running the queries in the context of a REST API implementation.\\n\\nAny time you want to switch to a different database, it is just a matter to speciying a new datasource. You don\'t have to worry about re-writing the queries, LoopBack takes care of it for you.\\n\\nThe following datasources are supported by LoopBack: In-memory db, In-memory key-value, IBM Object Storage, IBM Db2 (for Linux, Unix, Windows), IBM Db2 for i, IBM Db2 for z/OS, IBM DashDB, IBM MQ Light, IBM Cloudant DB, Couchdb 2.x, IBM WebSphere eXtreme Scale key-value, Cassandra, gRPC, Redis, MongoDB, MySQL, PostgreSQL, OracleDB, Microsoft SQL, and z/OS Connect Enterprise Edition.\\n\\nNon-database datasources supported by LoopBack includes: OpenAPI, REST services, SOAP webservices, Email, and ElasticSearch.\\n\\nCommunity supported datasources includes: Couchbase, Neo4j, Twilio, Kafka, and SAP HANA.\\n\\nThis wide of array of datasources covers almost all the popular databases used for REST API development, which significantly reduces the development time and effort in the database department.\\n\\n#### vi. Integration Capabilities With External APIs\\n\\nApart from using the non-database datasources provided by LoopBack, you can create your own [services](https://loopback.io/doc/en/lb4/Services.html) for connecting to external REST/SOAP/gRPC APIs.\\n\\nThese services can then be used in the controllers, effectively creating an OpenAPI-compliant proxy to those remote services. This usage scenario is perfect for proving a custom interface to an existing (legacy) API.\\n\\n<img class=\\"aligncenter size-full\\" src=\\"{{site.url}}/blog-assets/2020/05/req-res-high-level.png\\"/>\\n\\n### 2. Dependency Injection\\n\\nConventionally, dependencies are passed as function parameters. This method works fine if the dependency is used only in the invoked function, however it can get pretty complex and unwieldy in certain scenarios because the dependency parameter is a factor that prevents the caller and the called function from being [loosely coupled](https://en.wikipedia.org/wiki/Loose_coupling).\\n\\nImagine, a dependency is used within a function within a function within a function within a function. You will need to pass the dependency from the called function to the next function to the next function to the next function. Now imagine, the dependency has been changed to a different object in one or more places. You will now have to change it in the \\"top\\" function and all the places where it was being passed around. It is a mess.\\n\\nEnter [dependency injection](https://en.wikipedia.org/wiki/Dependency_injection) (DI). Dependency injection enables dependent code to inject the dependencies themselves, instead of relying on the caller function to pass the dependency in function arguments. That way, any time something changes, it never includes the caller. The caller and called functions are loosely coupled.\\n\\nLoopBack\'s [Context](https://loopback.io/doc/en/lb4/Context.html) object is a DI container. It makes it possible to inject dependencies in classes, properties, and methods without having to pass dependecies in constructor or method parameters.\\n\\nThe ability to use DI in your codebase can greatly improve the overall quality of code, increase development productivity, improve tests cases, and reduce maintenance costs.\\n\\n### 3. Extensibility\\n\\nLoopBack is designed to be highly extensible. It provides extensibility using different artifacts and patterns in different layers of the framework.\\n\\n#### i. Sequence\\n\\nThe LoopBack [Sequence](https://loopback.io/doc/en/lb4/Sequence.html) class contains the whole request-response handling infrastructure of the framework, therefore the `Sequence` is the perfect place for implementing functionality that requires access to the beginning and the end of the request-response cycle - like logging, authentication, etc.\\n\\nIt is very easy to modify the existing functionality or add new ones by implementing a custom [SequenceHandler](https://loopback.io/doc/en/lb4/apidocs.rest.sequencehandler.html) for your app\'s `Sequence`. The `Sequence` file is located at `src/sequence.ts`.\\n\\n#### ii. Components\\n\\n[Components](https://loopback.io/doc/en/lb4/Components.html) are great for grouping different but related artifacts for implementing a feature or functionality in the app.\\n\\nComponents can contribute the following artifacts to the app:\\n\\n- [Controllers](https://loopback.io/doc/en/lb4/Controllers.html)\\n- [Providers](https://loopback.io/doc/en/lb4/Services.html)\\n- [Classes](https://www.typescriptlang.org/docs/handbook/classes.html)\\n- [Servers](https://loopback.io/doc/en/lb4/Server.html)\\n- [Lifecycle observers](https://loopback.io/doc/en/lb4/Life-cycle.html)\\n- [Bindings](https://loopback.io/doc/en/lb4/Binding.html)\\n\\n#### iii. Extensions\\n\\n[Extension points and extensions](https://loopback.io/doc/en/lb4/Extension-point-and-extensions.html) are the interfaces for developing plugins for LoopBack apps. It is an excellent pattern for adding decoupled extensibility to a software system.\\n\\nLoopBack provides the following helper decorators and functions for implementating extension points and extensions on top of its [Inversion of Control](https://loopback.io/doc/en/lb4/Context.html) and [Dependency Injection](https://loopback.io/doc/en/lb4/Dependency-injection.html) container.\\n\\n- `@extensionPoint` - decorates a class to be an extension point with an optional custom name\\n- `@extensions` - injects a getter function to access extensions to the target extension point\\n- `@extensions.view` - injects a context view to access extensions to the target extension point. The view can be listened for context events.\\n- `@extensions.list` - injects an array of extensions to the target extension point. The list is fixed when the injection is done and it does not add or remove extensions afterward.\\n- `extensionFilter` - creates a binding filter function to find extensions for the named extension point\\n- `extensionFor` - creates a binding template function to set the binding to be an extension for the named extension point(s). It can accept one or more extension point names to contribute to given extension points\\n- `addExtension` - registers an extension class to the context for the named extension point\\n\\n#### iv. Life Cycle Observers\\n\\n[Life cycle observers](https://loopback.io/doc/en/lb4/Extension-life-cycle.html) are artifacts that can take part in the starting and stopping processes of the application. They can execute code as the app is starting (such as configuring something) or is shutting down (such as closing the connection to a server).\\n\\n#### v. Servers\\n\\nThe LoopBack REST API server is just one of the many possible server capabilities of LoopBack. LoopBack can start multiple [servers](https://loopback.io/doc/en/lb4/Creating-servers.html) together of similar or different implementations, making LoopBack an excellent microservices hub. You can use this to create your own implementations of REST, SOAP, gRPC, MQTT and more protocols. For an overview, see [Server](https://loopback.io/doc/en/lb4/Server.html).\\n\\n#### vi. Interceptors\\n\\nLoopBack supports [Interceptors](https://loopback.io/doc/en/lb4/Interceptors.html). They are reusable functions to provide [aspect-oriented](https://en.wikipedia.org/wiki/Aspect-oriented_programming) logic around method invocations. There are many use cases for interceptors, such as:\\n\\na. Add extra logic before / after method invocation, for example, logging or measuring method invocations.\\nb. Validate/transform arguments\\nc. Validate/transform return values\\nd. Catch/transform errors, for example, normalize error objects\\ne. Override the method invocation, for example, return from cache\\n\\nFor more details about extensibility in LoopBack, refer to \\"[Extending LoopBack 4](https://loopback.io/doc/en/lb4/Extending-LoopBack-4.html)\\".\\n\\n### 4. Authentication and Authorization\\n\\nAuthentication and authorization form the basis of securing and controlling access to protected resources, and is a requirement for any app that deals with protected data. Authentication is responsible for verifying the user\'s identity before allowing access to a protected resource. Authorization is responsible for deciding if a user can perform a certain action on a protected resource or not.\\n\\nLoopBack comes with an [authentication component](https://loopback.io/doc/en/lb4/apidocs.authentication.html), which enables developers to plug in different authentication strategies (custom and standard) to the app. It also supports all the [Passport](http://www.passportjs.org/) authentication strategies.\\n\\nYou can read more about authentication in LoopBack in the [authentication doc](https://loopback.io/doc/en/lb4/Loopback-component-authentication.html).\\n\\nLoopBack\'s [authorization component](https://loopback.io/doc/en/lb4/apidocs.authorization.html) is a highly configurable authorization system, which allows you to write your own authorization rules or use an existing one.\\n\\nAll the details about authorization in LoopBack can be found in the [authorization doc](https://loopback.io/doc/en/lb4/Loopback-component-authorization.html).\\n\\n### 5. Great command-line Tools\\n\\nDatasources, models, controllers, repositories are great for modularizing the app, but manually creating the files and writing repetitive code with minimal differences for each new entity would be a tedious time-consuming activity.\\n\\nLoopBack comes with a utility command-line tool, [lb4](https://www.npmjs.com/package/@loopback/cli). It has commands for generating datasources, models, controllers, repositories, and other LoopBack artifacts so that you don\'t have to create them manually.\\n\\nGiven a datasource, the `discover` command can generate models files from the database. This can be a great time saver if you are using an existing database of your LoopBack app, and especially if the database had a lot of tables with many columns (or their equivalent structures). If an OpenAPI specification is provided, the `openapi` command will not only create the model files, it will also create the controller files. This can save even more time.\\n\\nRefer to the [documentation](https://loopback.io/doc/en/lb4/Command-line-interface.html) for all the details about the `lb4` command.\\n\\n### 6. TypeScript Support\\n\\nLoopBack is a [TypeScript](https://www.typescriptlang.org/) framework. TypeScript is a typed superset of JavaScript.\\n\\nAlthough not directly a LoopBack feature, using a typed language for development prevents many bugs and steers developers towards using optimized coding practices. This can make a significant difference in the development and maintenance efforts when compared to using plain JavaScript.\\n\\n### 7. The IBM Confidence\\n\\nLoopBack is an open source project backed by IBM, used by IBM products and customers. Hopefully, this gives you assurance on the quality and the longevity of this framework.\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"april-2020-milestone","metadata":{"permalink":"/april-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-05-06-april-milestone.md","source":"@site/blog/2020/2020-05-06-april-milestone.md","title":"LoopBack 4 April 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-05-06T00:00:00.000Z","formattedDate":"May 6, 2020","tags":[{"label":"Milestone update","permalink":"/tags/milestone-update"}],"readingTime":7.915,"truncated":true,"authors":[{"name":"Deepak Rajamohan","title":"LoopBack Maintainer","url":"https://github.com/deepakrkris","imageURL":"https://avatars0.githubusercontent.com/u/7688315","key":"deepakrkris"}],"frontMatter":{"title":"LoopBack 4 April 2020 Milestone Update","date":"2020-05-06T00:00:00.000Z","authors":"deepakrkris","slug":"april-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack - Taking Express to the Next Level","permalink":"/express-to-loopback"},"nextItem":{"title":"Community Q&A Monthly Digest - April 2020","permalink":"/2020-april-slack-qa"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nIn April, we focused mostly on completing migration activities, like the migration guide and other related\\ntasks like running existing tests in a LoopBack 3 application after composing it within a LoopBack 4 application. But, that didn\'t stop us from exploring and adding some cool features.\\n\\nWe now have a new [Express](https://github.com/strongloop/loopback-next/tree/master/packages/express) package, which enables modeling Express middleware functions as an interceptor chain. Also it is possible now to break a complex application into much smaller components and wire them in a main application. You can find more details on thsese below in [`Exploring new territories`](#exploring-new-territories).\\n\\nAlso our community has published many [LoopBack 4 extensions in NPM](https://www.npmjs.com/search?q=keywords:loopback-extension). Many of these extensions are addressing a variety of usecases like pub-sub messaging, mqtt, graphql, rate-limiting, authentication, logging, AWS cloud integration, etc. The extensibility of LoopBack in real time use cases are even surprising us and the possibilities seems to be endless.\\n\\n- [Migration Guide](#migration-guide)\\n- [Exploring new territories](#exploring-new-territories)\\n- [APIConnect Extension](#apiconnect-extension)\\n- [Miscellaneous](#miscellaneous)\\n- [Documentation](#documentation)\\n- [Community Contributions](#community-contributions)\\n\\n\x3c!--truncate--\x3e\\n\\n## Migration Guide\\n\\nWe have made very good progress with migration guides and LoopBack 3 users should have a solid ground now to explore and migrate to LoopBack 4. The well used LoopBack 3 components are all covered with migrations examples and tutorials. There are certain components which are having fewer downloads per day, that are not covered yet. But we are pursuing steadily to address all migration questions.\\n\\n### Differences in Request-Response Cycle\\n\\nWe have created a document describing the differences between the [request-response cycle](https://loopback.io/doc/en/lb4/LB3-vs-LB4-request-response-cycle.html) in LoopBack 3 and LoopBack 4. Those of you coming from LoopBack 3 will have a better understanding about how the request-response cycle works in LoopBack 4 compared to LoopBack 3.\\n\\nThe [LoopBack 4 request-response cycle documentation](https://loopback.io/doc/doc/en/lb4/Request-response-cycle.html) contains the details in more depth for LoopBack 4.\\n\\n### Example to use Passport Strategies for Authentication in LoopBack 4\\n\\nA new [Passport Login example](https://github.com/strongloop/loopback-next/tree/master/examples/passport-login) is now available. It shows how to use [Passport Strategies](http://www.passportjs.org/docs/) in LoopBack 4 as an independent authentication step in the application `Sequence` as well as standard express middleware. If you are using the loopback-component-passport in LoopBack 3, this example can help you migrate your application to LoopBack 4.\\n\\n### Booting Migration Guide\\n\\nBecause of the architectural differences, the booting process is very different in LoopBack 3 and LoopBack 4. [This document](https://loopback.io/doc/en/lb4/LB3-vs-LB4-booting.html) describes the differences and lists the various artifacts that take part in the booting process in LoopBack 4.\\n\\n### Custom Validation\\n\\nThe [data coercion and validation](https://loopback.io/doc/en/lb4/LB3-vs-LB4-request-response-cycle.html#data-coercion-and-validation) and [access to data before writing to the databases](https://loopback.io/doc/en/lb4/LB3-vs-LB4-request-response-cycle.html#access-to-data-before-writing-to-the-databases) sections of the [LB3 to LB4 request-response migration guide](https://loopback.io/doc/en/lb4/LB3-vs-LB4-request-response-cycle.html) deals with the topic of access and application of custom validation to data in Loopback 4.\\n\\n### Differences between LB3 and LB 4 CLI Commands\\n\\nThe command line interfaces of LoopBack 3 and LoopBack 4 have some similarities, but also some differences. We have outlined these similarities and differences in [Migrating CLI usage patterns](https://loopback.io/doc/en/lb4/migration-cli.html).\\n\\n## Exploring New Territories\\n\\n### The NEW Express Package and Enabling Express Middleware as Interceptors\\n\\nThe new [Express Package](https://github.com/strongloop/loopback-next/tree/master/packages/express), has enabled injecting single and multiple express middleware functions as `interceptors` into `Controller` invocations and also as a middleware step in the application `Sequence` as follows:\\n\\nThe default sequence now has a Middleware step. It creates an invocation chain to call registered middleware handlers with the extension pattern. The sequence can be customized to have more than one Middleware step. Express middleware can also be wrapped as LB4 interceptors, which can in turn be added to global/class/method level. Move built-in cors and openapi endpoints as express middleware functions.\\n\\nYou can check the [express middleware page in loopback docs](https://loopback.io/doc/en/lb4/Express-middleware.html).\\n\\n### Spike - Migrating OAuth2 Component\\n\\nIn story [#3959](https://github.com/strongloop/loopback-next/issues/3959) we explored the possibility and evaluated the required effort to migrate module [`loopback-component-oauth2`](https://github.com/strongloop/loopback-component-oauth2). Considering that LoopBack 4 currently focuses on the integration with third party OAuth 2.0 providers, and the module is complicated, we decide to defer the migration guide and demo a simplified server with OAuth 2.0 enabled on it.\\n\\nYou can find details about the mock server on page [migration-auth-oauth2](https://loopback.io/doc/en/lb4/migration-auth-oauth2.html).\\n\\n### Running LoopBack 3 Tests when Mounted on a LoopBack 4 project\\n\\nWith users being able to [mount their LoopBack 3 tests on a LoopBack 4 project](https://loopback.io/doc/en/lb4/migration-mounting-lb3app.html), we explored how they can also migrate their LB3 tests onto the LB4 project. Documentation is [coming](https://github.com/strongloop/loopback-next/issues/5298), but if you want to see how an example of how to do it now, see the [spike](https://github.com/strongloop/loopback-next/pull/5251). The spike demonstrates running LB3 tests in the [`lb3-application` example](https://github.com/strongloop/loopback-next/tree/master/examples/lb3-application).\\n\\n### Simplify your Complex Applications - Booting Component Applications\\n\\nUsers can now break down a complex application into much smaller components and wire them all together in a main application, with a new feature to [Boot up Component Applications](https://github.com/strongloop/loopback-next/pull/5304).\\n\\n## APIConnect Extension\\n\\nThe [LoopBack APIConnect extension](https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect) is now tested by [publishing shopping app APIs, enhanced with the extension, on a IBM DataPower Gateway](https://github.com/strongloop/loopback-next/issues/4498).\\n\\nWe took the shopping example for a close-to-real-life scenario. This would help IBM APIConnect customers to develop their applications with LoopBack and manage them with IBM APIConnect.\\n\\nOnce LoopBack developers have their REST APIs created they could use the [LoopBack APIConnect extension](https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect) to enhance their OpenAPI spec with `x-ibm-` OpenAPI metadata. For the shopping example, we followed the [steps in the example repository](https://github.com/strongloop/loopback4-example-shopping/blob/master/kubernetes/docs/deploy-to-ibmcloud.md) to deploy to IBM Cloud and then imported the OpenAPI specification to APIConnect with [steps explained in the IBM developer portal](https://developer.ibm.com/apiconnect/2019/10/30/manage-and-enforce-openapi-v3-oai-v3/).\\n\\n## Miscellaneous\\n\\n### Extracting JWT Authentication to an Extension Module\\n\\nAfter creating the demo for JWT authentication in [`loopback4-shopping-example`](https://github.com/strongloop/loopback4-example-shopping), and applied a similar auth system in [`access-control-migration`](https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration), we think it\'s time to extract the JWT authentication system into a separate extension package, so that people can quickly mount a component to try out the feature. \\n\\nLast month, we created the extension as [authentication-jwt](https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt), and its usage is well documented in the [README.md file](https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-jwt).\\n\\n### Strong-Soap Features and Support\\n\\nStrong-Soap now supports validation of [anonymous simple types](https://github.com/strongloop/strong-soap/pull/275) and [RPC suffixes](https://github.com/strongloop/strong-soap/pull/271).\\n\\n### Customizing Explorer Theme\\n\\nAs many community users show the interests in changing the look of explorer, we introduced a configuration property called `swaggerThemeFile` to specify user provided .css themes. For example:\\n\\n```ts\\n// Inside application constructor\\n// customize the swagger-ui\\nthis.configure(RestExplorerBindings.COMPONENT).to({\\n  swaggerThemeFile: \'/theme-newspaper.css\',\\n});\\n```\\n\\nYou can check the complete guide in section [customizing Swagger UI theme](https://github.com/strongloop/loopback-next/blob/956a6aa574995c6cdd5066f6af7b92a93382eefc/packages/rest-explorer/README.md#customizing-swagger-ui-theme).\\n\\n### Move Datasource Configurations from .json to .ts File\\n\\nTo align with existing typescript files and dynamic configuration of datasources, we have [switched datasource configurations to .ts files](https://github.com/strongloop/loopback-next/pull/5000) from LoopBack 3 style json files. Please watch the [video tutorial](https://www.youtube.com/watch?v=S3BKXh7wDYE&feature=youtu.be) from Miroslav on migrating `Migrate LoopBack 4 datasource config to TypeScript`.\\n\\n### Build with TS Project-References\\n\\nLoopBack monorepo was configured in a hacky way to allow TypeScript to build individual packages. We have made [changes to leverage TypeScript\'s Project-References](https://github.com/strongloop/loopback-next/pull/5155). Project references are a new feature in TypeScript 3.0 that allow to structure TypeScript projects into smaller pieces.\\n\\n### Other Build Features\\n\\nChanges done to make [default compilation target as ES2018](https://github.com/strongloop/loopback-next/pull/5205) and enable all ES2020 features for `lib` configuration.\\n\\n### Complex OpenAPI Validations\\n\\nA list of AJV features have been added in the past few months including [AJV keywords](https://github.com/strongloop/loopback-next/pull/3539), [AJV extensibility](https://github.com/strongloop/loopback-next/pull/4979), [AJV service provider](https://github.com/strongloop/loopback-next/pull/4808) and [asynchronous validations](https://github.com/strongloop/loopback-next/pull/4762).\\n\\n## Documentation\\n\\n### Working with Data\\n\\nIn LoopBack 4, models describe the shape of data, repositories provide behavior like CRUD operations, and controllers define routes. It\'s easy to manipulate and query data with LB4. However, for a long time LoopBack 4 documentation was missing the _Woring with Data_ section and users were referencing the old docs in LoopBack 3. Even though LB3 has almost the same querying rules as LB4, the different styles between LB4 and LB3 sometimes are still causing confusion.\\n\\nGladly, we added that section with different filters under the page [Usage Scenarios - Working with Data](https://loopback.io/doc/en/lb4/Working-with-data.html). For each filter, we introduced the basic usage with Node.js and REST APIs and also show examples of using both APIs. For instance, we have an example of showing how the `limit` filter works with Node.js API and also the corresponding example of using REST. \\n\\n```\\nNode.js API:\\n\\nawait orderRepository.find({limit: 5});\\n\\nREST:\\n\\n/orders?filter[limit]=5\\n```\\n\\n### Calling APIs with OpenAPI Specification\\n\\nIf you want to connect to a REST service with an OpenAPI description, the [OpenAPI connector](https://github.com/strongloop/loopback-connector-openapi) would be what you need. We updated the documentation in the [Calling other APIs and web services\\n](https://loopback.io/doc/en/lb4/Calling-other-APIs-and-web-services.html) to include this usage. Besides, we added more configuration details in the [OpenAPI connector docs page](https://loopback.io/doc/en/lb4/OpenAPI-connector.html).\\n\\n## Community Contributions\\n\\n### Added tsdocs for LoopBack Packages\\n\\nAutogenerated API docs had descriptions empty for all packages which now fixed by [adding ts docs to all packages](https://github.com/strongloop/loopback-next/pull/4711). Please take a look at the [API docs](https://loopback.io/doc/en/lb4/apidocs.index.html) to see the difference.\\n\\n### Consolidate Openapi Schema using a New Spec Enhancer\\n\\nLoopBack users will be able to automatically extract schemas used in multiple places into `#/components/schemas` and replace the references with a `$ref`, with a [new OAS enhancer](https://github.com/strongloop/loopback-next/pull/4365).\\n\\n## May Milestones\\n\\nThis month, we would like to work on the remaining items for the migration guide epic, documentation improvement and more. For more detials, take a look at our [May milestone list on GitHub](https://github.com/strongloop/loopback-next/issues/5301).\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"2020-april-slack-qa","metadata":{"permalink":"/2020-april-slack-qa","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-04-27-april-slack-qa.md","source":"@site/blog/2020/2020-04-27-april-slack-qa.md","title":"Community Q&A Monthly Digest - April 2020","description":"Originally published on strongloop.com","date":"2020-04-29T00:00:00.000Z","formattedDate":"April 29, 2020","tags":[{"label":"Community","permalink":"/tags/community"},{"label":"Slack","permalink":"/tags/slack"},{"label":"Q&A","permalink":"/tags/q-a"}],"readingTime":5.87,"truncated":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"Community Q&A Monthly Digest - April 2020","date":"2020-04-29T00:00:00.000Z","authors":"dhmlau","slug":"2020-april-slack-qa","tags":["Community","Slack","Q&A"]},"prevItem":{"title":"LoopBack 4 April 2020 Milestone Update","permalink":"/april-2020-milestone"},"nextItem":{"title":"Build REST APIs for CRUD operations from a model without coding","permalink":"/model-to-rest-api-feature"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nIn the past, we\'ve explored a few options on providing a forum for our users to help each other: [Google group](https://groups.google.com/forum/#!forum/loopbackjs), [Gitter](https://gitter.im/strongloop/loopback) and GitHub. We are pleased to announce that the LoopBack Slack workspace, [https://loopbackio.slack.com/](https://loopbackio.slack.com/), is available for our users to join. Since Slack is quite commonly used, we thought it would be a good time for us to modernize our tooling for the LoopBack community helping out each other out. Also, the LoopBack core team uses Slack on a daily basis; it is helpful because it allows us to get notifications and communicate efficiently.\\n\\nThere have been lots of great questions and answers. We thought it would be helpful to curate some of the discussions here. Thanks again for submitting the questions and answers! \\n\\n\x3c!--truncate--\x3e\\n\\n**Question: I am trying to find a working implementation for TimeStamp Mixin to have time stamp automatic fields in the database. In the older version of LoopBack, I was capable to create a BaseEntity and BaseRepository and to extend them but now it is not working anymore. If I extend in the same way the controllers are not working anymore. The current example in the docs is based on adding the mixin to the Controller which I like much less. Any suggestions? Thanks.**\\n\\n**Answer:** For specifying the creation timestamp, you can use the `default` property for the `@property` decorator in your model. Something like:\\n```ts\\n  @property({\\n    type: \'date\',\\n    default: () => new Date(),\\n  })\\n  createDate: string;\\n```\\nYou can also use [Moment.js](https://momentjs.com/) to format the timestamp. \\n\\nUpdating updatedAt field should be possible via 2 ways:\\n1. Via controller\\n    When a controller function is invoked, the current timestamp could be taken and then injected into the original request query before being passed into the repository function.\\n    You can also write your own base class (without the `@model` decorator) and then extend it where necessary.\\n2. Via datasource\\n    It is possible to add a new function to the datasource which can mutate the query object and then pass it on.\\n\\n---\\n**Question: Kinda new to loopback, I want to learn more about decorators and how to custom loopback logic for more advanced usages, can you walk me through the process of creating custom decorators to create my own \\"hook\\" around a controller?**\\n\\n**Answer:** A great starting point would be the [Extending LoopBack 4](https://loopback.io/doc/en/lb4/Extending-LoopBack-4.html) docs.\\n\\nThese concepts are the building blocks of LB4. They serve a specific purpose while following the OOP paradigm.\\nIt may look like a lot, but these are essentially the different extension points in LoopBack 4 (hence why LB4 is extremely extensible).\\nLet\'s see if we can break it down:\\n\\n**Decorators (in general)**\\nThe decorators in LB4 are no different to the standard decorators in TypeScript. They add metadata to classes, methods. properties, or parameters. They don\'t actually add any functionality, only metadata.\\nThink of it like the file properties on your file system: It\'s not visible when interacting with the file normally, but those who want to access those properties will be able to via a standard interface.\\nThere\'s more benefits to Decorators, but the above explanation is the watered-down gist of it.\\n\\n**Sequence (in general)**\\nSequences are a group of Actions. It simply indicates which actions should be used by the server to process the request.\\n\\n**Sequence Actions (in general)**\\nSequence Actions (or simply \\"Actions\\") are stateless, meaning that they only have the basic concept Elements.\\nConverting into Express.js terminology; Think of an Action as an middleware. And think of an Element as the contents that a middleware receives. They work differently, but the high-level idea is about the same.\\nThey are unaware of other higher-level concepts such as Controllers, DataSource, Models, etc.\\n\\n**Components (in general)**\\nWhen adding functionality to LB4, you\'ll usually need to add a combination of Providers, Booters, etc. This can tedious to manage. Hence, Components are registered once in the LB4 Application, which will then register the other stuff for you.\\n**@authenticate**\\nAdds authentication metadata.\\n\\n**AuthenticationComponent**\\nA component to register the necessary artifacts.\\n\\n**AuthenticationActionProvider**\\nThis is a Sequence Action. Essentially, it adds an \\"authentication\\" step to the Sequence.\\n\\n**AuthenticationStrategyProvider**\\nThis is a standard interface that the @loopback/authentiation package understands. Hence, any authentication strategy that adopts this interface can be used in @loopback/authentication. Think of it like the standard interface for Passport.js uses to interface with many different authentication strategies\\n\\n---\\n**Question: I have experience with other ActiveRecord implementations. If I was able to utilize TypeORM, this would be more straightforward. You mentioned TypeORM is coming soon as an option for LoopBack 4?**\\n\\n**Answer:** You can track progress of a proof of concept here: [https://github.com/strongloop/loopback-next/pull/4794](https://github.com/strongloop/loopback-next/pull/4794)\\nLoopback 4 has been designed to allow flexibility so you can for example use TypeORM if you prefer.\\n\\n**Question: I am using mysql connector,  I have generated models using LB4 model, But when I migrate the models from loopback to database using `npm run migrate`. The foreign key constraints were missing in database. I have many.model.ts files. How to have foreign key in database with npm run migrate.**\\n\\n**Answer:** AFAIK, you\u2019ll need to add some settings in the `@model` decorator on the FK configuration so that npm run migrate can pick up.\\nI\u2019ve tried that for postgresql using [this snippet](https://github.com/dhmlau/loopback4-coffeeshop/blob/master/src/models/review.model.ts#L4-L15).  Hope it works for you for mysql as well.\\n\\nThere is an GitHub issue tracking the work to add constraints in db migration: [https://github.com/strongloop/loopback-next/issues/2332](https://github.com/strongloop/loopback-next/issues/2332).\\n\\n---\\n**Question: Can anyone point me in the right direction on how to do loggig in LB4?**\\n\\n**Answer:** You have lots of options.  If you want to do it inside of the context of the loopback application, with IoC binding, you can create a singleton service provider that returns the log utility of your choice.  For example, with winston:\\n```ts\\n// services/logger.service.ts\\nimport { bind, BindingScope, Provider } from \'@loopback/core\';\\nimport * as winston from \'winston\';\\nimport * as Transport from \'winston-transport\';\\n@bind({ scope: BindingScope.SINGLETON })\\nexport class LogService implements Provider<winston.Logger> {\\n  logger: winston.Logger;\\n  constructor() {}\\n  value() {\\n    if (!this.logger) {\\n      const transports: Transport[] = [];\\n      transports.push(\\n        new winston.transports.File({\\n          handleExceptions: true,\\n          format:winston.format.json(),\\n          filename: \'/path/t\'\\n        }),\\n      );\\n      this.logger = winston.createLogger({\\n        transports,\\n        exitOnError: false,\\n      });\\n    }\\n    return this.logger;\\n  }\\n}\\n```\\n\\n**application.ts**\\n```ts\\n// in constructor\\nthis.bind(\'loggingKey\').toProvider(Logger).inScope(BindingScope.SINGLETON);\\n```\\n\\n**controller.ts (also applies for service.ts and others)**\\n```ts\\nexport class HelloWorldController {\\n  @get(\'/hello-world\')\\n  public async getHelloWorld(\\n    @inject(\'loggingKey\') logger: winston.Logger\\n  ) {\\n    logger.info(\'logging to a file!\');\\n    return \'Hello World\';\\n  }\\n}\\n```\\n\\nWith binding and injection, you can do some pretty cool stuff, like this extension that gives you a `@log(LOG_LEVEL.INFO)` decorator that can be used to time a request:\\n[https://github.com/strongloop/loopback-next/tree/master/examples/log-extension](https://github.com/strongloop/loopback-next/tree/master/examples/log-extension)\\n\\nThere\'s also the old school nodejs way of just importing a file that exports a log utility, all set up in the global scope. I believe most tutorials for utilities like winston start with that :)\\n\\n--- \\n**Question: Are there any solution to see the errors of model in the response of the request?**\\n\\n**Answer:** See [https://loopback.io/doc/en/lb4/Sequence.html#handling-errors](https://loopback.io/doc/en/lb4/Sequence.html#handling-errors) for reference.\\n\\n--- \\n\\n## Interested to Join our Slack Workspace?\\nSimply click [this invitation link](https://join.slack.com/t/loopbackio/shared_invite/zt-8lbow73r-SKAKz61Vdao~_rGf91pcsw) to join. You can also find more channel details here: https://github.com/strongloop/loopback-next/issues/5048."},{"id":"model-to-rest-api-feature","metadata":{"permalink":"/model-to-rest-api-feature","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-04-22-model-to-rest-api.md","source":"@site/blog/2020/2020-04-22-model-to-rest-api.md","title":"Build REST APIs for CRUD operations from a model without coding","description":"Originally published on strongloop.com","date":"2020-04-22T00:00:00.000Z","formattedDate":"April 22, 2020","tags":[{"label":"feature","permalink":"/tags/feature"},{"label":"REST","permalink":"/tags/rest"}],"readingTime":2.765,"truncated":true,"authors":[{"name":"Nora Abdelgadir","title":"LoopBack Maintainer","url":"https://github.com/nabdelgadir","imageURL":"https://avatars0.githubusercontent.com/u/42985749","key":"nabdelgadir"}],"frontMatter":{"title":"Build REST APIs for CRUD operations from a model without coding","date":"2020-04-22T00:00:00.000Z","authors":"nabdelgadir","slug":"model-to-rest-api-feature","tags":["feature","REST"]},"prevItem":{"title":"Community Q&A Monthly Digest - April 2020","permalink":"/2020-april-slack-qa"},"nextItem":{"title":"LoopBack 4 2020 Q1 Overview","permalink":"/loopback-4-2020-q1-overview"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nAs LoopBack 3 is expected to reach its EOL by the end of this year, we have been working hard to achieve feature parity between LoopBack 3 and LoopBack 4. One feature of LoopBack 3 that we did not have in LoopBack 4 yet was the ability to go directly from only a model definition and model configuration to fully-featured CRUD REST API. Unlike LoopBack 3, LoopBack 4 relied on intermediate repository and controller classes in order to go from a model defintion class to use REST API. One thing that LoopBack 4 strives to do is make common tasks as easy as possible, while allowing advanced composition with loosely-coupled artifacts. So, after completing tasks from the related [epic](https://github.com/strongloop/loopback-next/issues/2036), we are now proud to announce that LoopBack 4 now offers support for going from a model definition to REST API with no custom repository or controller classes. \\n\\n\x3c!--truncate--\x3e\\n\\nIn LoopBack 4, the [model definition](https://loopback.io/doc/en/lb4/Model.html) provides the schema and the [datasource](https://loopback.io/doc/en/lb4/DataSources.html) configures how to access the database. Starting with these two artifacts, the user can directly expose REST API by using the following CLI command:\\n\\n```sh\\nlb4 rest-crud\\n```\\n\\nFor example, if you have a model `Product` and datasource `db`, you can use the command as follows:\\n\\n```sh\\nlb4 rest-crud --model Product --datasource db\\n```\\n\\nThe command can also take in multiple models at the same time. You can find more information on how to use the command in the [REST CRUD generator documentation](https://loopback.io/doc/en/lb4/Rest-Crud-generator.html).\\n\\nWhat the command does is it creates a configuration file describing properties of the REST API:\\n\\n`/src/model-endpoints/product.rest-config.ts`\\n\\n```ts\\nimport {ModelCrudRestApiConfig} from \'@loopback/rest-crud\';\\nimport {Product} from \'../models\';\\n\\nmodule.exports = <ModelCrudRestApiConfig>{\\n    model: Product, // name of the model\\n    pattern: \'CrudRest\', // make sure to use this pattern\\n    dataSource: \'db\', // name of the datasource\\n    basePath: \'/products\',\\n};\\n```\\n\\nThen it adds `CrudRestComponent` from `@loopback/rest-crud` to the application:\\n\\n`src/application.ts`\\n\\n```ts\\nimport {CrudRestComponent} from \'@loopback/rest-crud\';\\n```\\n\\n```ts\\nthis.component(CrudRestComponent);\\n```\\n\\nDocumentation for this feature can be found in [Creating CRUD REST APIs from a model](https://loopback.io/doc/en/lb4/Creating-crud-rest-apis.html). \\n\\n## Implementation\\n\\nWe implemented [`@loopback/rest-crud`](https://github.com/strongloop/loopback-next/tree/master/packages/rest-crud) based on the [`@loopback/model-api-builder`](https://github.com/strongloop/loopback-next/tree/master/packages/model-api-builder) package. This model API builder is what builds CRUD REST API from the model definition and datasource.\\n\\n## Example Application\\n\\nTo demonstrate this functionality with an example, we added a new example based on the [`Todo` example](https://github.com/strongloop/loopback-next/tree/master/examples/todo). [`@loopback/example-rest-crud`](https://github.com/strongloop/loopback-next/tree/master/examples/rest-crud) mimics the behavior of the `Todo` example, but does not include any custom repository or controller classes like the `Todo` example. To download this example, use the following command:\\n\\n```sh\\nlb4 example rest-crud\\n```\\n\\n## Future Work\\n\\nWhile the main epic is now complete, there are additional out of scope tasks that are part of future work. If you would like to contribute, please see the following issues:\\n\\n- [From relation definition to REST API with auto-generated repository/controller classes](https://github.com/strongloop/loopback-next/issues/2483)\\n- [KeyValueRestController extension](https://github.com/strongloop/loopback-next/issues/2737)\\n- [Expose custom remote methods](https://github.com/strongloop/loopback-next/issues/2482)\\n\\nThe LoopBack team appreciates all your contributions!\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"loopback-4-2020-q1-overview","metadata":{"permalink":"/loopback-4-2020-q1-overview","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-04-15-loopback-q1-overview.md","source":"@site/blog/2020/2020-04-15-loopback-q1-overview.md","title":"LoopBack 4 2020 Q1 Overview","description":"Originally published on strongloop.com","date":"2020-04-15T00:00:00.000Z","formattedDate":"April 15, 2020","tags":[{"label":"Quarterly update","permalink":"/tags/quarterly-update"}],"readingTime":6.26,"truncated":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"}],"frontMatter":{"title":"LoopBack 4 2020 Q1 Overview","date":"2020-04-15T00:00:00.000Z","authors":"dhmlau","slug":"loopback-4-2020-q1-overview","tags":["Quarterly update"]},"prevItem":{"title":"Build REST APIs for CRUD operations from a model without coding","permalink":"/model-to-rest-api-feature"},"nextItem":{"title":"LoopBack 4 March 2020 Milestone Update","permalink":"/march-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nThe past few weeks have been challenging for many of us. While this pandemic situation affected our lives in different ways, we hope you all stay safe.\\n\\nIn Q1, we continued to make good progress in the following areas:\\n\\n- [Migration guide](#migration-guide)\\n- [Migration Tooling and Examples](#migration-tooling-and-examples)\\n- [From Model Definitions to REST APIs](#from-model-definitions-to-rest-apis)\\n- [Newly added examples](#newly-added-examples)\\n- [Newly added extensions](#newly-added-extensions)\\n- [Enhancements in LoopBack core and OpenAPI areas](#enhancements-in-loopback-core-and-openapi-areas)\\n- [Rework of shopping example](#rework-of-shopping-example)\\n- [Refreshed look for LoopBack documentation](#refreshed-look-for-loopback-documentation)\\n\\nLet\'s take a closer look.\\n\x3c!--truncate--\x3e\\n\\n## Migration Guide\\n\\nBuilding the migration guide is one of the key focuses for us this year. We made good progress in completing the migration guide. Please check out our [migration guide](https://loopback.io/doc/en/lb4/migration-overview.html). LoopBack 3 is currently in maintenance LTS. Read [this blog](https://strongloop.com/strongblog/lb3-entered-maintenance-mode/) to find out what it means and how it affects you.\\n\\nIn LB3, it was possible to use mixins to enhance a model with a new property, a custom method, or a custom remote method. In LB4, this can be accomplished by using a mixin class factory function against model, repository, or controller classes.\\nWe added a [Migrating model mixins](https://loopback.io/doc/en/lb4/migration-models-mixins.html) page to demonstrate how to accomplish this.\\n\\nIn LB3, Operation hooks are useful tools that are triggered by all methods that execute a particular high-level CRUD operation. However, LB4 hasn\'t supported this feature yet. To help LB3 users to continue using the feature, we provide a workaround and explain how they can migrate LB3 operation hooks to LB4 repositories in page [Migrating operation hooks](https://loopback.io/doc/en/lb4/migration-models-operation-hooks.html).\\n\\nLB3 has the built-in User/AccessToken model based authentication. In LB4, we provide a more flexible authentication system. We explain how LB3 users can migrate it to LB4 with handy LB4 CLI tools. The content can be found in page [Migrating built-in authentication](https://loopback.io/doc/en/lb4/migration-authentication.html).\\n\\nIn addition, we added the [LB3 features not in-plan documentation page](https://loopback.io/doc/en/lb4/migration-not-planned.html) to clarify which LB3 features are not supported in LB4 or the workarounds for those features if users would like to continue using them in LB4. \\n\\n## Migration Tooling and Examples\\n\\nBesides documentation, we migrated the [LoopBack 3 access control example to LoopBack 4](https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration). In the [lb3-application example](https://github.com/strongloop/loopback-next/tree/master/examples/lb3-application), we added instructions on how to move the middleware from the LoopBack 3 application to a common location where both the LB3 and LB4 applications can use it.\\n\\nFor tooling that helps your migration process easier, the `lb4 import-lb3-models` command now supports migrating models inheriting from all other models, including LoopBack 3 built-in models.\\n\\n## From Model Definitions to REST APIs\\n\\nOne of the frequent inputs we got from users is that they would like to see fewer steps from creating the models to having runnable endpoints. We now have the [`rest-crud`](https://github.com/strongloop/loopback-next/tree/master/packages/rest-crud) package, the app booter, and the CLI command. You can see how to create a simple LoopBack 4 app with the [`lb4 rest-crud` CLI command](https://loopback.io/doc/en/lb4/Rest-Crud-generator.html).\\n\\nTo glue these pieces together and helper users to understand the feature, we added a page [Creating CRUD REST APIs](https://loopback.io/doc/en/lb4/Creating-crud-rest-apis.html). You can also run this [CRUD REST example](https://github.com/strongloop/loopback-next/tree/master/examples/rest-crud).\\n\\n## Integrate with IBM API Connect\\n\\nEarlier, we identified the work items required for the integration with [IBM API Connect](https://www.ibm.com/cloud/api-connect). When importing an OpenAPI spec generated by a LoopBack 4 application, there is additional metadata needs to be added. Instead of having our users to modify the OpenAPI spec manually, we introduced an [API Connect OpenAPI enhancer](https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect) to inject the `x-ibm-configuration` and other required attributes in the OpenAPI spec. \\n\\nAdditionally, we extracted and translated the messages for our CLI tooling.\\n\\n## Newly Added Examples\\n\\nWe continue to add examples which demonstrate commonly used scenarios. With the growing number of examples, we also categorized the [Example list](https://loopback.io/doc/en/lb4/Examples.html). Here are the newly added examples:\\n\\n- [access control migration example](https://github.com/strongloop/loopback-next/blob/master/examples/access-control-migration) to show how to migrate a LoopBack 3 application with access control to LoopBack 4.\\n\\n- [file transfer example](https://github.com/strongloop/loopback-next/tree/master/examples/file-transfer) for exposing APIs to upload and download files using Express Multer.\\n\\n- [validation example](https://github.com/strongloop/loopback-next/tree/master/examples/validation-app) for adding different kinds of validations in a LoopBack 4 application.\\n\\n- [rest-crud example](https://github.com/strongloop/loopback-next/tree/master/examples/rest-crud) for using `CrudRestComponent` to define repository and controller classes for a model without creating those classes\\n\\nIf there\'s any example you\'d like to see, feel free to open an issue in the [loopback-next repo](https://github.com/strongloop/loopback-next). Better yet, submit a PR and contribute! \\n\\n## Newly Added Extensions\\n\\nLoopBack 4 is designed to be extensible. We added three extensions in this quarter for various usages: \\n\\n- [@loopback/extension-logging](https://github.com/strongloop/loopback-next/blob/master/extensions/logging) provides logging facilities based on Winston and Fluentd.\\n\\n- [@loopback/apiconnect](https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect) is the IBM API Connect OpenAPI enhancer  extension extends LoopBack with the ability to integrate with [IBM API Connect](https://www.ibm.com/cloud/api-connect). \\n\\n- [@loopback/cron](https://github.com/strongloop/loopback-next/tree/master/extensions/cron) provides integration with [Cron](https://github.com/kelektiv/node-cron) so that applications can schedule jobs using `cron` based schedule.\\n\\n## IBM Db2 for i Connector\\n\\nThe [IBM Db2 for i connector](https://github.com/strongloop/loopback-connector-ibmi) was added to the connector list. You can now conveniently create a IBM Db2 for i datasource using our CLI. If you are starting a new project that connects to IBM Db2 for i, we recommend you to use this connector instead of `loopback-connector-db2iseries` connector.  You can find more details in the [Db2 for i connector page](https://loopback.io/doc/en/lb4/DB2-for-i-connector.html).\\n\\n## Enhancements in LoopBack core and OpenAPI areas\\n\\nIn this quarter, thanks to our community contributors, we had a number of important enhancements in the OpenAPI area. An `OASEnhancerService` was introduced which allows other enhancers to register and contribute OpenAPI specs into the application. This also provides the base for the [API Connect OpenAPI enhancer](https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect) mentioned above. On top of that, a few OpenAPI convenience decorators were added, for example, the `@deprecated()` decorator and the `@tags(tagNames: string [])` decorator for a class and method.\\n\\nFor the core of the framework, we have added the support hot-loading of controllers during application startup. Besides, the context and binding inspection APIs were improved with more options and information to print out their injections. More details can be found in the [February milestone blog](https://strongloop.com/strongblog/february-2020-milestone/).\\n\\n## Rework of Shopping Example\\n\\nThe most noticeable changes for [our shopping example](https://github.com/strongloop/loopback4-example-shopping) is the newly added frontend. There was some rework on the authentication and authorization side to make the app working from end to end.\\n\\n![Shopping example web site](https://raw.githubusercontent.com/strongloop/loopback4-example-shopping/master/shoppy.png)\\n\\n## Refreshed Look for LoopBack Web Site\\n\\nLast but not least, if you haven\'t noticed already, [our documentation site](https://loopback.io/doc/en/lb4/) has a refreshed look. Don\'t forget to check it out!\\n\\n![LoopBack documentation site](./images/new-docs-site.png)\\n\\nWith increasing number of user testimonials, we created a [separate page](https://loopback.io/what-our-users-say.html) for it. [Let us know](https://github.com/strongloop/loopback-next/issues/3047) if you would like to tell us about your LoopBack usage!\\n\\n## Previous Milestone Blogs\\n\\nThere are many more accomplishments that cannot be captured in this blog, make sure you check out our previously published monthly milestone blog posts in Q1 for more details:\\n- [Janurary 2020](https://strongloop.com/strongblog/january-2020-milestone/)\\n- [February 2020](https://strongloop.com/strongblog/february-2020-milestone/)\\n- [March 2020](https://strongloop.com/strongblog/march-2020-milestone/)\\n\\n## What\'s Next?\\n\\nWe have published a blog [LoopBack - 2020 Goals and Focus](https://strongloop.com/strongblog/2020-goals/) about our plans this year. Here is a summary of the [Q2 2020 roadmap](https://github.com/strongloop/loopback-next/blob/master/docs/ROADMAP.md#q2-2020-roadmap): \\n- finish migration guide for both general runtime and authentication & authorization\\n- continue with API Connect and LoopBack integration\\n- look into feature parity gaps that are highly requested by users\\n\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"march-2020-milestone","metadata":{"permalink":"/march-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-04-08-march-milestone.md","source":"@site/blog/2020/2020-04-08-march-milestone.md","title":"LoopBack 4 March 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-04-08T00:00:00.000Z","formattedDate":"April 8, 2020","tags":[{"label":"Milestone update","permalink":"/tags/milestone-update"}],"readingTime":7.32,"truncated":true,"authors":[{"name":"Agnes Lin","title":"LoopBack Maintainer","url":"https://github.com/agnes512","imageURL":"https://avatars3.githubusercontent.com/u/50331796","key":"agnes512"}],"frontMatter":{"title":"LoopBack 4 March 2020 Milestone Update","date":"2020-04-08T00:00:00.000Z","authors":"agnes512","slug":"march-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 4 2020 Q1 Overview","permalink":"/loopback-4-2020-q1-overview"},"nextItem":{"title":"LoopBack 4 February 2020 Milestone Update","permalink":"/february-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nThe whole world has been through a lot in the past month. The LoopBack team hopes that everyone stays safe and gets through this together.\\n\\nLet\'s check out the work we did in March:\\n- [Migration Guide](#migration-guide)\\n- [From Model to REST API](#from-model-to-rest-api)\\n- [More Usage Scenarios](#more-usage-scenarios)\\n- [Miscellaneous](#miscellaneous)\\n- [Documentation Enhancement](#documentation-enhancement)\\n- [Community Contribution](#community-contribution)\\n\\n\x3c!--truncate--\x3e\\n\\n## Migration Guide\\n\\nAs LoopBack 3 will go end of life at the end of 2020, we\'ve been focusing on the migration guide for the past months. Here is the content we added in March to help LB3 users adopt LoopBack 4:\\n\\n### Migrating Built-in Authentication\\n\\nIn LoopBack 3, the authentication system is a token-based one and has built-in models involved in the mechanism. In LB4, we built a more flexible authentication system that is compatible with different authentication strategies. Even though there are lots of differences, the newly created [access control migration example](https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration) explores how to migrate and build an equivalent LoopBack 3 authentication system in LoopBack 4 with detailed steps. The tutorial includes two main parts: \\n\\n1. How to migrate the LoopBack 3 User model\'s definition and its persistence and login endpoint.\\n2. How to secure endpoints using a token based authentication system and enable the authorize dialog in the API explorer like what we have in LoopBack 3.\\n\\nThe tutorial also uses the handy LB4 CLI to help LB3 users to get familiar with LB4 terms. Read the [migration-authentication](https://loopback.io/doc/en/lb4/migration-authentication.html) tutorial to learn about the details.\\n\\n### Features Not Planned for LoopBack 4\\n\\nBesides migrating artifacts from LB3, there are several features/components we no longer support anymore in LB4. They are listed in the page [LoopBack 3 features not planned in LoopBack 4](https://loopback.io/doc/en/lb4/migration-not-planned.html). We also provide workarounds for these features if users would like to continue using them in LB4. \\n\\n## From Model to REST API\\n\\nThe story [From Model to REST API with no custom repository/controller epic](https://github.com/strongloop/loopback-next/issues/2036) is almost done! In the past few months, we created the [`@loopback/rest-crud`](https://github.com/strongloop/loopback-next/tree/master/packages/rest-crud) package, as well as the the `ModelApiBooter` booter. And this month, we built the CLI command `lb4 rest-crud`. To glue these pieces together, we added an example and documentation to help you pick up this convenience tool. Details are listed below. We will have a blog post in the near future.\\n\\n### CLI Command\\n\\nIn order to make it easier for users to use this feature, we\'ve added a CLI command to simplify the process. If you have model classes and a valid(_persisted_) datasource, the following command will generate model endpoints for you:\\n\\n```sh\\nlb4 rest-crud\\n```\\n\\n### Example Application\\n\\nWe\'ve added a new [`rest-crud` example](https://github.com/strongloop/loopback-next/tree/master/examples/rest-crud) which creates the [`Todo` example](https://github.com/strongloop/loopback-next/tree/master/examples/todo) without the need to define a repository or controller for the Todo model. By loading the `CrudRestComponent`, it demonstrates how to use the default CRUD REST repository and controller with a single model class , datasource, and configuration. The example can be downloaded by running:\\n\\n```sh\\nlb4 example rest-crud\\n```\\n\\nYou can find more information on how to use the command in the [REST CRUD generator documentation](https://loopback.io/doc/en/lb4/Rest-Crud-generator.html).\\n\\n### Documentation\\n\\nNow that most of the epic is completed, we\'ve added [documentation](https://loopback.io/doc/en/lb4/Creating-crud-rest-apis.html) explaining how to use the feature and the configuration options that come with it. Additionally, we also added [documentation](https://loopback.io/doc/en/lb4/Extending-Model-API-builder.html) on extending the [`@loopback/model-api-builder`](https://github.com/strongloop/loopback-next/tree/master/packages/model-api-builder) package to create your own custom model API builders; similar to [`@loopback/rest-crud`](https://github.com/strongloop/loopback-next/tree/master/packages/rest-crud)\'s [`CrudRestApiBuilder`](https://loopback.io/doc/en/lb4/apidocs.rest-crud.crudrestapibuilder.html).\\n\\n## More Usage Scenarios\\n\\nWe\'ve been adding more examples to show what you can build with, and how you can configure a LoopBack 4 app. One of our favorite examples is the [Shopping App](https://github.com/strongloop/loopback4-example-shopping/). It shows how you can integrate LB4 APIs with a simple front-end design to build a site. Besides the [`rest-crud`](#example-application) example mentioned above, we added more examples to show various LoopBack 4 features.\\n\\n### Validation Example\\n\\nLB4 allows you to add validations at three different layers: REST, controller, and ORM. The newly added documentation [Validation](#Validation.md) explains these three different types of validations. We added a corresponding example [Validation Example](https://github.com/strongloop/loopback-next/tree/master/examples/validation-app) to our [Examples list](https://loopback.io/doc/en/lb4/Examples.html) demonstrating how to add and make use of different kinds of validations in a LoopBack 4 application.\\n\\n### File Upload and Download Example\\n\\nUploading/downloading files is a common requirement for API applications. The documentation for [Upload and download files](https://loopback.io/doc/en/lb4/File-upload-download.html) shows the code snippets to create artifacts such as controllers and UI to achieve such a requirement. A fully-functional example is available at [File Transfer Example](https://github.com/strongloop/loopback-next/tree/master/examples/file-transfer).\\n\\n## Documentation Enhancement\\n\\nWe made some changes in the layout design of the website. Hope you like the new look!\\n\\n### Request Response Cycle\\n\\nTo help users have a better understanding of all the components involved in the request-response handling process, in the  [Request-Response cycle](https://loopback.io/doc/en/lb4/Request-response-cycle.html) document, we walk through the path taken by a request to see how it makes its way through the various parts of the framework to return a result. In the near future, we will also add documentation in the migration guide to explain the differences of the request-response cycle between LB3 and LB4. See the GH story [Migration Guide: Request-response cycle](https://github.com/strongloop/loopback-next/issues/4836) for more details.\\n\\n### CHANGELOG Docs\\n\\nWe made the CHANGELOG easier to find on our site. It is available in the section [CHANGELOG](https://loopback.io/doc/en/lb4/changelog.index.html). We hope it helps developers to check out the changes of different packages for each release.\\n\\n## Miscellaneous\\n\\n### User Testimonials\\n\\nWe\'re glad to see a growing number of user testimonials. We refactored it in a new page. Check out the [what our users say](https://loopback.io/what-our-users-say.html) section. [Let us know](https://github.com/strongloop/loopback-next/issues/3047) if you would like to tell us about your LoopBack usage!\\n\\n### IBM i Connector\\n\\nThe [IBM Db2 for i connector](https://github.com/strongloop/loopback-connector-ibmi) was added to the connector list. You can now conveniently create an IBM Db2 for i datasource using our CLI. See the [Db2 for i connector page](https://loopback.io/doc/en/lb4/DB2-for-i-connector.html) for more details.\\n\\n\\n### Newly Added Extensions\\n\\nHere are the extensions we added to the framework:\\n\\nThe IBM API Connect OpenAPI enhancer [@loopback/apiconnect](https://github.com/strongloop/loopback-next/tree/master/extensions/apiconnect) extension was added to extend LoopBack with the ability to integrate with [IBM API Connect](https://www.ibm.com/cloud/api-connect).\\n\\nAn experimental extension [`@loopback/cron`](https://github.com/strongloop/loopback-next/tree/master/extensions/cron) was added. With it, LB4 apps can be integrated with [Cron](https://github.com/kelektiv/node-cron) to schedule jobs using `cron` based schedules.\\n\\n### Extracting JWT Component\\n\\nAfter creating the demo for JWT authentication in [loopback4-example-shopping](https://github.com/strongloop/loopback4-example-shopping) and applying a similar system in [loopback-example-access-control](https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration), we think it\'s time to extract the JWT authentication system into a separate component. This will benefit users who want to quickly mount a prototype token based authentication module to their application. As the first step, we extracted the JWT strategies, the token, and user services into a local module under [components/jwt-authentication](https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration/src/components/jwt-authentication). Next we will move it to a standalone extension package. Feel free to join the discussion in GH story [Extract the jwt authentication to an extension module](https://github.com/strongloop/loopback-next/issues/4903).\\n\\n### Supporting Type Any\\n\\nModel property of type `any` is now supported. The corresponding OpenAPI and JSON schema is `{}` or `true` (according to [the draft JSON schema standard](https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.3.2)). If your model property allows arbitrary values, now you can define it as:\\n\\n```ts\\nclass MyModel extends Entity {\\n  // ...other code\\n  @property({\\n    // specify the type name here as \'any\'\\n    type: \'any\'\\n  })\\n  // use `any` as its TypeScript type\\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\\n  anyProperty: any\\n}\\n```\\n\\n### Bug fixes\\n\\n- We fixed a bug in module `@loopback-ibmdb` where a put request `PUT /Model/{instanceId}` now operates correctly. The fix trickles down into any LoopBack connector with a dependency on `@loopback-ibmdb` like `@loopback-connector-db2` and `@loopback-connector-dashdb`, for example.\\n\\n- We fixed a bug in connector `@loopback-connector-mssql` which was causing permission problems during installation on Windows. Some extra folders ended up in the package tgz file, and this was causing the problem. The fix went out for several LoopBack connectors: MSSQL, DB2, dashDB, Cloudant, MongoDb, MySQL, Oracle, PostgreSQL, and Redis KeyValue. \\n\\n## Community Contribution\\n\\nOur community maintainers and users have been very helpful with building a better LoopBack 4, we really appreciate all the help! Here are the highlights this month:\\n\\n### Enable Authentication Strategies to Contribute OASEnhancer\\nThe community maintainer [`dougal83`](https://github.com/dougal83) improved the authentication strategies `AuthenticationStrategy` so that it can be bound with the OAS enhancer extension point via a binding key instead of a constant.\\n\\n### Japanese Translation for LB4\\n\\nThe community user [`saotak`](https://github.com/saotak) added several LB4 pages in Japanese. See [the site](https://loopback.io/doc/ja/lb4/index.html). We need your help to have more translations for the LB4 documentations! The instructions can be found in the page [Translation](https://loopback.io/doc/en/contrib/translation.html).\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"february-2020-milestone","metadata":{"permalink":"/february-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-03-04-february-milestone.md","source":"@site/blog/2020/2020-03-04-february-milestone.md","title":"LoopBack 4 February 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-03-05T00:00:00.000Z","formattedDate":"March 5, 2020","tags":[{"label":"Milestone update","permalink":"/tags/milestone-update"}],"readingTime":10.37,"truncated":true,"authors":[{"name":"Janny Hou","title":"LoopBack Maintainer","url":"https://github.com/jannyhou","imageURL":"https://avatars2.githubusercontent.com/u/12554153","key":"jannyhou"}],"frontMatter":{"title":"LoopBack 4 February 2020 Milestone Update","date":"2020-03-05T00:00:00.000Z","authors":"jannyhou","slug":"february-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 4 March 2020 Milestone Update","permalink":"/march-2020-milestone"},"nextItem":{"title":"LoopBack - 2020 Goals and Focus","permalink":"/2020-goals"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nThe February in a leap year is quite special and we hope everyone has some memorable stories from that extra day! In the past month, LoopBack team continued to focus on the migration guide epic. In the meantime, we were able to contribute significant PRs across all the functional areas. We are really glad to see the increasing engagement from community members, we appreciate all your code reviews and contributions. Last but not least, we published new major releases for [`@loopback/*`](https://github.com/strongloop/loopback-next) modules as as we dropped Node.js 8 support and introduced a few other breaking changes.\\n\\nKeep reading to learn about what happened in February!\\n\\n\x3c!--truncate--\x3e\\n\\n## Migration Guide\\n\\n### Migrating Operation Hooks\\n\\nWhile we work on a [spike for supporting operation hooks for models/repositories](https://github.com/strongloop/loopback-next/issues/1919), we are providing a temporary API for enabling operation hooks in LoopBack 4. It requires overriding the `DefaultCrudRepository`\'s `definePersistedModel` method in the model\'s repository.\\n\\nHere is an example of adding a `before save` operation hook to the `Product` model.\\n\\n```ts\\nclass ProductRepository extends DefaultCrudRepository<\\n  Product,\\n  typeof Product.prototype.id,\\n  ProductRelations\\n> {\\n  constructor(dataSource: juggler.DataSource) {\\n    super(Product, dataSource);\\n  }\\n\\n  definePersistedModel(entityClass: typeof Product) {\\n    const modelClass = super.definePersistedModel(entityClass);\\n    modelClass.observe(\'before save\', async ctx => {\\n      console.log(`going to save ${ctx.Model.modelName}`);\\n    });\\n    return modelClass;\\n  }\\n}\\n```\\nFor more details visit [Migrating CRUD operation hooks](https://loopback.io/doc/en/lb4/migration-models-operation-hooks.html).\\n\\n### Migrating LoopBack 3 Models with a Custom Base Class\\n\\nThe initial implementation of `lb4 import-lb3-models` was able to import only models inheriting from models that have a built-in counter-part in LoopBack 4: `Model`, `PersistedModel`, `KeyValueModel`. Now it also supports migrating models inheriting from all other models, including LoopBack 3 built-in models like `User`, or an application-specific model. The chain of base (parent) models will also be created in the LoopBack 4 application. For example, model `Customer` extends model `UserBase` which extends model `User`, and if you run `lb4 import-lb3-models`, you will see the following prompts:\\n\\n```sh\\n$ lb4 import-lb3-models ~/src/loopback/next/packages/cli/test/fixtures/import-lb3-models/app-using-model-inheritance.js\\n\\nWARNING: This command is experimental and not feature-complete yet.\\nLearn more at https://loopback.io/doc/en/lb4/Importing-LB3-models.html\\n\\n? Select models to import: Customer\\nModel Customer will be created in src/models/customer.model.ts\\n\\nAdding UserBase (base of Customer) to the list of imported models.\\nModel UserBase will be created in src/models/user-base.model.ts\\n\\nAdding User (base of UserBase) to the list of imported models.\\nModel User will be created in src/models/user.model.ts\\n\\nImport of model relations is not supported yet. Skipping the following relations: accessTokens\\nIgnoring the following unsupported settings: acls\\n   create src/models/customer.model.ts\\n   create src/models/user-base.model.ts\\n   create src/models/user.model.ts\\n   update src/models/index.ts\\n   update src/models/index.ts\\n   update src/models/index.ts\\n\\n```\\n\\n### Migrating Access Control Example\\n\\nAs the first story to explorer the authorization migration path, we started with migrating a [LoopBack 3 example application](https://github.com/strongloop/loopback-example-access-control) which implemented a RBAC (role based access control) system for demoing the LoopBack 3 authentication and authorization mechanism.\\n\\nThe migrated LoopBack 4 example is created in [examples/access-control-migration](https://github.com/strongloop/loopback-next/tree/master/examples/access-control-migration). It uses [casbin](https://github.com/casbin/casbin) as the third party library to implement the role mapping. The original models and endpoints are migrated to the LoopBack 4 models, repositories, and controllers. The JWT authentication system is applied again and the core logic of original role resolvers and model ACLs map to the LoopBack 4 authorization system\'s authorizers and metadata.\\n\\nWe created a very [detailed tutorial](https://loopback.io/doc/en/lb4/migration-auth-access-control-example.html) for the migration steps that you can follow to see how to secure the same endpoints in LoopBack 4.\\n\\n### Migrating Model Mixins\\n\\nWe\'ve added a section [Migrating model mixins](https://loopback.io/doc/en/lb4/migration-models-mixins.html) to the migration guide to detail how LoopBack 3 property and custom method/remote method mixins can be migrated to LoopBack 4 model/repository/controller mixin class factory functions.\\n\\n### Migration of all model properties\\n\\nWe have confirmed that migration also passes down the connector metadata in the model properties with [additional tests](https://github.com/strongloop/loopback-next/issues/3810).\\n\\n## Experimental Feature on Integration with Winston and Fluentd Logging\\n\\n[`@loopback/extension-logging`](https://github.com/strongloop/loopback-next/blob/master/extensions/logging/README.md) contains a component that provides logging facilities based on [Winston](https://github.com/winstonjs/winston) and [Fluentd](https://github.com/fluent/fluent-logger-node). Here is an example of injecting and invoking a Winston logger:\\n\\n```ts\\nimport {inject} from \'@loopback/context\';\\nimport {Logger, logInvocation} from \'@loopback/extension-logging\';\\nimport {get, param} from \'@loopback/rest\';\\n\\nclass MyController {\\n  // Inject a winston logger\\n  @inject(LoggingBindings.WINSTON_LOGGER)\\n  private logger: Logger;\\n\\n  // http access is logged by a global interceptor\\n  @get(\'/greet/{name}\')\\n  // log the `greet` method invocations\\n  @logInvocation()\\n  greet(@param.path.string(\'name\') name: string) {\\n    return `Hello, ${name}`;\\n  }\\n\\n  @get(\'/hello/{name}\')\\n  hello(@param.path.string(\'name\') name: string) {\\n    // Use the winston logger explicitly\\n    this.logger.log(\'info\', `greeting ${name}`);\\n    return `Hello, ${name}`;\\n  }\\n}\\n```\\nIts architecture diagram and basic usage are well documented in the package\'s [README.md](https://github.com/strongloop/loopback-next/blob/master/extensions/logging/README.md) file.\\n\\n## Context and Binding\\n\\n### Adding Inspection Flags\\n\\nContext and binding inspection APIs were improved with more options and information to print out their injections. \\n\\nAt binding level, there is one flag:\\n  - `includeInjections`: control if injections should be inspected.\\n\\nAn example usage is:\\n\\n```ts\\nconst myBinding = new Binding(key, true)\\n  .tag(\'model\', {name: \'my-model\'})\\n  .toClass(MyController);\\n// It converts a binding with value constructor to plain JSON object\\nconst json = myBinding.inspect({includeInjections: true});\\n```\\n\\nAt context level, there are two flags:\\n  - `includeInjections`: control if binding injections should be inspected.\\n  - `includeParent`: control if parent context should be inspected.\\n\\nAnd their corresponding example usages:\\n\\n```ts\\nchildCtx.inspect({includeInjections: true});\\nchildCtx.inspect({includeParent: false})\\n```\\n\\nMore test cases can be found in PR https://github.com/strongloop/loopback-next/pull/4558\\n\\n### Inspect Example\\n\\n[@raymondfeng](https://strongloop.com/authors/Raymond_Feng/) has created [loopback4-example-inspect](https://github.com/raymondfeng/loopback4-example-inspect) to demonstrate the inspection of a LoopBack 4 application\'s context hierarchy. It provides visualization on the different contexts (request, server, application), their bindings, and dependency injections in class constructors. Information is exposed via 3 endpoints:\\n\\n- inspect: Fetches a JSON document for the context hierarchy.\\n- graph: Renders the LoopBack application as a SVG diagram.\\n- graph-d3: Displays the graph using [d3-graphviz](https://github.com/magjac/d3-graphviz).\\n\\nThis example is turning into an extension `@loopback/context-explorer` in PR [#4666](https://github.com/strongloop/loopback-next/pull/4666). The core code is packed as a component.\\n\\n### Dynamic Binding and Rebinding of Controllers\\n\\nThe hot-reloading of controllers after starting application is supported now. You can dynamically add/remove controllers after the application runs, and their endpoints will be mounted/removed accordingly. The OpenAPI specification that describes the exposed endpoints will also be updated. For example:\\n\\n```ts\\nconst app = new Application();\\nawait app.start();\\napp.controller(MyController);\\n// MyController are available via REST API now\\n// You can also see the updated OpenAPI Specification from endpoint /openapi.json\\n```\\n\\n## Allowing Different Naming Convention in `lb4 discover` CLI\\n\\nThe CLI now allows selection of two naming convention for `lb4 discover` command: camel case or all lower case. You can find the explanation of each prompt in the [Discovering models from relational databases](https://loopback.io/doc/en/lb4/Discovering-models.html) page. `discoverAndBuildModels` allows you to have different conventions to meet your requirements. Details can be found in page [Discover and define models at runtime](https://loopback.io/doc/en/lb3/Discovering-models-from-relational-databases.html#discover-and-define-models-at-runtime).\\n\\n## CRUD REST API Builder\\n\\nWe added a new API builder that helps build a CRUD repository and controller class in [PR #4589](https://github.com/strongloop/loopback-next/pull/4589). `CrudRestApiBuilder` can be used with an `Entity` class to create a default repository and controller classes for the model class.\\nFor example, if you have a `Product` model and a database `db`. In your `src/application.ts` file:\\n\\n```ts\\n// add the following import\\nimport {CrudRestComponent} from \'@loopback/rest-crud\';\\nexport class TryApplication extends BootMixin(\\n  ServiceMixin(RepositoryMixin(RestApplication)),\\n) {\\n  constructor(options: ApplicationConfig = {}) {\\n    // other code\\n    // add the following line\\n    this.component(CrudRestComponent);\\n  }\\n}\\n```\\n\\nCreate a new file for the configuration, e.g. `src/model-endpoints/product.rest-config.ts` that defines the `model`, `pattern`, `dataSource`, and `basePath` properties:\\n\\n```ts\\nimport {ModelCrudRestApiConfig} from \'@loopback/rest-crud\';\\nimport {Product} from \'../models\';\\nmodule.exports = <ModelCrudRestApiConfig>{\\n  model: Product,\\n  pattern: \'CrudRest\', // make sure to use this pattern\\n  dataSource: \'db\',\\n  basePath: \'/products\',\\n};\\n```\\n\\nNow your Product model will have a default repository and default controller class defined without the need for a repository or controller class file.\\nFor more information on the API builder, see [`@loopback/rest-crud`\'s README](https://github.com/strongloop/loopback-next/blob/master/packages/rest-crud/README.md).\\n\\n## REST Decorators\\n\\nWe simplified the `filter` and `where` usage for constraint, schema, and OpenAPI mapping with two shortcut decorators: `@param.filter` and `@param.where`. The example below shows how they replaced the tedious signatures:\\n\\n```ts\\nclass TodoController {\\n  async find(\\n    @param.filter(Todo)\\n    // replaces `@param.query.object(\'filter\', getFilterSchemaFor(Todo))`\\n    filter?: Filter<Todo>,\\n  ): Promise<Todo[]> {\\n    return this.todoRepository.find(filter);\\n  }\\n  async findById(\\n    @param.path.number(\'id\') id: number,\\n    // replaces `@param.query.object(\'filter\', getFilterSchemaFor(Todo))`\\n    @param.filter(Todo, {exclude: \'where\'}) filter?: FilterExcludingWhere<Todo>,\\n  ): Promise<Todo> {\\n    return this.todoRepository.findById(id, filter);\\n  }\\n  async count(@param.where(Todo) where?: Where<Todo>): Promise<Count> {\\n    // replaces @param.query.object(\'where\', getWhereSchemaFor(Todo)) where?: Where<Todo>,\\n    return this.todoRepository.count(where);\\n  }\\n}\\n```\\n\\n## API Explorer\\n\\nWe have now changed the OpenAPI specification generated by the decorator `@param.query.json` to support url-encoding. Please take a look at (https://github.com/strongloop/loopback-next/issues/2208). This means users can now test their APIs from API explorer with complex json query parameters (eg: `filter={include: {relation: \\"todoList\\"}}`). Previously users were able to test from API explorer with only simple key-values in exploded format (eg: `?filter[limit]=1` ), because the generated OpenAPI for json query parameters was always of `exploded deep-object` style. This could be a breaking change for some API clients. Please take a look at the breaking change log in commits from PR https://github.com/strongloop/loopback-next/pull/4347\\n\\n## Tooling and Build\\n\\n- `npm test` is passing on Windows: The problem was caused by `process.stdin.isTTY` behaves differently on the Windows platform, and was discovered by community member [@derdeka](https://github.com/derdeka). Great thanks to him and [@dougal83](https://github.com/dougal83) who had been working with [@bajtos](https://strongloop.com/authors/Miroslav_Bajto%C5%A1/) to investigate and eventually fix the issue! A series of PRs are involved: [#4643](https://github.com/strongloop/loopback-next/pull/4643), [#4605](https://github.com/strongloop/loopback-next/pull/4605), [#4652](https://github.com/strongloop/loopback-next/pull/4652), [#4657](https://github.com/strongloop/loopback-next/pull/4657)\\n\\n- PR [#4707](https://github.com/strongloop/loopback-next/pull/4707) removed dist files from top-level tsconfig to speed up the eslint checks. The time for `npm run eslint` was reduced from about 4m10s down to 2m50s. More importantly, it enabled proper caching behavior, so that subsequent runs of `npm run eslint` are super quick, even after `npm run build` modified dist files.\\n\\n- Dropped Node.js 8 support in PR [#4619](https://github.com/strongloop/loopback-next/pull/4619). Node.js v8.x is now end of life, so that we upgraded the supported version across all the LoopBack 4 packages to be 10 and above. This breaking change also resulted in a semver-major release for the monorepo. Many small breaking changes are coming as part of it.\\n\\n- [`request`](https://www.npmjs.com/package/request) module is now officially deprecated, so we replaced it with a new HTTP client [`axios`](https://github.com/axios/axios). The entire story is tracked in [#2672](https://github.com/strongloop/loopback-next/issues/2672). We have updated the [http-caching-proxy](https://github.com/strongloop/loopback-next/pull/4637) and [benchmark](https://github.com/strongloop/loopback-next/pull/4628) packages to use axios.\\n\\n## Miscellaneous\\n\\n- We upgraded the dependency of TypeScript from 3.7 to 3.8 in PR [#4769](https://github.com/strongloop/loopback-next/pull/4769). You can find the new features of TypeScript 3.8 in [here](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html)\\n\\n- Querying with filter `where`, `fields` and `order` is now supported in the API Explorer, the usage is well documented in the section [parameter decorator to support json objects](https://loopback.io/doc/en/lb4/Decorators_openapi.html#parameter-decorator-to-support-json-objects)\\n\\n- We enabled running shared tests from both loopback-datasource-juggler@3 and loopback-datasource-juggler@4 in one more connector: `loopback-connector-db2`\\n\\n- We fixed a bug in postgresql connector which occurred when few of the foreign keys in a parent table have null values (https://github.com/strongloop/loopback-next/issues/4332)\\n\\n## Documentations and Blog Posts\\n\\nAfter refactoring the shopping example, we updated the [README.md](https://github.com/strongloop/loopback4-example-shopping) file to document the new changes of application usage and the authorization system.\\n\\nWe published two blog posts this month about the management and plan for our project:\\n\\n- LoopBack 3 has entered Maintenance LTS: https://strongloop.com/strongblog/lb3-entered-maintenance-mode/\\n\\n- The 2020 Goals and Focus for LoopBack: https://strongloop.com/strongblog/2020-goals/\\n\\n## Community Contribution\\n\\nWith more LoopBack users joined us as community maintainers, we\'re seeing more interactions and discussions! Also, we\'re glad to see that the increasing numbers of pull request from the community. We really appreciate all of these help! Here are the highlight of community PR of February:\\n\\n### Adding Flag `disableDefaultSort` to Improve Database Query Performance\\n\\nUser [`Erikdegroot89`](https://github.com/Erikdegroot89) pointed out that the way LB4 sets default sorting for SQL query might drag down the querying time when the database has a massive amount of data. Using the new added flag `disableDefaultSort`, users can turn the default sorting off. See details in [PR #417](https://github.com/strongloop/loopback-connector-postgresql/pull/417). This PR also inspires us to leverage the option to all connectors. The issue is tracked in [GH issue](https://github.com/strongloop/loopback-connector/issues/169). Feel free to contribute or join the discussion.\\n\\n### Deprecation Decorator\\n\\n`@oas.deprecated` was created by user [mschnee](https://github.com/mschnee) to enrich our OpenAPI decorators. It can be applied to class and a class method. It will set\\nthe `deprecated` boolean property of the Operation Object. When applied to a\\nclass, it will mark all operation methods of that class as deprecated, unless a\\nmethod overloads with `@oas.deprecated(false)`. You can check out [its documentation](https://loopback.io/doc/en/lb4/Decorators_openapi.html#oasdeprecated) to learn more details.\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"2020-goals","metadata":{"permalink":"/2020-goals","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-02-12-goals2020.md","source":"@site/blog/2020/2020-02-12-goals2020.md","title":"LoopBack - 2020 Goals and Focus","description":"Originally published on strongloop.com","date":"2020-02-26T00:00:00.000Z","formattedDate":"February 26, 2020","tags":[{"label":"Community","permalink":"/tags/community"}],"readingTime":3.43,"truncated":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"},{"name":"Raymond Feng","title":"LoopBack Maintainer","url":"https://github.com/raymondfeng","imageURL":"https://avatars0.githubusercontent.com/u/540892","key":"raymondfeng"},{"name":"Miroslav Bajto\u0161","title":"LoopBack Maintainer","url":"http://github.com/bajtos","imageURL":"https://avatars.githubusercontent.com/u/1140553","key":"bajtos"}],"frontMatter":{"title":"LoopBack - 2020 Goals and Focus","date":"2020-02-26T00:00:00.000Z","authors":["dhmlau","raymondfeng","bajtos"],"slug":"2020-goals","tags":["Community"]},"prevItem":{"title":"LoopBack 4 February 2020 Milestone Update","permalink":"/february-2020-milestone"},"nextItem":{"title":"LoopBack 3 has entered Maintenance LTS","permalink":"/lb3-entered-maintenance-mode"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n2019 was surely an exciting and rewarding year for LoopBack. We [received the \\"Best in API Middleware\\" award](https://strongloop.com/strongblog/loopback-2019-api-award-api-middleware/) from API World, our LB4 downloads on npmjs.com increased more than double compared to the year before. Moreover, we are thrilled to learn that many of you had deployed LoopBack 4 applications in production! In case you missed our [2019 review](https://strongloop.com/strongblog/loopback-2019-review/), make sure you check it out. As 2020 begins, we would like to share with you our high-level goals for this year. Things might change or shift throughout the year, but here is our plan.\\n\\n\x3c!--truncate--\x3e\\n\\n### Goal#1 - Enable as many LoopBack 3 users to migrate to LoopBack 4 as possible\\n\\nWith LoopBack 3 going end-of-life at the end of 2020, we are continuing to focus on the following areas: \\n\\n- [Migration Guide](https://loopback.io/doc/en/lb4/migration-overview.html)\\n\\n    We had made good progress in the general runtime migration guide. As we complete the spike for the migration guide on authentication and authorization, we aim at finishing the migration guide in both areas. Our approach is to create the skeleton of the migration guide and fill in the details as we go. If you\'d like to see certain migration topics but they are not in the guide, please let us know!\\n\\n- Migration tooling\\n\\n    To allow you to migrate your LB3 app incrementally, we have [an example](https://github.com/strongloop/loopback-next/tree/master/examples/lb3-application) for you to demonstrate how to mount your existing LoopBack 3 (LB3) application on a new LoopBack 4 (LB4) project and how to move the middleware from the LB3 application to a common location so that both the LB3 and LB4 applications can use them. Besides, there is also a [CLI to import models from LoopBack 3 project](https://loopback.io/doc/en/lb4/Importing-LB3-models.html). \\n\\n    We would like to continue to add and enhance the migration tooling to make your migration experience easier and faster. \\n\\n- Feature parity\\n\\n  This year, we would like to close some of the feature parity gaps that a lot of you are asking for. We also realized that there are existing libraries to support certain functionalities in some cases, we\'d like to document our recommendation as well.\\n\\n- Integration into IBM API Connect \\n\\n  With LoopBack 3 being packaged in [IBM API Connect](https://www.ibm.com/cloud/api-connect), it is also a good time for us to have LoopBack 4 integrated into the product. A [spike](https://github.com/strongloop/loopback-next/issues/4115) has been done on the integration work and we\'ll continue to work on this.\\n\\n\\n### Goal#2 - Keep adopting latest technologies to stay relevant\\n\\nWhile enhancing our core code base, we\'d like to continue to explore the possibility of using and/or integrating the latest technologies with LoopBack 4, such as:\\n  - messaging and pub/sub event style, e.g. Kafka, MQTT\\n  - cloud native integration\\n  - native support on GraphQL\\n  - modernize the connector infrastructure and code base\\n\\nWe initiated some investigation in some of the areas last year and would like to continue to adopting the latest technologies in order for LoopBack to stay relevant. \\n\\n\\n### Goal#3: Nurture our community and encourage more contributions\\n\\nWe cannot do this alone! Community contributions are vital to us. As our user base gets larger, it is essential to grow the contributor community. It not only accelerates our development, but also helps the community gain deeper LoopBack knowledge.\\n\\nWe would like to encourage community contributions by making a list of GH issues available to the community that we want to finish in the short term by using the `help wanted` and `2020Qx` labels. If you\'re looking for something to contribute in LoopBack, please check our [issue list for 2020Q1](https://github.com/strongloop/loopback-next/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22+%222020Q1%22). \\n\\nIf you\'re new to contributing to LoopBack or in open source project in general, don\'t worry, we have [detailed instructions](https://loopback.io/doc/en/lb4/code-contrib-lb4.html) to guide you through. \\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"lb3-entered-maintenance-mode","metadata":{"permalink":"/lb3-entered-maintenance-mode","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-02-19-lb3-entered-maintenance-mode.md","source":"@site/blog/2020/2020-02-19-lb3-entered-maintenance-mode.md","title":"LoopBack 3 has entered Maintenance LTS","description":"Originally published on strongloop.com","date":"2020-02-19T00:00:00.000Z","formattedDate":"February 19, 2020","tags":[{"label":"LoopBack 3","permalink":"/tags/loop-back-3"}],"readingTime":2.73,"truncated":true,"authors":[{"name":"Miroslav Bajto\u0161","title":"LoopBack Maintainer","url":"http://github.com/bajtos","imageURL":"https://avatars.githubusercontent.com/u/1140553","key":"bajtos"}],"frontMatter":{"title":"LoopBack 3 has entered Maintenance LTS","date":"2020-02-19T00:00:00.000Z","authors":"bajtos","slug":"lb3-entered-maintenance-mode","tags":["LoopBack 3"]},"prevItem":{"title":"LoopBack - 2020 Goals and Focus","permalink":"/2020-goals"},"nextItem":{"title":"LoopBack 4 January 2020 Milestone Update","permalink":"/january-2020-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nAlmost a year ago, we announced [Extended Long Term Support for LoopBack 3](https://strongloop.com/strongblog/lb3-extended-lts/), extending Active LTS to the end of November 2019. As the saying goes, all good things must come to an end, and so LoopBack version 3 has entered Maintenance LTS in December 2019.\\n\x3c!--truncate--\x3e\\n\\nWhat does this change means for LoopBack 3 users? Quoting from our [Long Term Support policy](https://loopback.io/doc/en/contrib/Long-term-support.html):\\n\\n> Once a release moves into Maintenance LTS mode, only critical bugs, critical security fixes, and documentation updates will be permitted.\\n>\\n> Specifically, adding support for new major Node.js versions is not permitted.\\n\\nLet\'s quickly clarify that Node.js 12 is the latest major Node.js version supported by LoopBack 3.\\n\\nNow back to the first rule, which limits the allowed updates to critical problems only. This rule has two goals:\\n\\n- Maximize the stability of LTS versions by reducing possibilities of changes that may introduce undesired bugs or unintended breaking changes.\\n- Minimize our effort spent on maintaining old versions, so that we can invest more into the current version (LoopBack 4 and beyond).\\n\\nThere is a catch though: because LoopBack 4 is fundamentally incompatible with LoopBack 3, there are bugs that exists in LoopBack 3 only. The usual approach, where bugs are fixed in the Current version and back-ported to LTS versions, cannot be applied. As a result, we are tracking several community-contributed pull requests fixing issues specific to LoopBack 3.\\n\\nWe feel it would be counter-productive to reject those in-progress pull requests now, after several rounds of reviews and adjustments, just because LoopBack 3 transitioned from Active to Maintenance LTS. We don\'t want to throw away effort invested by developers contributing those fixes and thus we decided an exceptional situation deserves an exception to be made.\\n\\n**Until June 2020, we will keep reviewing pull requests fixing non-critical bugs in LoopBack 3 and if we evaluate the risk of breaking something else as low, then we will accept the fix.**\\n\\nAt the end of June, we will evaluate the impact of this new rule and decide if we want to extend its duration further.\\n\\n## Affected packages\\n\\nThe following packages are considered as part of LoopBack 3 and are moving to\\nMaintenance LTS:\\n\\n- [generator-loopback](https://www.npmjs.com/package/generator-loopback)\\n- [grunt-loopback-sdk-angular](https://www.npmjs.com/package/grunt-loopback-sdk-angular)\\n- [gulp-loopback-sdk-angular](https://www.npmjs.com/package/gulp-loopback-sdk-angular)\\n- [loopback](https://www.npmjs.com/package/loopback)\\n- [loopback-boot](https://www.npmjs.com/package/loopback-boot)\\n- [loopback-cli](https://www.npmjs.com/package/loopback-cli)\\n- [loopback-component-explorer](https://www.npmjs.com/package/loopback-component-explorer)\\n- [loopback-component-passport](https://www.npmjs.com/package/loopback-component-passport)\\n- [loopback-component-push](https://www.npmjs.com/package/loopback-component-push)\\n- [loopback-component-storage](https://www.npmjs.com/package/loopback-component-storage)\\n- [loopback-context](https://www.npmjs.com/package/loopback-context)\\n- [loopback-datasource-juggler](https://www.npmjs.com/package/loopback-datasource-juggler) (version 3.x)\\n- [loopback-filters](https://www.npmjs.com/package/loopback-filters)\\n- [loopback-phase](https://www.npmjs.com/package/loopback-phase)\\n- [loopback-sandbox](https://www.npmjs.com/package/loopback-sandbox)\\n- [loopback-sdk-angular](https://www.npmjs.com/package/loopback-sdk-angular)\\n- [loopback-sdk-angular-cli](https://www.npmjs.com/package/loopback-sdk-angular-cli)\\n- [loopback-soap](https://www.npmjs.com/package/loopback-soap)\\n- [loopback-swagger](https://www.npmjs.com/package/loopback-swagger)\\n- [loopback-workspace](https://www.npmjs.com/package/loopback-workspace)\\n- [strong-remoting](https://www.npmjs.com/package/strong-remoting)\\n\\nPlease note that connectors are compatible with both LoopBack version 3 and version 4, therefore they are staying actively developed.\\n\\n## Call to Action\\n\\nWe urge all LoopBack 3 users to migrate their applications to LoopBack 4 as soon as possible. We are providing [Migration guide](https://loopback.io/doc/en/lb4/migration-overview.html) and automated tooling to help with the transition.\\n\\nIf you are building a new project, then we strongly recommend to use LoopBack 4 from the beginning.\\n\\nLoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"january-2020-milestone","metadata":{"permalink":"/january-2020-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-02-05-january-milestone.md","source":"@site/blog/2020/2020-02-05-january-milestone.md","title":"LoopBack 4 January 2020 Milestone Update","description":"Originally published on strongloop.com","date":"2020-02-05T00:00:00.000Z","formattedDate":"February 5, 2020","tags":[{"label":"Milestone update","permalink":"/tags/milestone-update"}],"readingTime":7.655,"truncated":true,"authors":[{"name":"Dominique Emond","title":"LoopBack Maintainer","url":"https://github.com/emonddr","imageURL":"https://avatars0.githubusercontent.com/u/6864736","key":"emonddr"}],"frontMatter":{"title":"LoopBack 4 January 2020 Milestone Update","date":"2020-02-05T00:00:00.000Z","authors":"emonddr","slug":"january-2020-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 3 has entered Maintenance LTS","permalink":"/lb3-entered-maintenance-mode"},"nextItem":{"title":"LoopBack 4 2019 Q4 Overview","permalink":"/loopback4-2019-q4-overview"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nIt\'s a [Leap Year](https://en.wikipedia.org/wiki/Leap_year) this year, and we continue to make leaps in LoopBack 4.\\n\\nWith New Year\'s resolutions in mind, we quickly got started on several items.\\n\\nCheck out the sections below for the progress we made in each area:\\n\\n- [LoopBack 4 Shopping Example Front-end](#loopback-4-shopping-example-front-end)\\n- [Migration Guide](#migration-guide)\\n- [Improved Developer Experience](#improved-developer-experience)\\n- [Improved Performance Of Context](#improved-performance-of-context)\\n- [APIC and LoopBack Integration](#apic-and-loopback-integration)\\n- [Community Contributions](#community-contributions)\\n- [Miscellaneous](#miscellaneous)\\n\\n\x3c!--truncate--\x3e\\n\\n## LoopBack 4 Shopping Example Front-end\\n\\nThe LoopBack 4 example app now has a website - Shoppy.\\n\\n![](./images/shoppy.png)\\n\\nCheck out [https://github.com/strongloop/loopback4-example-shopping/](https://github.com/strongloop/loopback4-example-shopping/) and start the app; Shoppy is available at [http://localhost:3000/shoppy.html](http://localhost:3000/shoppy.html).\\n\\nThis website serves as an example for integrating LoopBack 4 APIs to a front-end and as a basis for you to experiment with various LoopBack 4 features.\\n\\nThe authorization portion has also been revamped to make it easier to follow.\\n\\n## Migration Guide\\n\\n### Migrating Boot Scripts\\n\\nIn LoopBack 3, predefined boot scripts are organized in the `/server/boot` directory, and are executed right before the server starts to perform some custom application initialization. The same functionality can also be achieved in LoopBack 4 application by adding observers.\\nHaving the observers created, you can access the application and artifacts like models, datasources by dependency injection or retrieving from the context. Moreover, specifying the order of observers is also supported. For the 2 pre-defined LoopBack 3 boot scripts (`/server/boot/root.js` and `/server/boot/authentication.js`), please do not create corresponding observers for them. In LoopBack 4, the router is automatically registered in the rest server and the authentication system is enabled by applying the authentication component. See [Migrating boot scripts](https://loopback.io/doc/en/lb4/migration-boot-scripts.html) for more details.\\n\\n### Migrating Remoting Hooks\\n\\nIn LoopBack 3, a remote hook enables you to execute a function before or after a remote method is called by a client. There are three kinds of hooks: global, model, and method. LoopBack 4 provides the interceptors feature to enable application developers to implement similar functionality.\\nSee [Migrating remoting hooks](https://loopback.io/doc/en/lb4/migration-models-remoting-hooks.html) for more details.\\n\\n### Migrating Custom Model Methods\\n\\n In LoopBack 3, developers could customize model methods in various ways:\\n\\n - configure which endpoints are public\\n - customize the model method, but not the endpoint\\n - add a new model method and a new endpoint\\n\\n The first could be done by modifying some settings in `server/model-config.json` or calling the `disableRemoteMethodByName( methodName )` on the model. The second was accomplished by overriding a default model method inside the model script file. The third was accomplished by adding a new model method and a new remote method definition inside the model script file.\\n\\n In LoopBack 4,\\n  - data-access APIs (model methods) are implemented by repositories that are decoupled from models.\\n  - REST APIs (remote methods) are implemented by controllers that are decoupled from models.\\n\\nMigrating the LoopBack 3 model method customizations to LoopBack 4 is very straightforward.\\nSee [Migrating custom model methods](https://loopback.io/doc/en/lb4/migration-models-methods.html) for more details.\\n\\n### Spike for Authentication & Authorization Migration Guide\\n\\nA spike was completed which outlined the remaining tasks required for authentication and authorization migration details between LB3 and LB4.\\nPlease see [PR #4440](https://github.com/strongloop/loopback-next/pull/4440) for details.\\n\\n## Improved Developer Experience\\n\\n### CLI Improvements\\n\\nThe Command Line Interface (CLI) is one of the most convenient tools of LoopBack. With a few commands and basic information, it allows you to create a LoopBack application in a short time. We made some improvements in the following CLI commands to make them more intuitive and flexible (especially the `relation` one):\\n\\n#### `lb4 relation`\\n\\nAlright, we admit that our `lb4 relation` command wasn\'t entirely user-friendly -- it generated partial code even when you forced it to stop; it didn\'t handle customized names even when it looked like it would; it didn\'t support the `HasOne` relation. We improved on some of these issues. As you can see in the newly updated [Relation Generator](https://loopback.io/doc/en/lb4/Relation-generator.html) page, it now takes customized foreign keys and relation names with more descriptive prompt messages. Need an example? We updated the [TodoList Example](https://loopback.io/doc/en/lb4/todo-list-tutorial-relations.html) with the latest CLI capabilities.\\n\\nEven though the CLI is a handy tool and has a lot of functionality, it still has limitations. For instance, users can customize foreign key names, relation names, source key names, and even the database column names in relations. The newly released CLI changes currently supports some of these, but not all of them. For the latest details on defining relations, you can always check the [Relations](https://loopback.io/doc/en/lb4/Relations.html) page.\\n\\nAs for defining a `HasOne` relation through the CLI, one of our community users [`@Lokesh1197`](https://github.com/lokesh1197) has provided this new capability via [PR #4171](https://github.com/strongloop/loopback-next/pull/4171). See [hasOne Relation](https://loopback.io/doc/en/lb4/hasOne-relation.html) and [Relation generator](https://loopback.io/doc/en/lb4/Relation-generator.html) for updated documentation.\\n\\n#### `lb4 openapi`\\n\\nLoopBack 4 uses `index.ts` files to export different kinds of artifacts. The `lb4 openapi` command wasn\'t generating/updating this file. We noticed this recently and fixed it immediately. Phew! Don\'t forgot to install the latest `@loopback/cli` to get the patch!\\n\\n### Warning for strict model usage\\n\\nIf you are/used to be an LB3 user, you\'re probably familiar with the `strict` mode. It allows you to create models that permit both well-defined and also arbitrary extra properties. LB4 has this nice feature as well. However, it is applicable to **NoSQL** databases only. If you applied this setting to SQL databases, it would get silently discarded and this made it difficult for developers to troubleshoot unexpected behavior.\\n\\nNow, users will receive a warning when they try to set a model to `{strict: false}` mode while they are using a SQL datasource in an LB4 application. We updated the [Supported Entries of Settings](https://loopback.io/doc/en/lb4/Model.html#supported-entries-of-settings) table of the `Model` page to clarify this potential issue.\\n\\n## Improved Performance Of Context\\n\\nWe addressed some context-related performance degredation bugs that recently came in. It turns out that matching all bindings by a filter function can be expensive. [PR #4377](https://github.com/strongloop/loopback-next/pull/4377) addresses these bugs and improves performance for one of the primary usages of the context - find bindings by tags.\\n\\nPerformance was improved by:\\n\\n- making a binding to be an EventEmitter (emitting events when binding scope/tags/value are changed)\\n- setting up event listeners in the context to react to binding events to maintain an index of bindings by tag\\n- optimizing Context.findByTag to leverage binding index if possible\\n- changing interceptor to find matching global interceptors by tag\\n- simple benchmark testing shows over 15% gain for hello-world\\n\\n## APIC and LoopBack Integration\\n\\nWe started to investigate the steps required, if needed, on importing OpenAPI specs generated from a LoopBack 4 application into IBM API Connect v2018. There are additional extended configurations and APIC product files that are needed in order to import the API successfully. As the next step, we will be testing all endpoints of our example shopping application with API Connect, and documenting the steps. For details on the spike, see https://github.com/strongloop/loopback-next/issues/4115.\\n\\n## Community Contributions\\n\\n- [`@Lokesh1197`](https://github.com/lokesh1197) updated our relation CLI with the ability to define a `HasOne` relation via [PR #4171](https://github.com/strongloop/loopback-next/pull/4171). See [hasOne Relation](https://loopback.io/doc/en/lb4/hasOne-relation.html) and [Relation generator](https://loopback.io/doc/en/lb4/Relation-generator.html) for updated documentation.\\n- [`@achrinza`](https://github.com/achrinza) has made several small improvements/clarifications in our documentation.\\n- [`@dougal83`](https://github.com/dougal83) added the title property to filter schemas (filter, where, scope) in preparation for openapi schema consolidation. See [PR#4355](https://github.com/strongloop/loopback-next/pull/4355) for more details.\\n\\nA big \'Thank you!\' to all our contributors! :)\\n\\n## Miscellaneous\\n\\n- We improved the Transaction interface in loopback-connector by adding an `isActive()` method. This allows you to determine if the connection object on the transaction is present or not. Suppose you have a transaction instance called `tx`, you can call `tx.isActive()` to check the activeness of its connection without throwing an error (if an error happens). See [PR #4474](https://github.com/strongloop/loopback-next/pull/4474) and [PR #4537](https://github.com/strongloop/loopback-next/pull/4537), and [Using database transactions](https://loopback.io/doc/en/lb4/Using-database-transactions.html) for details.\\n- Updated Todo and TodoList Tutorials. The Todo and TodoList tutorials and examples are a great place to start learning about LoopBack 4. As our CLI prompts and generated artifacts have changed and improved over time, we recently started noticing that our documentation and code snippets were slightly out-of-date, and there was a bug as well. We decided it was time to update these fun tutorials and examples. [PR #4412](https://github.com/strongloop/loopback-next/pull/4412) addressed these issues. Please see [Todo tutorial](https://loopback.io/doc/en/lb4/todo-tutorial.html),[TodoList tutorial](https://loopback.io/doc/en/lb4/todo-list-tutorial.html), [Todo Example](https://github.com/strongloop/loopback-next/tree/master/examples/todo), and [TodoList Example](https://github.com/strongloop/loopback-next/tree/master/examples/todo-list) for the latest and greatest.\\n- Fixed problem where CLI commands generate artifacts with lint problems. See [PR #4431](https://github.com/strongloop/loopback-next/pull/4431) for details.\\n- Improved `@loopback/authorization`\'s README.md document to include detailed steps of implementing a basic RBAC system. See [PR #4205](https://github.com/strongloop/loopback-next/pull/4405) for details.\\n- Updated `strong-docs`\'s dependencies to use the latest TypeScript 3.7. See [PR #128](https://github.com/strongloop/strong-docs/pull/128) for details.\\n- Added alias support for header language \'zh-cn\' and \'zh-tw\' in `strong-globalize`. See [PR #151](https://github.com/strongloop/strong-globalize/pull/151) and [PR #153](https://github.com/strongloop/strong-globalize/pull/153) for details.\\n- Fixed problem with complex objects for query params in api explorer. See [PR#4347](https://github.com/strongloop/loopback-next/pull/4347) for details.\\n\\n## What\'s Next?\\n\\nIf you\'re interested in what we\'re working on next, you can check out the [February Milestone](https://github.com/strongloop/loopback-next/issues/4543).\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."},{"id":"loopback4-2019-q4-overview","metadata":{"permalink":"/loopback4-2019-q4-overview","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-01-22-loopback-q4-overview.md","source":"@site/blog/2020/2020-01-22-loopback-q4-overview.md","title":"LoopBack 4 2019 Q4 Overview","description":"Originally published on strongloop.com","date":"2020-01-22T00:00:00.000Z","formattedDate":"January 22, 2020","tags":[{"label":"Quarterly update","permalink":"/tags/quarterly-update"}],"readingTime":5.51,"truncated":true,"authors":[{"name":"Diana Lau","title":"LoopBack Maintainer","url":"https://github.com/dhmlau","imageURL":"https://avatars2.githubusercontent.com/u/25489897","key":"dhmlau"},{"name":"Agnes Lin","title":"LoopBack Maintainer","url":"https://github.com/agnes512","imageURL":"https://avatars3.githubusercontent.com/u/50331796","key":"agnes512"}],"frontMatter":{"title":"LoopBack 4 2019 Q4 Overview","date":"2020-01-22T00:00:00.000Z","authors":["dhmlau","agnes512"],"slug":"loopback4-2019-q4-overview","tags":["Quarterly update"]},"prevItem":{"title":"LoopBack 4 January 2020 Milestone Update","permalink":"/january-2020-milestone"},"nextItem":{"title":"LoopBack 4 December 2019 Milestone Update","permalink":"/december-2019-milestone"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\nHappy New Year! The number of LoopBack 4 downloads in 2019 increased more than double than that in 2018. Thank you for your continuous support in using and contributing to LoopBack. We cannot do this alone and we really appreciate all the contributions from the community. In December, we were happy to have 3 community members join us as maintainers: [@derdeka](https://github.com/derdeka), [dougal83](https://github.com/dougal83) and [achrinza](https://github.com/achrinza)!\\n\\nAs year 2020 commences, let us summarize our development activities in the last quarter of 2019.\\n\\n- [Migration Guide](#migration-guide): created the outline for general runtime migration and added details on migrating Express middleware and model relations.\\n- [Going cloud native](#going-cloud-native): added extensions for observability and deployment documentation\\n- [Authentication and authorization](#authentication-and-authorization): enhanced the documentation and enabled token based authentication in API Explorer\\n- [Inclusion of Related Models](#inclusion-of-related-models): completed MVP and ability to allow custom scope.\\n- [Partition Key with Cloudant and CouchDB](#partition-key-with-cloudant-and-couchdb): added support for partitioned database\\n- [Creating REST API from Model Classes](#creating-rest-api-from-model-classes): added the ability to generate controller from Model and Repository classes\\n\\n\x3c!--truncate--\x3e\\n\\n## Migration Guide\\n\\nEnriching the [Migration Guide from LB3](https://github.com/strongloop/loopback-next/issues/453) story is our focus of this quarter and will continue to be the focus. Adding on top of the comparison between the concepts in LoopBack 3 and that in LoopBack 4, we created the skeleton on the areas that need more explanation in the migration. You can find it on our site: [Migration Guide](https://loopback.io/doc/en/lb4/migration-overview.html)\\n\\nIn Q4, we added pages for migrating: [Model](https://loopback.io/doc/en/lb4/migration-models-core.html), [Datasource](https://loopback.io/doc/en/lb4/migration-datasources.html), [Model Relation](https://loopback.io/doc/en/lb4/migration-models-relations.html), [Express Middleware](https://loopback.io/doc/en/lb4/migration-express-middleware.html), etc. If there are other topics you\'d like to see in the migration guide, please let us know on [GitHub](https://github.com/strongloop/loopback-next/issues/453).\\n\\n## Going Cloud Native\\n\\nIn the past few months, we made significant amount of enhancement in the cloud native area. Not only we added the extensions for logging, health check, tracing and metrics, we also created the deployment to Kubernetes tutorial in our shopping example application. For details, take a look at the [blog post](https://strongloop.com/strongblog/going-cloud-native-with-loopback-4/) from [Raymond](https://strongloop.com/authors/Raymond_Feng/).\\n\\nBesides, the Node.js LoopBack stack provides a powerful solution to build microservices in TypeScript with LoopBack. Appsody is an open source project that makes creating cloud native applications simple. It has many cool features which are pre-configured with cloud native capabilities for Kubernetes and Knative deployments. In our detailed [Appsody with LoopBack Tutorial](https://loopback.io/doc/en/lb4/Appsody-LoopBack.html) on developing and deploying LoopBack applications, we would like to show you the possibility and potential of how these kinds of tools can work well with LoopBack of building microservices.\\n\\n## Authentication and Authorization\\n\\nWe added the support for authentication and authorization in LoopBack 4. Check out the [Authentication page](https://loopback.io/doc/en/lb4/Loopback-component-authentication.html) and the [Authorization page](https://loopback.io/doc/en/lb4/Loopback-component-authorization.html) for the latest features. Want to try out a real-world example? We updated the [shopping example application](https://github.com/strongloop/loopback4-example-shopping) to use the authentication and authorization systems to help you get familiar with it.\\n\\nAlso, we made some progress on the story _allow users to have token-based authentication in API Explorer_ in Q4. Starting with [a spike](https://github.com/strongloop/loopback-next/issues/2027) as the blueprint, we now added an extension point for the OpenAPI enhancers as the first brick in the wall. Check out the [\\"Extending OpenAPI Specification\\"](https://loopback.io/doc/en/lb4/Extending-OpenAPI-specification.html) page for details. As always, we\'d love to get any help from you. Here are some follow-up stories if you\'re interested in contributing:\\n\\n- [Add OpenAPI enhancer service in @loopback/rest](https://github.com/strongloop/loopback-next/issues/4380)\\n- [Ordering the enhancers by group name for OpenAPI spec enhancer service ](https://github.com/strongloop/loopback-next/issues/4385)\\n- [Add bearer auth scheme as the default security scheme](https://github.com/strongloop/loopback-next/issues/4386)\\n\\n## Inclusion of Related Models\\n\\nWe finished the Inclusion of Related Models [MVP](https://github.com/strongloop/loopback-next/issues/1352) in Q4! This addition not only simplifies querying data and reduces database calls in LoopBack 4, but it closes one feature gap between LoopBack 3 and LoopBack 4 as well.\\n\\nIn the past few months, we released a bunch of features such as [custom scope for inclusion](https://loopback.io/doc/en/lb4/HasMany-relation.html#query-multiple-relations), and we [added inclusion resolvers to lb4 relation CLI](https://github.com/strongloop/loopback-next/issues/3451), etc. We enhanced the [documentation](https://loopback.io/doc/en/lb4/HasMany-relation.html#querying-related-models) with examples and usages along with [a blog post](https://strongloop.com/strongblog/inclusion-of-related-models/) to show how you can query data over different relations easily. Still, there are some limitations and unfinished tasks. Check [Post MVP](https://github.com/strongloop/loopback-next/issues/3585) if you\'d like to contribute.\\n\\n## Partition Key with Cloudant and CouchDB\\n\\nSpeaking of better performance and manageability of databases, the database that supports partitioning is one of the ideal choices. Are you considering to use databases that have the feature such as Cloudant and CouchDB with LoopBack? We now support such features in the corresponding connectors. It not only makes the query less computationally, but also reduces cost for LoopBack users using the Cloudant service on IBM Cloud. We have prepared a tutorial and documentation to help you get started! See the details and examples on the usage in [Partition Databases](https://github.com/strongloop/loopback-connector-cloudant/blob/master/doc/partitioned-db.md).\\n\\n## Creating REST API from Model\\n\\nAs LoopBack 4 provides more scalability and extensibility, we ask users to create artifacts such as Model, Datasource, Repository, and Controller to start building their applications. Compared to LoopBack 3, it adds complexity and extra steps to create APIs. This story aims to improve the developer experience for those who may not need that extra flexibility.\\n\\nYou might wonder how simple it would be. In the [spike](https://github.com/strongloop/loopback-next/pull/4235), if you already have the database (we use MySQL in the spike) and tables set up, you can create basic CRUD APIs just through the API Explorer. For example, all you need to do is to make a POST request with a valid MySQL connection string and a list of existing tables,\\n\\n```ts\\n{\\n  \\"connectionString\\": \\"mysql://root@localhost/test\\",\\n  \\"tableNames\\": [\\n    \\"Coffeeshop\\"\\n  ]\\n}\\n```\\n\\nthen the new endpoints will be created for you.\\n\\nImplementations are on the way! Feel free to try out the spike and join the discussion on GitHub :D\\n\\n## What\'s Next?\\n\\nIf you have been following us, you probably realize that we now start our planning of the milestones and roadmaps with a pull request. We think it is useful to our users to get to know our plans and possibly provide inputs in our planning stage. See our [2020 Goals and Focus](https://github.com/strongloop/loopback-next/blob/master/docs/ROADMAP.md#2020-goals-and-focus) and [Q1 roadmap](https://github.com/strongloop/loopback-next/blob/master/docs/ROADMAP.md#q1-2020-roadmap). There is also the [Janurary milestone](https://github.com/strongloop/loopback-next/issues/4376).\\n\\n## Previous Milestone Blogs\\n\\nCheck out our previously published monthly milestone blog posts in Q4 for more details:\\n\\n- [October milestone blog](https://strongloop.com/strongblog/october-2019-milestone/)\\n- [November milestone blog](https://strongloop.com/strongblog/november-2019-milestone/)\\n- [December milestone blog](https://strongloop.com/strongblog/december-2019-milestone/)\\n\\nIf you want to see a 2019 summary, don\'t forget to check out [this blog](https://strongloop.com/strongblog/loopback-2019-review/)!\\n\\n## Call for Action\\n\\nLoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Please join us and help the project by:\\n\\n- [Reporting issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contributing](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md)\\n  code and documentation.\\n- [Opening a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue)."},{"id":"december-2019-milestone","metadata":{"permalink":"/december-2019-milestone","editUrl":"https://github.com/loopbackio/loopback-blog/blog/2020/2020-01-08-december-milestone.md","source":"@site/blog/2020/2020-01-08-december-milestone.md","title":"LoopBack 4 December 2019 Milestone Update","description":"Originally published on strongloop.com","date":"2020-01-08T00:00:00.000Z","formattedDate":"January 8, 2020","tags":[{"label":"Milestone update","permalink":"/tags/milestone-update"}],"readingTime":10.895,"truncated":true,"authors":[{"name":"Agnes Lin","title":"LoopBack Maintainer","url":"https://github.com/agnes512","imageURL":"https://avatars3.githubusercontent.com/u/50331796","key":"agnes512"}],"frontMatter":{"title":"LoopBack 4 December 2019 Milestone Update","date":"2020-01-08T00:00:00.000Z","authors":"agnes512","slug":"december-2019-milestone","tags":["Milestone update"]},"prevItem":{"title":"LoopBack 4 2019 Q4 Overview","permalink":"/loopback4-2019-q4-overview"}},"content":"_Originally published on [strongloop.com](https://strongloop.com)_\\n\\n\\nIt\'s 2\ufe0f\u20e30\ufe0f\u20e32\ufe0f\u20e30\ufe0f\u20e3!\\n\\nHappy New Year! Is the snow dancing outside of your window or is the sunshine bringing warmth and glow to the grass around you? No matter where you are, the LoopBack team is thankful for you being with us through 2019! It means a lot to us that you choose LoopBack for your applications and projects.\\n\\nWe\'re also excited to have [Denny](https://github.com/derdeka), [Douglas](https://github.com/dougal83), and [Rifa](https://github.com/achrinza) as LoopBack maintainers! They\'ve been actively helpful in our community. We appreciate all the contributions and great work. Welcome to the team!\\n\\nEven though this past December was a short month due to the holidays, the list of the accomplished tasks is not short! Check out the sections below for the progress we made in each area:\\n\\n- [From Model Definition to REST API](#from-model-definition-to-rest-api): build a LB4 app with just models!\\n- [Inclusion of Related Models](#inclusion-of-related-models): enable custom scope for inclusion.\\n- [Authentication](#authentication): new added user profile factory and StrategyAdapter.\\n- [@loopback/context Improvement](#allowing-interceptor-to-be-invoked-based-on-the-source): invoke interceptors based on their callers.\\n- [Application Life Cycle](#improving-application-life-cycle-states): application states and the shutdown hooks.\\n- [OpenAPI Enhancer Service](#openapi-enhancer-service): contribute OpenAPI spec pieces from extensions.\\n- [Improving Juggler and Connectors](#improving-juggler-and-connectors): new property settings.\\n- [New ESLint Rules](#new-eslint-rules): applied new `@typescript-eslint` rules.\\n- [Documentation Improvements](#documentation-improvements)\\n\\n\x3c!--truncate--\x3e\\n\\n## From Model Definition to REST API\\n\\nInitially, LoopBack 4 required all artifacts (Model, Repository, and Controller classes) to be defined in TypeScript source files. Recently, we started to work on a declarative approach, where the Repository and Controller classes can be created dynamically at runtime (see [`@loopback/rest-crud`](https://github.com/strongloop/loopback-next/tree/master/packages/rest-crud) package).\\n\\n### Discovering Models and Building REST APIs at Runtime\\n\\nThis month, we pushed this concept one step further and implemented a proof of concept showing how to dynamically build CRUD REST API for any SQL database table:\\n\\n1. Discover model definition from a database, build `ModelDefinition` object from the discovered schema\\n2. Define a model class from a `ModelDefinition` object\\n3. Define a CRUD repository class for the given model\\n4. Define a CRUD REST API controller class for the given model & repository\\n\\nThe demo application can be found in the pull request [loopback-next #4235](https://github.com/strongloop/loopback-next/pull/4235).\\n\\nTo make this scenario possible, we needed to make few improvements:\\n\\n- [loopback-datasource-juggler #1807](https://github.com/strongloop/loopback-datasource-juggler/pull/1807) fixes TypeScript typings in `loopback-datasource-juggler` to make DataSource APIs like `discoverSchema` easier to consume using `await` keyword.\\n- [loopback-next #4266](https://github.com/strongloop/loopback-next/pull/4266) adds a new API `defineModelClass` that builds a Model class constructor using the given base model (e.g. `Entity`) and the given `ModelDefinition`.\\n\\nAs part of the experiment, we have again encountered the limitation of our REST layer when controllers registered after startup are not picked up. This feature is discussed in [loopback-next #433](https://github.com/strongloop/loopback-next/issues/433). Feel free to chime in and perhaps contribute a pull request if this use case is important for your projects.\\n\\n### Model API Builder Package\\n\\nWe introduced a new package `@loopback/model-api-builder` for building APIs from models. This package allows users to build repositories and controllers based on their models through their defined extensions. We also added `ModelApiBooter` that leverages Model API builders contributed via `ExtensionPoint`/`Extension` to implement the actual API building. See [README](https://github.com/strongloop/loopback-next/tree/master/packages/model-api-builder) file for details.\\n\\n## Inclusion of Related Models\\n\\nWe managed to finish the Inclusion of Related Models [MVP](https://github.com/strongloop/loopback-next/issues/1352) in 2019! Check out the [Post MVP](https://github.com/strongloop/loopback-next/issues/3585) if you\'d like to contribute.\\n\\n### Enabling inclusion with custom scope\\n\\nTraversing data through different relations is a common use case in real world. Take a nested relation as an example, a `Customer` might be interested in the `Shipment` status of their `Order`:\\n\\n```ts\\nCustomer: {\\n  name: \'where\\\\\'s my order at\'\\n  orders: [\\n    {\\n      name: \'order 1\',\\n      shipment: {\\n        shipment_id: 123\\n      }\\n    },\\n    {\\n      name: \'order 2\',\\n      shipment: {\\n        shipment_id: 999\\n      }\\n    }\\n  ]\\n}\\n```\\n\\nIn [PR #4263](https://github.com/strongloop/loopback-next/pull/4263), we enabled such traversal by allowing users to customize the `scope` field for their query filter. The above example can be achieved by the following query:\\n\\n```ts\\ncustomerRepo.find({\\n  include: [\\n    {\\n      relation: \'orders\',\\n      scope: {\\n        include: [{relation: \'shipment\'}],\\n      },\\n    },\\n  ],\\n});\\n```\\n\\nMore use cases and examples are added to the page [Query Multiple Relations](https://loopback.io/doc/en/lb4/HasMany-relation.html#query-multiple-relations).\\n\\n### Handling navigational properties with CRUD operations\\n\\nIt\'s convenient to traverse related models with relations. However, when it comes to operations such as creation and updating, navigational properties might cause some unexpected problems. In [PR #4148](https://github.com/strongloop/loopback-next/pull/4148), we decided to reject CRUD operations that contain any navigational properties. For example, the request to create a `Customer` with its `Address` will be rejected:\\n\\n```ts\\ncustomerRepo.create({\\n  name: \'customer\',\\n  address: [\\n    {\\n      street: \'nav property\',\\n      city: \'should not be included\',\\n    },\\n  ],\\n});\\n```\\n\\n## Authentication\\n\\n### User Profile Factory Interface\\n\\nWe\'ve added a _convenience_ function interface named [`UserProfileFactory<U>`](https://github.com/strongloop/loopback-next/blob/0630194539ba7971ca6c6579ebb9d986e6340a41/packages/authentication/src/types.ts#L34-L36) to `@loopback/authentication`. Implement this interface with your own custom user profile factory function to convert your specific user model into a [UserProfile](https://github.com/strongloop/loopback-next/blob/9e40e43bd1c9fe71155087341b0fc590ee9d67e3/packages/security/src/types.ts#L37-L42) model (used by both `@loopback/authentication` and `@loopback/authorization`).\\n\\n### StrategyAdapter Improvements\\n\\nThe `StrategyAdapter` in `@loopback/authentication-passport` now takes in an additional argument `userProfileFactory` in its constructor. This argument is initialized with a default implementation of the `UserProfileFactory<U>` interface, mentioned above, and simply returns your specific user model as a user profile model. It is recommended that you implement your own user profile factory function to map a specific/minimal set of properties from your custom user model to the user profile model. Please see the [updated documentation](https://github.com/strongloop/loopback-next/tree/master/extensions/authentication-passport) for more details.\\n\\n## Allowing Interceptor to Be Invoked Based on the Source\\n\\nSome interceptors want to check the caller to decide if its logic should be applied. For example, an http access logger only cares about invocations from the rest layer to the first controller. In [PR #4168](https://github.com/strongloop/loopback-next/pull/4168), we added an option `source`, which can check the caller that invokes a method with interceptors. Check out the [Interceptors page](https://loopback.io/doc/en/lb4/Interceptors.html#source-for-an-invocation) for relative documentation and examples.\\n\\n## Improving Application Life Cycle States\\n\\nIt\u2019s often desirable for various types of artifacts to participate in the life cycles and perform related operations. In [PR #4145](https://github.com/strongloop/loopback-next/pull/4145), we improved the the check for application states and also add the shutdown hooks which allows graceful shutdown when the application is running inside a managed container such as Kubernetes Pods. Please check the related documentation and examples on the site [Life cycle events and observers](https://loopback.io/doc/en/lb4/Life-cycle.html#application-states) to help you understand more about the LoopBack 4 application life cycle.\\n\\n## OpenAPI Enhancer Service\\n\\nWe\'ve added a new extension point `OASEnhancerService` to allow the OpenAPI specification (short for OAS) contributions to a rest application. The feature originated from the need to add security schemes and policies to a LoopBack application\'s OAS. Now you can modify your application\'s OAS by creating and registering OAS enhancers.\\n\\nA typical OAS enhancer implements interface `OASEnhancer` which has a string type `name` field and a function `modifySpec()`. For example, to modify the `info` field of an OAS, you can create an `InfoSpecEnhancer` as follows:\\n\\n```ts\\nimport {bind} from \'@loopback/core\';\\nimport {\\n  mergeOpenAPISpec,\\n  asSpecEnhancer,\\n  OASEnhancer,\\n  OpenApiSpec,\\n} from \'@loopback/openapi-v3\';\\n\\n@bind(asSpecEnhancer)\\nexport class InfoSpecEnhancer implements OASEnhancer {\\n  // give your enhancer a proper name\\n  name = \'info\';\\n  // the function to modify your OpenAPI specification and return a new one\\n  modifySpec(spec: OpenApiSpec): OpenApiSpec {\\n    const InfoPatchSpec = {\\n      info: {title: \'LoopBack Test Application\', version: \'1.0.1\'},\\n    };\\n    const mergedSpec = mergeOpenAPISpec(spec, InfoPatchSpec);\\n    return mergedSpec;\\n  }\\n}\\n```\\n\\nThen bind it to your application by `this.add(createBindingFromClass(InfoSpecEnhancer))`.\\n\\nThe OAS enhancer service organizes all the registered enhancers, and is able to apply one or all of them. You can check [\\"Extending OpenAPI specification\\"](https://loopback.io/doc/en/lb4/Extending-OpenAPI-specification.html) documentation to learn more about creating and registering OAS enhancers, adding OAS enhancer service and applying its enhancers.\\n\\nWe will allow users to have token-based authentication in API Explorer in the near future. Please check our future milestone blogs.\\n\\n## Improving Juggler and Connectors\\n\\n### Improving Performance - persistDefaultValues Model Property Setting\\n\\nWe have added a new model-property property `persistDefaultValues`, which prevents a property value that matches the default from being written to the database when it set to `false`.\\n\\nThis is particularly useful when you have a model with a lot of properties or sub-properties whose values may be the default value, and these models run into thousands or maybe millions. Setting `persistDefaultValues` to `false` can drastically reduce the write time and size of the database. This setting is applicable to LB4 and LB3. Check the document on our site: [Property](https://loopback.io/doc/en/lb3/Model-definition-JSON-file.html#general-property-properties).\\n\\n### Allowing String Type Attribute to Be Auto-generated in PostgreSQL\\n\\n[Auto-migration](https://loopback.io/doc/en/lb4/Database-migrations.html) is a convenient tool to help you create relational database schemas based on definitions of your models. Typically, auto-migration would use the database\'s _default type_ as the primary key type. For example, the default type of MySQL is integer, and the default type of MongoDB is string. We\'ve added a field `useDefaultIdType` before that allows you to use other types than the default type when doing auto-migration. For example, for MySQL, the following setting allows you to have a string type primary key in tables:\\n\\n```ts\\n@property({\\n  type: \'string\',\\n  id: true,\\n  useDefaultIdType: false,\\n  // generated: true -> can not be set\\n})\\nid: string;\\n```\\n\\nHowever, sometimes users want to have auto-generate primary key with non-default type. For instance, a common use case is having `uuid` as the primary key in MySQL or PostgreSQL. We enable the auto-generated `uuid` with auto-migration for PostgreSQL. In short, the following setting enables auto-generated `uuid`:\\n\\n```ts\\n@property({\\n  id: true,\\n  type: \'string\',\\n  generated: true,\\n  useDefaultIdType: false, // this is needed if this property is id\\n  postgresql: {\\n    dataType: \'uuid\',\\n  },\\n})\\nid: String;\\n```\\n\\nBy default, when the user wants to auto-generate string type properties in PostgreSQL, we use `uuid` and the function `uuid_generate_v4()`. It is possible to use other extensions and functions. Please check on the site for more details: [PostgreSQL connector](https://loopback.io/doc/en/lb3/PostgreSQL-connector.html#discovery-and-auto-migration).\\n\\nThis feature will be added to MySQL in the near future.\\n\\n## New ESLint Rules\\n\\nWe have enabled several new `@typescript-eslint` rules to detect more kinds of potential programming errors. These new rules will trigger a semver-major release of the package `@loopback/eslint-config`. Be prepared to handle new violations after upgrading.\\n\\nList of new checks:\\n\\n- [`return-await`](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/return-await.md)\\n- [`no-extra-non-null-assertion`](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-extra-non-null-assertion.md)\\n- [`prefer-nullish-coalescing`](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.md)\\n- [`prefer-optional-chain`](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-optional-chain.md)\\n\\nAs part of this effort, we migrated our code base to use [nullish coalescing](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#nullish-coalescing) and [optional chaining](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#optional-chaining) operators.\\n\\n## Documentation Improvements\\n\\n### Appsody / LoopBack 4 Tutorial\\n\\n[Appsody](https://appsody.dev/) is an open source project that makes creating cloud native applications simple. It provides application stacks for open source runtimes and frameworks, which are pre-configured with cloud native capabilities for Kubernetes and Knative deployments.\\n\\nIn August, LoopBack was added as one of the application stacks in Appsody to provide a powerful solution to build open APIs and Microservices in TypeScript. The name of the stack is [nodejs-loopback](https://github.com/appsody/stacks/tree/master/incubator/nodejs-loopback).\\n\\nPlease refer to our tutorial [Developing and Deploying LoopBack Applications with Appsody](https://loopback.io/doc/en/lb4/Appsody-LoopBack.html) for detailed instructions on how to use the Appsody CLI to:\\n\\n- scaffold, run, stop, debug, and test a LoopBack 4 application locally\\n- build and deploy the application to Kubernetes on the IBM Cloud\\n\\n### Migrating Middleware from LB3 to LB4\\n\\nWe enhanced the documentation and updated the tutorial of migrating LB3 application on a new LB4 app. By mounting the LB3 middleware with a base Express application, the middleware can be shared by both LB3 and LB4 apps. For example, you can use REST APIs in your LB3 app with a new LB4 application, which will be helpful if you are a LB3 user and ready to move to LoopBack 4. Check out [Migrating Express middleware](https://loopback.io/doc/en/lb4/migration-express-middleware.html) for the steps and examples.\\n\\n### Migrating DataSources from LB3 to LB4\\n\\nTo improve the documentation for migration from LB3 to LB4, we also added steps for migrating LB3 datasources into a LB4 project. LB3 datasources are compatible with LB4, so the datasource configuration remains the same between both. See [Migrating Datasources](https://loopback.io/doc/en/lb4/migration-datasources.html) for steps on how to migrate your datasources.\\n\\n### Customizing Source Key for Relations\\n\\nTypically, the primary key is used as the source key in relations (i.e joining two tables). In LB4, we use `keyFrom` and `keyTo` to define the source key and foreign key respectively. If you would like to use a non-id property as your source key, setting `keyFrom` would allow you to do so. Check the [Relation Metadata](https://loopback.io/doc/en/lb4/HasMany-relation.html#relation-metadata) section for details.\\n\\n### Other\\n\\n- We\'ve added some links and refactored the [Using Components](https://loopback.io/doc/en/lb4/Using-components.html) page to make the site better navigation.\\n\\n- We\'ve updated the [Authorization Component](https://loopback.io/doc/en/lb4/Loopback-component-authorization.html) page detailedly to match the latest code base.\\n\\n## User Feedback Sessions\\n\\nInterested in joining a user feedback session? We love to hear your input and how you are using LoopBack. If you\'d like to take part or have suggestions, please join our discussion in the [GitHub issue](https://github.com/strongloop/loopback-next/issues/4264).\\n\\n## What\'s Next?\\n\\nIf you\'re interested in what we\'re working on next, you can check out the [January Milestone](https://github.com/strongloop/loopback-next/pull/4376).\\n\\n## Call to Action\\n\\nIn 2020, we look forward to helping you and seeing you around! LoopBack\'s success depends on you. We appreciate your continuous support and engagement to make LoopBack even better and meaningful for your API creation experience. Here\'s how you can join us and help the project:\\n\\n- [Report issues](https://github.com/strongloop/loopback-next/issues).\\n- [Contribute](https://github.com/strongloop/loopback-next/blob/master/docs/CONTRIBUTING.md) code and documentation.\\n- [Open a pull request on one of our \\"good first issues\\"](https://github.com/strongloop/loopback-next/labels/good%20first%20issue).\\n- [Join](https://github.com/strongloop/loopback-next/issues/110) our user group."}]}')}}]);